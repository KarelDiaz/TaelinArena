
{
  'Bit.0': {
    type: { ctor: 'Ref', name: 'Bit' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Bit.1': {
    type: { ctor: 'Ref', name: 'Bit' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  Bit: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'bit',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Bits.0': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'bs',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bs', body: [Function] }
  },
  'Bits.1': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'bs',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bs', body: [Function] }
  },
  'Bits.concat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bits.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bs1', body: [Function] }
  },
  Bits: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'bits',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Bits.from_string': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Bits.inc': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bits', body: [Function] }
  },
  'Bits.nil': {
    type: { ctor: 'Ref', name: 'Bits' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Bits.parse_hex': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Bits.parse_hex.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Bits.reverse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'as', body: [Function] }
  },
  'Bits.reverse.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'as', body: [Function] }
  },
  'Bool.and': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.elim': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'b',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'b', body: [Function] }
  },
  'Bool.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.false': {
    type: { ctor: 'Ref', name: 'Bool' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Bool.false_isnt_true': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'P', expr: [Object], body: [Function] }
  },
  Bool: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'bool',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Bool.if': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Bool.not': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.notf': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.or': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.test.different_elem': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'a',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.true': {
    type: { ctor: 'Ref', name: 'Bool' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Bool.true_isnt_false': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Lam', eras: false, name: 'e', body: [Function] }
  },
  Char: { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'U16' } },
  'Char.hex_value': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'chr', body: [Function] }
  },
  'Char.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'b0', body: [Function] }
  },
  'Char.newline': {
    type: { ctor: 'Ref', name: 'Char' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Char.parse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'str',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Char.parse.type': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Char.quote': {
    type: { ctor: 'Ref', name: 'Char' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Char.tab': {
    type: { ctor: 'Ref', name: 'Char' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Cmp.eql': {
    type: { ctor: 'Ref', name: 'Cmp' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  Cmp: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'cmp',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Cmp.gtn': {
    type: { ctor: 'Ref', name: 'Cmp' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Cmp.ltn': {
    type: { ctor: 'Ref', name: 'Cmp' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Comp.app': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'func', body: [Function] }
  },
  'Comp.fal': {
    type: { ctor: 'Ref', name: 'Comp' },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  Comp: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'comp',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Comp.lam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Comp.let': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Comp.stringify': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'comp', body: [Function] }
  },
  'Comp.tru': {
    type: { ctor: 'Ref', name: 'Comp' },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Comp.var': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  Concat: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Concat.push': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Concat.to_list': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Bind': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    }
  },
  'Core.Comp.check': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.Comp.infer': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.Ctx.ext': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Core.Ctx': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Ctx.nil': {
    type: { ctor: 'Ref', name: 'Core.Ctx' },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Core.Def': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Defs': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Defs.get': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Defs.get_term': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Defs.get_type': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Defs.new': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Core.Defs.set': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Core.Defs.term': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Defs.type': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Read.Reply': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Core.Read.all': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.ann': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'expr', body: [Function] }
  },
  'Core.Read.app': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'func', body: [Function] }
  },
  'Core.Read.arr': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bind', body: [Function] }
  },
  'Core.Read.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Read.def': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.defs': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.defs.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Read.done': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Read.fail': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Read.first_of': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Read': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Core.Read.fst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'txts', body: [Function] }
  },
  'Core.Read.is_name': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'chr', body: [Function] }
  },
  'Core.Read.is_name.set': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.is_space': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'chr', body: [Function] }
  },
  'Core.Read.lam': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.let': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.nam': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Lam', eras: false, name: 'code', body: [Function] }
  },
  'Core.Read.next': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Core.Read.one': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'chr0', body: [Function] }
  },
  'Core.Read.opt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Core.Read.par': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.pip': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'func', body: [Function] }
  },
  'Core.Read.seek': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Read.trm.base': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'nil', expr: [Object], body: [Function] }
  },
  'Core.Read.trm': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.trm.post': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'base', body: [Function] }
  },
  'Core.Read.txt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Core.Read.typ': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.var': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.wrd': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.all.Tuple': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Core.all': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'eras', body: [Function] }
  },
  'Core.ann': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'done', body: [Function] }
  },
  'Core.app': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'eras', body: [Function] }
  },
  'Core.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Core.eql.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  Core: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'core',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Core.if_all': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.is_all': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.is_lam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.lam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'eras', body: [Function] }
  },
  'Core.let': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Core.normalize': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.parse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'code', body: [Function] }
  },
  'Core.parse_defs': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'code', body: [Function] }
  },
  'Core.reduce': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.ref': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Core.stringify': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.stringify.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.to_bits.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.to_uid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.typ': {
    type: { ctor: 'Ref', name: 'Core' },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Core.typecheck': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.typecomp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.typeinfer': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.var': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Debug.log': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Either.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Either: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Either.left': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Either.right': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Empty.absurd': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'x',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  Empty: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'empty',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Equal.apply': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Equal.apply_ind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Equal.chain': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Equal: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Equal.mirror': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Equal.rewrite': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Equal.to': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Example.nat': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Example.tco': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'Let', name: 'n10', expr: [Object], body: [Function] }
  },
  'Example.u32_add': {
    type: { ctor: 'Ref', name: 'U32' },
    term: { ctor: 'Let', name: 'num', expr: [Object], body: [Function] }
  },
  'Exports.TaelinArena': {
    type: { ctor: 'Ref', name: 'Exports' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Exports.add': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Exports.example': {
    type: { ctor: 'Ref', name: 'Exports' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  Exports: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Exports.new': {
    type: { ctor: 'Ref', name: 'Exports' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'F64.0': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.1': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.180': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.2': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.256': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.Boundary': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'boundary',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.Boundary.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pts', body: [Function] }
  },
  'F64.Circle': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'circle',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.Circle.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.Line': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'line',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.Line.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.Segment': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'segment',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.Segment.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.circle_boundary_intersects': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'c', body: [Function] }
  },
  'F64.V3.circle_line_intersection': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'c', body: [Function] }
  },
  'F64.V3.circle_to_circle_hit_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.dot': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'v3',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.V3.get_x': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.get_y': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.get_z': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.len': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.look_at': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.map': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fn', body: [Function] }
  },
  'F64.V3.map_x': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fn', body: [Function] }
  },
  'F64.V3.map_y': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fn', body: [Function] }
  },
  'F64.V3.map_z': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fn', body: [Function] }
  },
  'F64.V3.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'F64.V3.norm': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.point_segment_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'p', body: [Function] }
  },
  'F64.V3.point_segment_sqrdist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'p', body: [Function] }
  },
  'F64.V3.polygon_to_segments.cons': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.V3.polygon_to_segments': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.V3.polygon_to_segments.nil': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.V3.polygon_to_segments.transform': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.V3.rot_90': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.rotate': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.scale': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'k', body: [Function] }
  },
  'F64.V3.sqr_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64._1': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.acos': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.acos' }
  },
  'F64.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.add' }
  },
  'F64.asin': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.asin' }
  },
  'F64.atan': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.atan' }
  },
  'F64.cmp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.cos': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.cos' }
  },
  'F64.div': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.div' }
  },
  'F64.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'F64.exp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.exp' }
  },
  'F64.floor': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  F64: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'f64',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.from_bool': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'b', body: [Function] }
  },
  'F64.gte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.gtn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.if': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'F64.is_between': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.log': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.log' }
  },
  'F64.lte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.max': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.max' }
  },
  'F64.min': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.min' }
  },
  'F64.mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.mod' }
  },
  'F64.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.mul' }
  },
  'F64.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.parse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.parse' }
  },
  'F64.parse_binary': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'F64.pi': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.pow': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.pow' }
  },
  'F64.sin': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.sin' }
  },
  'F64.sqrt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'F64.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.sub' }
  },
  'F64.tan': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.tan' }
  },
  'Function.call': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.comp': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.const': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.curry': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.flip': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Function: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Function.id': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.pipe': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.uncurry': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'IO.end': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  IO: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'IO.inp': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'IO.log': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'JSON.array': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'JSON.bool': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  JSON: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'json',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'JSON.null': {
    type: { ctor: 'Ref', name: 'JSON' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'JSON.number': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'JSON.object': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'JSON.string': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'Lang.Cont': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    }
  },
  'Lang.all': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'Bnd', expr: [Object], body: [Function] }
  },
  'Lang.ann': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.app': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.arr': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.block_comment': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.core': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.enclose': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Lang.is_name': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'c', body: [Function] }
  },
  'Lang.is_space': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'c', body: [Function] }
  },
  'Lang.lam': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.let': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.line_comment': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: {
      ctor: 'Let',
      name: 'not_newline',
      expr: [Object],
      body: [Function]
    }
  },
  'Lang.nam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'allow_empty', body: [Function] }
  },
  'Lang.open': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.par': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.parse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 's',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 's', body: [Function] }
  },
  'Lang.pip': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.pst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.space': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.symbol': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Lang.test': {
    type: { ctor: 'Ref', name: 'String' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.trm': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.typ': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.var': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.whitespace': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'List.all': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.all_true': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'list', body: [Function] }
  },
  'List.any': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.any_true': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'list', body: [Function] }
  },
  'List.append': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.at': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.chunk': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.concat': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.cons': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.drop': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.filter': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.find': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.find_last.aux': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.find_last': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.flatten': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  List: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'List.fold': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.ifind.aux': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.ifind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.imap': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.intercalate': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.is_empty': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.length': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.map': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.nil': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.push': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.reverse.aux': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.reverse': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.show': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.single': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.take': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.to_concat': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.zip_with': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Map: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Map.get': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Map.lookup': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Map.mix': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Map.new': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  query: {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Map.set': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Map.tie': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Maybe.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Maybe.extract': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Maybe: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Maybe.join': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Maybe.map': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Maybe.none': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Maybe.some': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Nat.0': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'Ref', name: 'Nat.zero' }
  },
  'Nat.1': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.10': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.11': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.12': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.13': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.14': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.15': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.16': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.17': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.18': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.19': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.2': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.20': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.21': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.22': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.23': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.24': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.25': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.26': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.27': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.28': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.29': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.3': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.30': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.31': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.32': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.33': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.34': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.35': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.36': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.37': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.38': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.39': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.4': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.40': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.41': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.42': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.43': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.44': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.45': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.46': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.47': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.48': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.49': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.5': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.50': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.51': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.52': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.53': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.54': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.55': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.56': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.57': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.58': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.59': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.6': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.60': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.61': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.62': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.63': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.64': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.7': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.8': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.9': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.apply': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Nat.cmp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Nat.div': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.div_mod.aux': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.div_mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.double': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  Nat: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'nat',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Nat.gte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Nat.gtn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Nat.induction': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'n',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'k', body: [Function] }
  },
  'Nat.is_zero': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.lte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Nat.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Nat.mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.parse_decimal': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Nat.parse_decimal.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Nat.pred': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.show.aux': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.show.digit': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.show': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.show_base': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.solve_for': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'x',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'Nat.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.sub_rem': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.succ': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.sum': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.sum.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.to_base': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'base', body: [Function] }
  },
  'Nat.to_base.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'base', body: [Function] }
  },
  'Nat.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.to_string': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.to_string_base': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'base', body: [Function] }
  },
  'Nat.to_string_decimal': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.zero': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Newtype.elim': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Newtype: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Newtype.val': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'NonEmpty.cons': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'NonEmpty.end': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  NonEmpty: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'NonEmpty.to_list': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Not: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'P',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'P', body: [Function] }
  },
  Or: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  Pair: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Pair.fst': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Pair.new': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Pair.snd': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parsec.Error.Fancy.custom': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.Fancy.fail': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.Fancy': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'E', body: [Function] }
  },
  'Parsec.Error.Item.end_of_input': {
    type: { ctor: 'Ref', name: 'Parsec.Error.Item' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Parsec.Error.Item': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'parser.error.tokens',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Parsec.Error.Item.label': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'xs', body: [Function] }
  },
  'Parsec.Error.Item.show': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'e', body: [Function] }
  },
  'Parsec.Error.Item.tokens': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'xs', body: [Function] }
  },
  'Parsec.Error': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'E', body: [Function] }
  },
  'Parsec.Error.index': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.make_fancy': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.make_trivial': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.merge': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.show': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Reply.eaten_error': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.Reply.eaten_value': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.Reply.empty_error': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.Reply.empty_value': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.Reply': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'S', body: [Function] }
  },
  'Parsec.Reply.to_either': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.State.default': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.State': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'S', body: [Function] }
  },
  'Parsec.State.longest_match': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.State.make': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.any_char': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.ap': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.char': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.choice': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.eof': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.fail': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  Parsec: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'S', body: [Function] }
  },
  'Parsec.get_state': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.label': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.make': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.many': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.many_till': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.map': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.observing': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.optional': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.parse': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.peek': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.plus': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.pure': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.run': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.run_default': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.skip_many': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.take': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.take_while': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.take_while1': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.test1': {
    type: { ctor: 'Ref', name: 'String' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Parsec.then': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.throw': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.token': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.tokens': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.try': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.type': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'S', body: [Function] }
  },
  'Parsec.zero': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parser.Error': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Parser.Error.show': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'e', body: [Function] }
  },
  'Parser.Reply': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Parser.State.default': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'input', body: [Function] }
  },
  'Parser.State': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Parser.any_char': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Parser.ap': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.char': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'c', body: [Function] }
  },
  'Parser.choice': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.eof': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Parser.fail': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Parser: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Parser.label': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.many': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.many_till': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.observing': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.optional': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.parse': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.plus': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.pure': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.run': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.run_default': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.run_either': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.skip_many': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.take': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.take_while': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'f', body: [Function] }
  },
  'Parser.take_while1': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'err', body: [Function] }
  },
  'Parser.then': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.token': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.tokens': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Parser.try': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.type': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Parser.zero': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Research.core_in_core': {
    type: { ctor: 'Ref', name: 'String' },
    term: { ctor: 'Let', name: 'defs', expr: [Object], body: [Function] }
  },
  'Research.Var': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Research.Var.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Research.Ctx': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Research.Ctx.nil': {
    type: { ctor: 'Ref', name: 'Research.Ctx' },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Research.Ctx.ext': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'nam', body: [Function] }
  },
  'Research.Ctx.get': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'chr', body: [Function] }
  },
  'Research.parse_fun.filt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Research.parse_fun.typ0': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Research.parse_fun.typ1': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'nam', body: [Function] }
  },
  'Research.parse_fun.term': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'str',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Research.fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'str',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Research.crazy': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Research.it_works': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Research.equal_mul': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Research.floats': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'Let', name: 'f2', expr: [Object], body: [Function] }
  },
  'Research.get_syntax': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'Let', name: 'pair', expr: [Object], body: [Function] }
  },
  'Research.inference0': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Research.inference1': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'b', body: [Function] }
  },
  'Research.nat_literals': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'a', expr: [Object], body: [Function] }
  },
  'Research.solve': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Research.synthesis0': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Research.synthesis1': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'P',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  Set: {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Set.get': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bits', body: [Function] }
  },
  'Set.new': {
    type: { ctor: 'Ref', name: 'Set' },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Set.set': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bits', body: [Function] }
  },
  Show: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'x',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'Show.msg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'x',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  Sigma: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Sigma.fst': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Sigma.new': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Sigma.snd': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'String.chunk': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'String.concat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'as', body: [Function] }
  },
  'String.cons': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'head', body: [Function] }
  },
  'String.drop': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'String.drop_until': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'cond', body: [Function] }
  },
  'String.drop_while': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'cond', body: [Function] }
  },
  'String.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'String.filter': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'cond', body: [Function] }
  },
  'String.flatten': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'as', body: [Function] }
  },
  String: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'string',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'String.is_empty': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.length': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.nil': {
    type: { ctor: 'Ref', name: 'String' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'String.quote': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.reverse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.reverse.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.single': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'x',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'String.tail': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.take': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'String.take_n.aux': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'String.take_n': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'String.take_while.aux': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'f', body: [Function] }
  },
  'String.take_while': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'f', body: [Function] }
  },
  'String.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.to_list': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.to_set': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.to_stringifier': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Stringifier.concat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  Stringifier: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    }
  },
  'Stringifier.to_string': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  Subset: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Subset.new': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'TaelinArena.Constants.ONE_SEC': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'TaelinArena.Constants.POS_X_KEY': {
    type: { ctor: 'Ref', name: 'Bits' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'TaelinArena.Constants.POS_Y_KEY': {
    type: { ctor: 'Ref', name: 'Bits' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'TaelinArena.Game.ActionId': { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'F64' } },
  'TaelinArena.Game.Buff': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'buff',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Buff.hasted': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Buff.rooted': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Buff.shielded': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Buff.silenced': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Buff.slowed': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Buff.stuned': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Command': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'command',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Command.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  'TaelinArena.Game.Effect.damage': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dmg', body: [Function] }
  },
  'TaelinArena.Game.Effect': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'effect',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Effect.haste': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.heal': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'lif', body: [Function] }
  },
  'TaelinArena.Game.Effect.impulse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'mag', body: [Function] }
  },
  'TaelinArena.Game.Effect.repulse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'mag', body: [Function] }
  },
  'TaelinArena.Game.Effect.root': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.shield': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.silence': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.slow': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.stun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.teleport': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'to_pos', body: [Function] }
  },
  'TaelinArena.Game.Game': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'game',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Game.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'stage', body: [Function] }
  },
  'TaelinArena.Game.Hit': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'hit',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Hit.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'eff', body: [Function] }
  },
  'TaelinArena.Game.Hitbox.cbox': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'rad', body: [Function] }
  },
  'TaelinArena.Game.Hitbox': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'hitbox',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Hitbox.nbox': {
    type: { ctor: 'Ref', name: 'TaelinArena.Game.Hitbox' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'TaelinArena.Game.Hitbox.pbox': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pts', body: [Function] }
  },
  'TaelinArena.Game.Input.cmsg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'txt', body: [Function] }
  },
  'TaelinArena.Game.Input': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'input',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Input.key0': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.key1': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.key2': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.key3': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.key4': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.key5': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.sdir': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dir', body: [Function] }
  },
  'TaelinArena.Game.Light': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'light',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Light.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.ModelId': { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'F64' } },
  'F64.Ordering.EQ': {
    type: { ctor: 'Ref', name: 'F64.Ordering' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'F64.Ordering.GT': {
    type: { ctor: 'Ref', name: 'F64.Ordering' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'F64.Ordering.LT': {
    type: { ctor: 'Ref', name: 'F64.Ordering' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'F64.Ordering': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'F64.ordering',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.PlayerId': { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'F64' } },
  'TaelinArena.Game.SideId': { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'F64' } },
  'TaelinArena.Game.Thing': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'thing',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Thing.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fun', body: [Function] }
  },
  'TaelinArena.Game.TxFunction': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.animate': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.animate_between': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.animate_die': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.animate_with_blink': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.at_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.at_max_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.at_min_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.between_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.blink': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.cast': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.combine_mov_buffs': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'buff', body: [Function] }
  },
  'F64.compare_numbers': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'TaelinArena.Game.create_at': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.dash': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.die': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.end_thing': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.get_position_by_pid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  'TaelinArena.Game.get_stt_value': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.get_stt_value_v3': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.get_thing_act': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_box': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_bst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_buf': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_by_pid.cond': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  'TaelinArena.Game.get_thing_by_pid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  'TaelinArena.Game.get_thing_chi': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_die': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_dir': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_dmg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_hit': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_knk': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_lit': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_mhp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_mid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_mov': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_nam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_pad': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_pid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_pos': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_rst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_sid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_stt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_tik': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_trg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_vel': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_wei': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.handle_shields': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'hit_dmg',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'hit_dmg', body: [Function] }
  },
  'TaelinArena.Game.has_shields': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.illumine': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.init_act': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.is_rooted': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.is_silenced': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.is_stunned': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.is_using_buff': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.is_walking': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'this', body: [Function] }
  },
  'TaelinArena.Game.map_stage': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fn', body: [Function] }
  },
  'TaelinArena.Game.map_stt_key': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.move.fmc': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.reset': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.set_stt_value_v3': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.set_thing_act': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_box': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_bst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_buf': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_chi': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_die': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_dir': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_dmg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_hit': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_knk': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_lit': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_mhp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_mid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_mov': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_nam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_pad': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_pid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_pos': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_rst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_sid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_stt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_tik': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_trg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_vel': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_wei': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.spawn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.speed_multiplier_of': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.targ_dir': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.update_buff': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.update_buff_dur': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.use_shields': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'buff',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'buff', body: [Function] }
  },
  'TaelinArena.Game.with_thing.effect': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  'TaelinArena.Game.with_thing': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  BENFIX_BLOCK_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_021: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_HURT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_CASTING_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_CASTING_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_STEEL_TORNADO_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_STEEL_TORNADO_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_STEEL_TORNADO_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_STEEL_TORNADO_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DEFENSE_MODE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DEFENSE_MODE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DEFENSE_MODE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_HURT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_021: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_022: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_023: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_024: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_WALK_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_WALK_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_WALK_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_WALK_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_HURT_WITHOUT_SABER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_HURT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_WITHOUT_SABER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_WITHOUT_SABER_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_WITHOUT_SABER_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_WITHOUT_SABER_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_WITHOUT_SABER_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_WITHOUT_SABER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_WITHOUT_SABER_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_WITHOUT_SABER_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_HALO_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_PROJECTILE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_021: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_022: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_023: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_024: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_025: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_026: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_027: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_028: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_PILLAR_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_PILLAR_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_PILLAR_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_PILLAR_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_PILLAR_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HURT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_POT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_021: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_022: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_023: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_024: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_025: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_026: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_027: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_028: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_POSED_BACKUP: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  POSTE_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_021: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_022: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_023: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  WALL_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'TaelinArena.Thing.bleskape_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Thing.poste_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Thing.puddledmg_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Thing.puddleheak_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Thing.punchingbag_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Thing.wall_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.collide_with': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'a_pos',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a_pos', body: [Function] }
  },
  'TaelinArena.exec_command': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'cmd', body: [Function] }
  },
  'TaelinArena.exec_turn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'gm', body: [Function] }
  },
  'TaelinArena.fold_with_context': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'TaelinArena.interact_with': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'this',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'this', body: [Function] }
  },
  Text: { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'String' } },
  The: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'The.term': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'U16.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.and': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.div': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  U16: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'u16',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'U16.gte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.gtn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.inc': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.lte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.or': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.parse_hex': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'U16.pow': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.shl': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U16.shr': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U16.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.to_nat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.xor': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.0': {
    type: { ctor: 'Ref', name: 'U32' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'U32.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.and': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.concat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.div': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  U32: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'u32',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'U32.gte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.gtn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.hash2': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.inc': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.lte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.or': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.parse_hex': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'U32.pow': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.shl': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U32.shr': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U32.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.to_nat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.xor': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.0': {
    type: { ctor: 'Ref', name: 'U64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'U64.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.and': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.div': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  U64: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'u64',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'U64.gte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.gtn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.inc': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.lte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.mix.const0': {
    type: { ctor: 'Ref', name: 'U64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'U64.mix.const1': {
    type: { ctor: 'Ref', name: 'U64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'U64.mix': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'h', body: [Function] }
  },
  'U64.mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.or': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.parse_hex': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'U64.pow': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.shl': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U64.shr': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U64.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.to_nat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.xor': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'UFind.new': {
    type: { ctor: 'Ref', name: 'UFind' },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'UFind.equivalent': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'uf', body: [Function] }
  },
  'UFind.find': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'B',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'B', body: [Function] }
  },
  UFind: {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'UFind.new_node': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'uf', body: [Function] }
  },
  'UFind.union': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'uf', body: [Function] }
  },
  UNode: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'unode_value',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'UNode.link': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'parent', body: [Function] }
  },
  'UNode.root': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'rank', body: [Function] }
  },
  Unit: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'unit',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Unit.new': {
    type: { ctor: 'Ref', name: 'Unit' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Unit.show': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'u', body: [Function] }
  },
  'Word.0': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.1': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.add.aux': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.add': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.and': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.and' }
  },
  'Word.cmp.aux': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.cmp': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.concat': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'a_size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'a_size', body: [Function] }
  },
  'Word.div': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.div' }
  },
  'Word.drop': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.eql': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  Word: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'size', body: [Function] }
  },
  'Word.from_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'size', body: [Function] }
  },
  'Word.gte': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.gtn': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.inc': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.lte': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.ltn': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.mod': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.mod' }
  },
  'Word.mul': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.mul' }
  },
  'Word.nil': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Word.or': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.or' }
  },
  'Word.parse_hex': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'size', body: [Function] }
  },
  'Word.pow': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.pow' }
  },
  'Word.pred': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.shift_left': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.shift_left' }
  },
  'Word.shift_right': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.shift_right' }
  },
  'Word.sub': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.sub' }
  },
  'Word.to_bits': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.to_nat': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.to_nat.go': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.xor': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.xor' }
  },
  hello: {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'uname', expr: [Object], body: [Function] }
  }
}
Term 'Exports.TaelinArena.fm' not found.
➜  Moonad git:(183-TaelinArena) fmcjs Exports.TaelinArena   
{
  'Bit.0': {
    type: { ctor: 'Ref', name: 'Bit' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Bit.1': {
    type: { ctor: 'Ref', name: 'Bit' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  Bit: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'bit',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Bits.0': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'bs',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bs', body: [Function] }
  },
  'Bits.1': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'bs',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bs', body: [Function] }
  },
  'Bits.concat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bits.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bs1', body: [Function] }
  },
  Bits: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'bits',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Bits.from_string': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Bits.inc': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bits', body: [Function] }
  },
  'Bits.nil': {
    type: { ctor: 'Ref', name: 'Bits' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Bits.parse_hex': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Bits.parse_hex.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Bits.reverse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'as', body: [Function] }
  },
  'Bits.reverse.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'as', body: [Function] }
  },
  'Bool.and': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.elim': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'b',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'b', body: [Function] }
  },
  'Bool.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.false': {
    type: { ctor: 'Ref', name: 'Bool' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Bool.false_isnt_true': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'P', expr: [Object], body: [Function] }
  },
  Bool: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'bool',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Bool.if': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Bool.not': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.notf': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.or': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.test.different_elem': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'a',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.true': {
    type: { ctor: 'Ref', name: 'Bool' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Bool.true_isnt_false': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Lam', eras: false, name: 'e', body: [Function] }
  },
  Char: { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'U16' } },
  'Char.hex_value': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'chr', body: [Function] }
  },
  'Char.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'b0', body: [Function] }
  },
  'Char.newline': {
    type: { ctor: 'Ref', name: 'Char' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Char.parse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'str',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Char.parse.type': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Char.quote': {
    type: { ctor: 'Ref', name: 'Char' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Char.tab': {
    type: { ctor: 'Ref', name: 'Char' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Cmp.eql': {
    type: { ctor: 'Ref', name: 'Cmp' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  Cmp: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'cmp',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Cmp.gtn': {
    type: { ctor: 'Ref', name: 'Cmp' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Cmp.ltn': {
    type: { ctor: 'Ref', name: 'Cmp' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Comp.app': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'func', body: [Function] }
  },
  'Comp.fal': {
    type: { ctor: 'Ref', name: 'Comp' },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  Comp: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'comp',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Comp.lam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Comp.let': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Comp.stringify': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'comp', body: [Function] }
  },
  'Comp.tru': {
    type: { ctor: 'Ref', name: 'Comp' },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Comp.var': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  Concat: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Concat.push': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Concat.to_list': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Bind': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    }
  },
  'Core.Comp.check': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.Comp.infer': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.Ctx.ext': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Core.Ctx': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Ctx.nil': {
    type: { ctor: 'Ref', name: 'Core.Ctx' },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Core.Def': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Defs': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Defs.get': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Defs.get_term': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Defs.get_type': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Defs.new': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Core.Defs.set': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Core.Defs.term': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Defs.type': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Read.Reply': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Core.Read.all': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.ann': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'expr', body: [Function] }
  },
  'Core.Read.app': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'func', body: [Function] }
  },
  'Core.Read.arr': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bind', body: [Function] }
  },
  'Core.Read.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Read.def': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.defs': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.defs.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Read.done': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Read.fail': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Read.first_of': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Read': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Core.Read.fst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'txts', body: [Function] }
  },
  'Core.Read.is_name': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'chr', body: [Function] }
  },
  'Core.Read.is_name.set': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.is_space': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'chr', body: [Function] }
  },
  'Core.Read.lam': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.let': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.nam': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Lam', eras: false, name: 'code', body: [Function] }
  },
  'Core.Read.next': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Core.Read.one': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'chr0', body: [Function] }
  },
  'Core.Read.opt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Core.Read.par': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.pip': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'func', body: [Function] }
  },
  'Core.Read.seek': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Read.trm.base': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'nil', expr: [Object], body: [Function] }
  },
  'Core.Read.trm': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.trm.post': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'base', body: [Function] }
  },
  'Core.Read.txt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Core.Read.typ': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.var': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.wrd': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.all.Tuple': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Core.all': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'eras', body: [Function] }
  },
  'Core.ann': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'done', body: [Function] }
  },
  'Core.app': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'eras', body: [Function] }
  },
  'Core.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Core.eql.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  Core: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'core',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Core.if_all': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.is_all': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.is_lam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.lam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'eras', body: [Function] }
  },
  'Core.let': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Core.normalize': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.parse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'code', body: [Function] }
  },
  'Core.parse_defs': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'code', body: [Function] }
  },
  'Core.reduce': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.ref': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Core.stringify': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.stringify.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.to_bits.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.to_uid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.typ': {
    type: { ctor: 'Ref', name: 'Core' },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Core.typecheck': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.typecomp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.typeinfer': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.var': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Debug.log': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Either.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Either: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Either.left': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Either.right': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Empty.absurd': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'x',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  Empty: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'empty',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Equal.apply': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Equal.apply_ind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Equal.chain': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Equal: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Equal.mirror': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Equal.rewrite': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Equal.to': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Example.nat': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Example.tco': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'Let', name: 'n10', expr: [Object], body: [Function] }
  },
  'Example.u32_add': {
    type: { ctor: 'Ref', name: 'U32' },
    term: { ctor: 'Let', name: 'num', expr: [Object], body: [Function] }
  },
  'Exports.TaelinArena': {
    type: { ctor: 'Ref', name: 'Exports' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Exports.add': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Exports.example': {
    type: { ctor: 'Ref', name: 'Exports' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  Exports: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Exports.new': {
    type: { ctor: 'Ref', name: 'Exports' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'F64.0': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.1': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.180': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.2': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.256': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.Boundary': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'boundary',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.Boundary.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pts', body: [Function] }
  },
  'F64.Circle': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'circle',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.Circle.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.Line': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'line',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.Line.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.Segment': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'segment',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.Segment.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.circle_boundary_intersects': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'c', body: [Function] }
  },
  'F64.V3.circle_line_intersection': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'c', body: [Function] }
  },
  'F64.V3.circle_to_circle_hit_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.dot': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'v3',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.V3.get_x': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.get_y': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.get_z': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.len': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.look_at': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.map': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fn', body: [Function] }
  },
  'F64.V3.map_x': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fn', body: [Function] }
  },
  'F64.V3.map_y': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fn', body: [Function] }
  },
  'F64.V3.map_z': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fn', body: [Function] }
  },
  'F64.V3.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'F64.V3.norm': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.point_segment_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'p', body: [Function] }
  },
  'F64.V3.point_segment_sqrdist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'p', body: [Function] }
  },
  'F64.V3.polygon_to_segments.cons': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.V3.polygon_to_segments': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.V3.polygon_to_segments.nil': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.V3.polygon_to_segments.transform': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.V3.rot_90': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.rotate': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.scale': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'k', body: [Function] }
  },
  'F64.V3.sqr_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64._1': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.acos': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.acos' }
  },
  'F64.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.add' }
  },
  'F64.asin': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.asin' }
  },
  'F64.atan': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.atan' }
  },
  'F64.cmp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.cos': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.cos' }
  },
  'F64.div': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.div' }
  },
  'F64.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'F64.exp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.exp' }
  },
  'F64.floor': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  F64: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'f64',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.from_bool': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'b', body: [Function] }
  },
  'F64.gte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.gtn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.if': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'F64.is_between': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.log': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.log' }
  },
  'F64.lte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.max': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.max' }
  },
  'F64.min': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.min' }
  },
  'F64.mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.mod' }
  },
  'F64.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.mul' }
  },
  'F64.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.parse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.parse' }
  },
  'F64.parse_binary': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'F64.pi': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.pow': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.pow' }
  },
  'F64.sin': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.sin' }
  },
  'F64.sqrt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'F64.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.sub' }
  },
  'F64.tan': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.tan' }
  },
  'Function.call': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.comp': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.const': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.curry': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.flip': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Function: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Function.id': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.pipe': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.uncurry': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'IO.end': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  IO: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'IO.inp': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'IO.log': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'JSON.array': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'JSON.bool': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  JSON: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'json',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'JSON.null': {
    type: { ctor: 'Ref', name: 'JSON' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'JSON.number': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'JSON.object': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'JSON.string': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'Lang.Cont': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    }
  },
  'Lang.all': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'Bnd', expr: [Object], body: [Function] }
  },
  'Lang.ann': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.app': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.arr': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.block_comment': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.core': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.enclose': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Lang.is_name': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'c', body: [Function] }
  },
  'Lang.is_space': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'c', body: [Function] }
  },
  'Lang.lam': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.let': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.line_comment': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: {
      ctor: 'Let',
      name: 'not_newline',
      expr: [Object],
      body: [Function]
    }
  },
  'Lang.nam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'allow_empty', body: [Function] }
  },
  'Lang.open': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.par': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.parse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 's',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 's', body: [Function] }
  },
  'Lang.pip': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.pst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.space': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.symbol': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Lang.test': {
    type: { ctor: 'Ref', name: 'String' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.trm': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.typ': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.var': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.whitespace': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'List.all': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.all_true': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'list', body: [Function] }
  },
  'List.any': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.any_true': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'list', body: [Function] }
  },
  'List.append': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.at': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.chunk': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.concat': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.cons': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.drop': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.filter': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.find': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.find_last.aux': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.find_last': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.flatten': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  List: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'List.fold': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.ifind.aux': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.ifind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.imap': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.intercalate': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.is_empty': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.length': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.map': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.nil': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.push': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.reverse.aux': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.reverse': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.show': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.single': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.take': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.to_concat': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.zip_with': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Map: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Map.get': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Map.lookup': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Map.mix': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Map.new': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  query: {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Map.set': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Map.tie': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Maybe.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Maybe.extract': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Maybe: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Maybe.join': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Maybe.map': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Maybe.none': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Maybe.some': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Nat.0': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'Ref', name: 'Nat.zero' }
  },
  'Nat.1': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.10': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.11': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.12': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.13': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.14': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.15': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.16': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.17': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.18': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.19': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.2': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.20': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.21': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.22': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.23': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.24': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.25': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.26': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.27': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.28': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.29': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.3': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.30': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.31': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.32': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.33': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.34': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.35': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.36': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.37': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.38': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.39': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.4': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.40': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.41': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.42': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.43': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.44': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.45': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.46': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.47': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.48': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.49': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.5': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.50': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.51': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.52': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.53': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.54': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.55': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.56': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.57': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.58': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.59': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.6': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.60': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.61': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.62': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.63': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.64': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.7': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.8': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.9': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.apply': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Nat.cmp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Nat.div': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.div_mod.aux': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.div_mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.double': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  Nat: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'nat',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Nat.gte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Nat.gtn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Nat.induction': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'n',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'k', body: [Function] }
  },
  'Nat.is_zero': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.lte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Nat.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Nat.mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.parse_decimal': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Nat.parse_decimal.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Nat.pred': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.show.aux': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.show.digit': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.show': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.show_base': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.solve_for': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'x',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'Nat.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.sub_rem': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.succ': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.sum': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.sum.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.to_base': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'base', body: [Function] }
  },
  'Nat.to_base.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'base', body: [Function] }
  },
  'Nat.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.to_string': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.to_string_base': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'base', body: [Function] }
  },
  'Nat.to_string_decimal': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.zero': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Newtype.elim': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Newtype: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Newtype.val': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'NonEmpty.cons': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'NonEmpty.end': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  NonEmpty: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'NonEmpty.to_list': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Not: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'P',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'P', body: [Function] }
  },
  Or: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  Pair: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Pair.fst': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Pair.new': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Pair.snd': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parsec.Error.Fancy.custom': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.Fancy.fail': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.Fancy': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'E', body: [Function] }
  },
  'Parsec.Error.Item.end_of_input': {
    type: { ctor: 'Ref', name: 'Parsec.Error.Item' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Parsec.Error.Item': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'parser.error.tokens',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Parsec.Error.Item.label': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'xs', body: [Function] }
  },
  'Parsec.Error.Item.show': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'e', body: [Function] }
  },
  'Parsec.Error.Item.tokens': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'xs', body: [Function] }
  },
  'Parsec.Error': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'E', body: [Function] }
  },
  'Parsec.Error.index': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.make_fancy': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.make_trivial': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.merge': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.show': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Reply.eaten_error': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.Reply.eaten_value': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.Reply.empty_error': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.Reply.empty_value': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.Reply': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'S', body: [Function] }
  },
  'Parsec.Reply.to_either': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.State.default': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.State': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'S', body: [Function] }
  },
  'Parsec.State.longest_match': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.State.make': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.any_char': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.ap': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.char': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.choice': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.eof': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.fail': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  Parsec: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'S', body: [Function] }
  },
  'Parsec.get_state': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.label': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.make': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.many': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.many_till': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.map': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.observing': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.optional': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.parse': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.peek': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.plus': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.pure': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.run': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.run_default': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.skip_many': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.take': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.take_while': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.take_while1': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.test1': {
    type: { ctor: 'Ref', name: 'String' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Parsec.then': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.throw': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.token': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.tokens': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.try': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.type': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'S', body: [Function] }
  },
  'Parsec.zero': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parser.Error': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Parser.Error.show': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'e', body: [Function] }
  },
  'Parser.Reply': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Parser.State.default': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'input', body: [Function] }
  },
  'Parser.State': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Parser.any_char': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Parser.ap': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.char': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'c', body: [Function] }
  },
  'Parser.choice': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.eof': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Parser.fail': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Parser: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Parser.label': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.many': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.many_till': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.observing': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.optional': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.parse': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.plus': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.pure': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.run': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.run_default': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.run_either': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.skip_many': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.take': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.take_while': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'f', body: [Function] }
  },
  'Parser.take_while1': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'err', body: [Function] }
  },
  'Parser.then': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.token': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.tokens': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Parser.try': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.type': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Parser.zero': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Research.core_in_core': {
    type: { ctor: 'Ref', name: 'String' },
    term: { ctor: 'Let', name: 'defs', expr: [Object], body: [Function] }
  },
  'Research.Var': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Research.Var.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Research.Ctx': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Research.Ctx.nil': {
    type: { ctor: 'Ref', name: 'Research.Ctx' },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Research.Ctx.ext': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'nam', body: [Function] }
  },
  'Research.Ctx.get': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'chr', body: [Function] }
  },
  'Research.parse_fun.filt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Research.parse_fun.typ0': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Research.parse_fun.typ1': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'nam', body: [Function] }
  },
  'Research.parse_fun.term': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'str',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Research.fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'str',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Research.crazy': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Research.it_works': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Research.equal_mul': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Research.floats': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'Let', name: 'f2', expr: [Object], body: [Function] }
  },
  'Research.get_syntax': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'Let', name: 'pair', expr: [Object], body: [Function] }
  },
  'Research.inference0': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Research.inference1': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'b', body: [Function] }
  },
  'Research.nat_literals': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'a', expr: [Object], body: [Function] }
  },
  'Research.solve': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Research.synthesis0': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Research.synthesis1': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'P',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  Set: {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Set.get': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bits', body: [Function] }
  },
  'Set.new': {
    type: { ctor: 'Ref', name: 'Set' },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Set.set': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bits', body: [Function] }
  },
  Show: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'x',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'Show.msg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'x',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  Sigma: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Sigma.fst': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Sigma.new': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Sigma.snd': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'String.chunk': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'String.concat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'as', body: [Function] }
  },
  'String.cons': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'head', body: [Function] }
  },
  'String.drop': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'String.drop_until': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'cond', body: [Function] }
  },
  'String.drop_while': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'cond', body: [Function] }
  },
  'String.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'String.filter': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'cond', body: [Function] }
  },
  'String.flatten': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'as', body: [Function] }
  },
  String: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'string',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'String.is_empty': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.length': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.nil': {
    type: { ctor: 'Ref', name: 'String' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'String.quote': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.reverse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.reverse.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.single': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'x',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'String.tail': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.take': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'String.take_n.aux': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'String.take_n': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'String.take_while.aux': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'f', body: [Function] }
  },
  'String.take_while': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'f', body: [Function] }
  },
  'String.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.to_list': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.to_set': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.to_stringifier': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Stringifier.concat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  Stringifier: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    }
  },
  'Stringifier.to_string': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  Subset: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Subset.new': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'TaelinArena.Constants.ONE_SEC': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'TaelinArena.Constants.POS_X_KEY': {
    type: { ctor: 'Ref', name: 'Bits' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'TaelinArena.Constants.POS_Y_KEY': {
    type: { ctor: 'Ref', name: 'Bits' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'TaelinArena.Game.ActionId': { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'F64' } },
  'TaelinArena.Game.Buff': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'buff',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Buff.hasted': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Buff.rooted': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Buff.shielded': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Buff.silenced': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Buff.slowed': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Buff.stuned': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Command': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'command',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Command.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  'TaelinArena.Game.Effect.damage': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dmg', body: [Function] }
  },
  'TaelinArena.Game.Effect': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'effect',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Effect.haste': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.heal': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'lif', body: [Function] }
  },
  'TaelinArena.Game.Effect.impulse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'mag', body: [Function] }
  },
  'TaelinArena.Game.Effect.repulse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'mag', body: [Function] }
  },
  'TaelinArena.Game.Effect.root': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.shield': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.silence': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.slow': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.stun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.teleport': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'to_pos', body: [Function] }
  },
  'TaelinArena.Game.Game': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'game',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Game.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'stage', body: [Function] }
  },
  'TaelinArena.Game.Hit': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'hit',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Hit.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'eff', body: [Function] }
  },
  'TaelinArena.Game.Hitbox.cbox': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'rad', body: [Function] }
  },
  'TaelinArena.Game.Hitbox': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'hitbox',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Hitbox.nbox': {
    type: { ctor: 'Ref', name: 'TaelinArena.Game.Hitbox' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'TaelinArena.Game.Hitbox.pbox': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pts', body: [Function] }
  },
  'TaelinArena.Game.Input.cmsg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'txt', body: [Function] }
  },
  'TaelinArena.Game.Input': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'input',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Input.key0': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.key1': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.key2': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.key3': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.key4': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.key5': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.sdir': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dir', body: [Function] }
  },
  'TaelinArena.Game.Light': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'light',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Light.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.ModelId': { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'F64' } },
  'F64.Ordering.EQ': {
    type: { ctor: 'Ref', name: 'F64.Ordering' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'F64.Ordering.GT': {
    type: { ctor: 'Ref', name: 'F64.Ordering' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'F64.Ordering.LT': {
    type: { ctor: 'Ref', name: 'F64.Ordering' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'F64.Ordering': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'F64.ordering',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.PlayerId': { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'F64' } },
  'TaelinArena.Game.SideId': { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'F64' } },
  'TaelinArena.Game.Thing': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'thing',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Thing.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fun', body: [Function] }
  },
  'TaelinArena.Game.TxFunction': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.animate': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.animate_between': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.animate_die': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.animate_with_blink': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.at_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.at_max_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.at_min_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.between_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.blink': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.cast': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.combine_mov_buffs': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'buff', body: [Function] }
  },
  'F64.compare_numbers': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'TaelinArena.Game.create_at': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.dash': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.die': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.end_thing': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.get_position_by_pid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  'TaelinArena.Game.get_stt_value': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.get_stt_value_v3': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.get_thing_act': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_box': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_bst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_buf': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_by_pid.cond': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  'TaelinArena.Game.get_thing_by_pid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  'TaelinArena.Game.get_thing_chi': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_die': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_dir': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_dmg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_hit': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_knk': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_lit': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_mhp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_mid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_mov': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_nam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_pad': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_pid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_pos': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_rst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_sid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_stt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_tik': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_trg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_vel': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_wei': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.handle_shields': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'hit_dmg',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'hit_dmg', body: [Function] }
  },
  'TaelinArena.Game.has_shields': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.illumine': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.init_act': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.is_rooted': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.is_silenced': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.is_stunned': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.is_using_buff': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.is_walking': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'this', body: [Function] }
  },
  'TaelinArena.Game.map_stage': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fn', body: [Function] }
  },
  'TaelinArena.Game.map_stt_key': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.move.fmc': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.reset': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.set_stt_value_v3': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.set_thing_act': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_box': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_bst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_buf': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_chi': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_die': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_dir': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_dmg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_hit': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_knk': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_lit': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_mhp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_mid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_mov': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_nam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_pad': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_pid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_pos': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_rst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_sid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_stt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_tik': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_trg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_vel': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_wei': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.spawn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.speed_multiplier_of': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.targ_dir': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.update_buff': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.update_buff_dur': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.use_shields': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'buff',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'buff', body: [Function] }
  },
  'TaelinArena.Game.with_thing.effect': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  'TaelinArena.Game.with_thing': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  BENFIX_BLOCK_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_021: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_HURT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_CASTING_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_CASTING_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_STEEL_TORNADO_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_STEEL_TORNADO_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_STEEL_TORNADO_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_STEEL_TORNADO_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DEFENSE_MODE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DEFENSE_MODE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DEFENSE_MODE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_HURT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_021: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_022: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_023: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_024: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_WALK_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_WALK_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_WALK_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_WALK_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_HURT_WITHOUT_SABER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_HURT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_WITHOUT_SABER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_WITHOUT_SABER_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_WITHOUT_SABER_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_WITHOUT_SABER_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_WITHOUT_SABER_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_WITHOUT_SABER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_WITHOUT_SABER_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_WITHOUT_SABER_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_HALO_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_PROJECTILE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_021: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_022: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_023: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_024: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_025: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_026: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_027: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_028: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_PILLAR_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_PILLAR_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_PILLAR_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_PILLAR_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_PILLAR_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HURT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_POT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_021: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_022: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_023: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_024: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_025: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_026: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_027: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_028: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_POSED_BACKUP: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  POSTE_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_021: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_022: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_023: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  WALL_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'TaelinArena.Thing.bleskape_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Thing.poste_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Thing.puddledmg_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Thing.puddleheak_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Thing.punchingbag_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Thing.wall_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.collide_with': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'a_pos',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a_pos', body: [Function] }
  },
  'TaelinArena.exec_command': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'cmd', body: [Function] }
  },
  'TaelinArena.exec_turn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'gm', body: [Function] }
  },
  'TaelinArena.fold_with_context': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'TaelinArena.interact_with': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'this',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'this', body: [Function] }
  },
  Text: { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'String' } },
  The: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'The.term': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'U16.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.and': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.div': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  U16: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'u16',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'U16.gte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.gtn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.inc': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.lte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.or': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.parse_hex': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'U16.pow': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.shl': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U16.shr': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U16.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.to_nat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.xor': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.0': {
    type: { ctor: 'Ref', name: 'U32' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'U32.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.and': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.concat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.div': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  U32: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'u32',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'U32.gte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.gtn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.hash2': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.inc': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.lte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.or': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.parse_hex': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'U32.pow': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.shl': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U32.shr': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U32.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.to_nat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.xor': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.0': {
    type: { ctor: 'Ref', name: 'U64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'U64.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.and': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.div': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  U64: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'u64',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'U64.gte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.gtn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.inc': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.lte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.mix.const0': {
    type: { ctor: 'Ref', name: 'U64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'U64.mix.const1': {
    type: { ctor: 'Ref', name: 'U64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'U64.mix': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'h', body: [Function] }
  },
  'U64.mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.or': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.parse_hex': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'U64.pow': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.shl': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U64.shr': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U64.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.to_nat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.xor': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'UFind.new': {
    type: { ctor: 'Ref', name: 'UFind' },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'UFind.equivalent': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'uf', body: [Function] }
  },
  'UFind.find': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'B',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'B', body: [Function] }
  },
  UFind: {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'UFind.new_node': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'uf', body: [Function] }
  },
  'UFind.union': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'uf', body: [Function] }
  },
  UNode: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'unode_value',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'UNode.link': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'parent', body: [Function] }
  },
  'UNode.root': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'rank', body: [Function] }
  },
  Unit: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'unit',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Unit.new': {
    type: { ctor: 'Ref', name: 'Unit' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Unit.show': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'u', body: [Function] }
  },
  'Word.0': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.1': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.add.aux': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.add': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.and': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.and' }
  },
  'Word.cmp.aux': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.cmp': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.concat': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'a_size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'a_size', body: [Function] }
  },
  'Word.div': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.div' }
  },
  'Word.drop': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.eql': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  Word: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'size', body: [Function] }
  },
  'Word.from_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'size', body: [Function] }
  },
  'Word.gte': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.gtn': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.inc': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.lte': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.ltn': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.mod': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.mod' }
  },
  'Word.mul': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.mul' }
  },
  'Word.nil': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Word.or': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.or' }
  },
  'Word.parse_hex': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'size', body: [Function] }
  },
  'Word.pow': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.pow' }
  },
  'Word.pred': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.shift_left': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.shift_left' }
  },
  'Word.shift_right': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.shift_right' }
  },
  'Word.sub': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.sub' }
  },
  'Word.to_bits': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.to_nat': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.to_nat.go': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.xor': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.xor' }
  },
  hello: {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'uname', expr: [Object], body: [Function] }
  }
}
^C
➜  Moonad git:(183-TaelinArena) clear

➜  Moonad git:(183-TaelinArena) fmcjs Exports.TaelinArena
{
  'Bit.0': {
    type: { ctor: 'Ref', name: 'Bit' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Bit.1': {
    type: { ctor: 'Ref', name: 'Bit' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  Bit: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'bit',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Bits.0': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'bs',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bs', body: [Function] }
  },
  'Bits.1': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'bs',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bs', body: [Function] }
  },
  'Bits.concat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bits.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bs1', body: [Function] }
  },
  Bits: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'bits',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Bits.from_string': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Bits.inc': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bits', body: [Function] }
  },
  'Bits.nil': {
    type: { ctor: 'Ref', name: 'Bits' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Bits.parse_hex': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Bits.parse_hex.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Bits.reverse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'as', body: [Function] }
  },
  'Bits.reverse.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'as', body: [Function] }
  },
  'Bool.and': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.elim': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'b',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'b', body: [Function] }
  },
  'Bool.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.false': {
    type: { ctor: 'Ref', name: 'Bool' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Bool.false_isnt_true': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'P', expr: [Object], body: [Function] }
  },
  Bool: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'bool',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Bool.if': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Bool.not': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.notf': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.or': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.test.different_elem': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'a',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.true': {
    type: { ctor: 'Ref', name: 'Bool' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Bool.true_isnt_false': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Lam', eras: false, name: 'e', body: [Function] }
  },
  Char: { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'U16' } },
  'Char.hex_value': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'chr', body: [Function] }
  },
  'Char.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'b0', body: [Function] }
  },
  'Char.newline': {
    type: { ctor: 'Ref', name: 'Char' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Char.parse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'str',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Char.parse.type': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Char.quote': {
    type: { ctor: 'Ref', name: 'Char' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Char.tab': {
    type: { ctor: 'Ref', name: 'Char' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Cmp.eql': {
    type: { ctor: 'Ref', name: 'Cmp' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  Cmp: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'cmp',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Cmp.gtn': {
    type: { ctor: 'Ref', name: 'Cmp' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Cmp.ltn': {
    type: { ctor: 'Ref', name: 'Cmp' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Comp.app': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'func', body: [Function] }
  },
  'Comp.fal': {
    type: { ctor: 'Ref', name: 'Comp' },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  Comp: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'comp',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Comp.lam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Comp.let': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Comp.stringify': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'comp', body: [Function] }
  },
  'Comp.tru': {
    type: { ctor: 'Ref', name: 'Comp' },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Comp.var': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  Concat: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Concat.push': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Concat.to_list': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Bind': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    }
  },
  'Core.Comp.check': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.Comp.infer': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.Ctx.ext': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Core.Ctx': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Ctx.nil': {
    type: { ctor: 'Ref', name: 'Core.Ctx' },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Core.Def': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Defs': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Defs.get': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Defs.get_term': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Defs.get_type': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Defs.new': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Core.Defs.set': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Core.Defs.term': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Defs.type': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Read.Reply': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Core.Read.all': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.ann': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'expr', body: [Function] }
  },
  'Core.Read.app': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'func', body: [Function] }
  },
  'Core.Read.arr': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bind', body: [Function] }
  },
  'Core.Read.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Read.def': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.defs': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.defs.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Read.done': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Read.fail': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Read.first_of': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Read': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Core.Read.fst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'txts', body: [Function] }
  },
  'Core.Read.is_name': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'chr', body: [Function] }
  },
  'Core.Read.is_name.set': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.is_space': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'chr', body: [Function] }
  },
  'Core.Read.lam': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.let': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.nam': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Lam', eras: false, name: 'code', body: [Function] }
  },
  'Core.Read.next': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Core.Read.one': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'chr0', body: [Function] }
  },
  'Core.Read.opt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Core.Read.par': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.pip': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'func', body: [Function] }
  },
  'Core.Read.seek': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Read.trm.base': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'nil', expr: [Object], body: [Function] }
  },
  'Core.Read.trm': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.trm.post': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'base', body: [Function] }
  },
  'Core.Read.txt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Core.Read.typ': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.var': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.wrd': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.all.Tuple': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Core.all': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'eras', body: [Function] }
  },
  'Core.ann': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'done', body: [Function] }
  },
  'Core.app': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'eras', body: [Function] }
  },
  'Core.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Core.eql.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  Core: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'core',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Core.if_all': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.is_all': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.is_lam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.lam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'eras', body: [Function] }
  },
  'Core.let': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Core.normalize': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.parse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'code', body: [Function] }
  },
  'Core.parse_defs': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'code', body: [Function] }
  },
  'Core.reduce': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.ref': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Core.stringify': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.stringify.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.to_bits.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.to_uid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.typ': {
    type: { ctor: 'Ref', name: 'Core' },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Core.typecheck': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.typecomp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.typeinfer': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.var': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Debug.log': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Either.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Either: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Either.left': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Either.right': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Empty.absurd': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'x',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  Empty: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'empty',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Equal.apply': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Equal.apply_ind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Equal.chain': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Equal: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Equal.mirror': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Equal.rewrite': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Equal.to': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Example.nat': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Example.tco': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'Let', name: 'n10', expr: [Object], body: [Function] }
  },
  'Example.u32_add': {
    type: { ctor: 'Ref', name: 'U32' },
    term: { ctor: 'Let', name: 'num', expr: [Object], body: [Function] }
  },
  'Exports.TaelinArena': {
    type: { ctor: 'Ref', name: 'Exports' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Exports.add': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Exports.example': {
    type: { ctor: 'Ref', name: 'Exports' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  Exports: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Exports.new': {
    type: { ctor: 'Ref', name: 'Exports' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'F64.0': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.1': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.180': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.2': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.256': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.Boundary': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'boundary',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.Boundary.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pts', body: [Function] }
  },
  'F64.Circle': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'circle',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.Circle.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.Line': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'line',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.Line.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.Segment': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'segment',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.Segment.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.circle_boundary_intersects': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'c', body: [Function] }
  },
  'F64.V3.circle_line_intersection': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'c', body: [Function] }
  },
  'F64.V3.circle_to_circle_hit_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.dot': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'v3',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.V3.get_x': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.get_y': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.get_z': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.len': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.look_at': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.map': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fn', body: [Function] }
  },
  'F64.V3.map_x': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fn', body: [Function] }
  },
  'F64.V3.map_y': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fn', body: [Function] }
  },
  'F64.V3.map_z': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fn', body: [Function] }
  },
  'F64.V3.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'F64.V3.norm': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.point_segment_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'p', body: [Function] }
  },
  'F64.V3.point_segment_sqrdist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'p', body: [Function] }
  },
  'F64.V3.polygon_to_segments.cons': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.V3.polygon_to_segments': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.V3.polygon_to_segments.nil': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.V3.polygon_to_segments.transform': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.V3.rot_90': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.rotate': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.scale': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'k', body: [Function] }
  },
  'F64.V3.sqr_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64._1': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.acos': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.acos' }
  },
  'F64.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.add' }
  },
  'F64.asin': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.asin' }
  },
  'F64.atan': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.atan' }
  },
  'F64.cmp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.cos': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.cos' }
  },
  'F64.div': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.div' }
  },
  'F64.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'F64.exp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.exp' }
  },
  'F64.floor': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  F64: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'f64',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.from_bool': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'b', body: [Function] }
  },
  'F64.gte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.gtn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.if': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'F64.is_between': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.log': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.log' }
  },
  'F64.lte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.max': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.max' }
  },
  'F64.min': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.min' }
  },
  'F64.mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.mod' }
  },
  'F64.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.mul' }
  },
  'F64.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.parse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.parse' }
  },
  'F64.parse_binary': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'F64.pi': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.pow': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.pow' }
  },
  'F64.sin': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.sin' }
  },
  'F64.sqrt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'F64.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.sub' }
  },
  'F64.tan': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.tan' }
  },
  'Function.call': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.comp': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.const': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.curry': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.flip': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Function: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Function.id': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.pipe': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.uncurry': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'IO.end': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  IO: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'IO.inp': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'IO.log': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'JSON.array': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'JSON.bool': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  JSON: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'json',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'JSON.null': {
    type: { ctor: 'Ref', name: 'JSON' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'JSON.number': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'JSON.object': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'JSON.string': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'Lang.Cont': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    }
  },
  'Lang.all': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'Bnd', expr: [Object], body: [Function] }
  },
  'Lang.ann': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.app': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.arr': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.block_comment': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.core': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.enclose': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Lang.is_name': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'c', body: [Function] }
  },
  'Lang.is_space': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'c', body: [Function] }
  },
  'Lang.lam': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.let': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.line_comment': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: {
      ctor: 'Let',
      name: 'not_newline',
      expr: [Object],
      body: [Function]
    }
  },
  'Lang.nam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'allow_empty', body: [Function] }
  },
  'Lang.open': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.par': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.parse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 's',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 's', body: [Function] }
  },
  'Lang.pip': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.pst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.space': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.symbol': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Lang.test': {
    type: { ctor: 'Ref', name: 'String' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.trm': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.typ': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.var': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.whitespace': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'List.all': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.all_true': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'list', body: [Function] }
  },
  'List.any': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.any_true': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'list', body: [Function] }
  },
  'List.append': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.at': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.chunk': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.concat': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.cons': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.drop': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.filter': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.find': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.find_last.aux': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.find_last': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.flatten': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  List: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'List.fold': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.ifind.aux': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.ifind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.imap': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.intercalate': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.is_empty': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.length': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.map': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.nil': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.push': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.reverse.aux': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.reverse': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.show': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.single': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.take': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.to_concat': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.zip_with': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Map: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Map.get': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Map.lookup': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Map.mix': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Map.new': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  query: {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Map.set': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Map.tie': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Maybe.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Maybe.extract': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Maybe: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Maybe.join': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Maybe.map': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Maybe.none': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Maybe.some': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Nat.0': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'Ref', name: 'Nat.zero' }
  },
  'Nat.1': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.10': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.11': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.12': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.13': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.14': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.15': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.16': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.17': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.18': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.19': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.2': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.20': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.21': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.22': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.23': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.24': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.25': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.26': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.27': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.28': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.29': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.3': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.30': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.31': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.32': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.33': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.34': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.35': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.36': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.37': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.38': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.39': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.4': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.40': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.41': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.42': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.43': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.44': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.45': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.46': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.47': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.48': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.49': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.5': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.50': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.51': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.52': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.53': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.54': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.55': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.56': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.57': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.58': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.59': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.6': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.60': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.61': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.62': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.63': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.64': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.7': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.8': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.9': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.apply': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Nat.cmp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Nat.div': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.div_mod.aux': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.div_mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.double': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  Nat: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'nat',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Nat.gte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Nat.gtn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Nat.induction': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'n',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'k', body: [Function] }
  },
  'Nat.is_zero': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.lte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Nat.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Nat.mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.parse_decimal': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Nat.parse_decimal.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Nat.pred': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.show.aux': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.show.digit': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.show': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.show_base': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.solve_for': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'x',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'Nat.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.sub_rem': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.succ': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.sum': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.sum.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.to_base': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'base', body: [Function] }
  },
  'Nat.to_base.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'base', body: [Function] }
  },
  'Nat.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.to_string': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.to_string_base': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'base', body: [Function] }
  },
  'Nat.to_string_decimal': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.zero': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Newtype.elim': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Newtype: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Newtype.val': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'NonEmpty.cons': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'NonEmpty.end': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  NonEmpty: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'NonEmpty.to_list': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Not: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'P',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'P', body: [Function] }
  },
  Or: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  Pair: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Pair.fst': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Pair.new': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Pair.snd': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parsec.Error.Fancy.custom': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.Fancy.fail': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.Fancy': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'E', body: [Function] }
  },
  'Parsec.Error.Item.end_of_input': {
    type: { ctor: 'Ref', name: 'Parsec.Error.Item' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Parsec.Error.Item': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'parser.error.tokens',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Parsec.Error.Item.label': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'xs', body: [Function] }
  },
  'Parsec.Error.Item.show': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'e', body: [Function] }
  },
  'Parsec.Error.Item.tokens': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'xs', body: [Function] }
  },
  'Parsec.Error': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'E', body: [Function] }
  },
  'Parsec.Error.index': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.make_fancy': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.make_trivial': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.merge': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.show': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Reply.eaten_error': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.Reply.eaten_value': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.Reply.empty_error': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.Reply.empty_value': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.Reply': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'S', body: [Function] }
  },
  'Parsec.Reply.to_either': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.State.default': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.State': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'S', body: [Function] }
  },
  'Parsec.State.longest_match': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.State.make': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.any_char': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.ap': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.char': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.choice': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.eof': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.fail': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  Parsec: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'S', body: [Function] }
  },
  'Parsec.get_state': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.label': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.make': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.many': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.many_till': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.map': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.observing': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.optional': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.parse': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.peek': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.plus': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.pure': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.run': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.run_default': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.skip_many': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.take': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.take_while': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.take_while1': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.test1': {
    type: { ctor: 'Ref', name: 'String' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Parsec.then': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.throw': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.token': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.tokens': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.try': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.type': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'S', body: [Function] }
  },
  'Parsec.zero': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parser.Error': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Parser.Error.show': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'e', body: [Function] }
  },
  'Parser.Reply': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Parser.State.default': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'input', body: [Function] }
  },
  'Parser.State': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Parser.any_char': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Parser.ap': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.char': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'c', body: [Function] }
  },
  'Parser.choice': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.eof': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Parser.fail': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Parser: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Parser.label': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.many': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.many_till': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.observing': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.optional': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.parse': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.plus': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.pure': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.run': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.run_default': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.run_either': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.skip_many': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.take': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.take_while': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'f', body: [Function] }
  },
  'Parser.take_while1': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'err', body: [Function] }
  },
  'Parser.then': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.token': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.tokens': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Parser.try': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.type': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Parser.zero': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Research.core_in_core': {
    type: { ctor: 'Ref', name: 'String' },
    term: { ctor: 'Let', name: 'defs', expr: [Object], body: [Function] }
  },
  'Research.Var': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Research.Var.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Research.Ctx': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Research.Ctx.nil': {
    type: { ctor: 'Ref', name: 'Research.Ctx' },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Research.Ctx.ext': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'nam', body: [Function] }
  },
  'Research.Ctx.get': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'chr', body: [Function] }
  },
  'Research.parse_fun.filt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Research.parse_fun.typ0': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Research.parse_fun.typ1': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'nam', body: [Function] }
  },
  'Research.parse_fun.term': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'str',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Research.fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'str',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Research.crazy': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Research.it_works': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Research.equal_mul': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Research.floats': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'Let', name: 'f2', expr: [Object], body: [Function] }
  },
  'Research.get_syntax': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'Let', name: 'pair', expr: [Object], body: [Function] }
  },
  'Research.inference0': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Research.inference1': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'b', body: [Function] }
  },
  'Research.nat_literals': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'a', expr: [Object], body: [Function] }
  },
  'Research.solve': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Research.synthesis0': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Research.synthesis1': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'P',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  Set: {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Set.get': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bits', body: [Function] }
  },
  'Set.new': {
    type: { ctor: 'Ref', name: 'Set' },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Set.set': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bits', body: [Function] }
  },
  Show: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'x',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'Show.msg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'x',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  Sigma: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Sigma.fst': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Sigma.new': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Sigma.snd': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'String.chunk': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'String.concat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'as', body: [Function] }
  },
  'String.cons': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'head', body: [Function] }
  },
  'String.drop': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'String.drop_until': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'cond', body: [Function] }
  },
  'String.drop_while': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'cond', body: [Function] }
  },
  'String.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'String.filter': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'cond', body: [Function] }
  },
  'String.flatten': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'as', body: [Function] }
  },
  String: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'string',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'String.is_empty': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.length': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.nil': {
    type: { ctor: 'Ref', name: 'String' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'String.quote': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.reverse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.reverse.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.single': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'x',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'String.tail': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.take': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'String.take_n.aux': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'String.take_n': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'String.take_while.aux': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'f', body: [Function] }
  },
  'String.take_while': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'f', body: [Function] }
  },
  'String.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.to_list': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.to_set': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.to_stringifier': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Stringifier.concat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  Stringifier: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    }
  },
  'Stringifier.to_string': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  Subset: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Subset.new': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'TaelinArena.Constants.ONE_SEC': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'TaelinArena.Constants.POS_X_KEY': {
    type: { ctor: 'Ref', name: 'Bits' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'TaelinArena.Constants.POS_Y_KEY': {
    type: { ctor: 'Ref', name: 'Bits' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'TaelinArena.Game.ActionId': { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'F64' } },
  'TaelinArena.Game.Buff': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'buff',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Buff.hasted': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Buff.rooted': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Buff.shielded': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Buff.silenced': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Buff.slowed': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Buff.stuned': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Command': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'command',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Command.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  'TaelinArena.Game.Effect.damage': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dmg', body: [Function] }
  },
  'TaelinArena.Game.Effect': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'effect',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Effect.haste': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.heal': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'lif', body: [Function] }
  },
  'TaelinArena.Game.Effect.impulse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'mag', body: [Function] }
  },
  'TaelinArena.Game.Effect.repulse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'mag', body: [Function] }
  },
  'TaelinArena.Game.Effect.root': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.shield': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.silence': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.slow': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.stun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.teleport': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'to_pos', body: [Function] }
  },
  'TaelinArena.Game.Game': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'game',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Game.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'stage', body: [Function] }
  },
  'TaelinArena.Game.Hit': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'hit',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Hit.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'eff', body: [Function] }
  },
  'TaelinArena.Game.Hitbox.cbox': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'rad', body: [Function] }
  },
  'TaelinArena.Game.Hitbox': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'hitbox',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Hitbox.nbox': {
    type: { ctor: 'Ref', name: 'TaelinArena.Game.Hitbox' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'TaelinArena.Game.Hitbox.pbox': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pts', body: [Function] }
  },
  'TaelinArena.Game.Input.cmsg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'txt', body: [Function] }
  },
  'TaelinArena.Game.Input': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'input',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Input.key0': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.key1': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.key2': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.key3': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.key4': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.key5': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.sdir': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dir', body: [Function] }
  },
  'TaelinArena.Game.Light': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'light',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Light.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.ModelId': { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'F64' } },
  'F64.Ordering.EQ': {
    type: { ctor: 'Ref', name: 'F64.Ordering' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'F64.Ordering.GT': {
    type: { ctor: 'Ref', name: 'F64.Ordering' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'F64.Ordering.LT': {
    type: { ctor: 'Ref', name: 'F64.Ordering' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'F64.Ordering': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'F64.ordering',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.PlayerId': { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'F64' } },
  'TaelinArena.Game.SideId': { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'F64' } },
  'TaelinArena.Game.Thing': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'thing',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Thing.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fun', body: [Function] }
  },
  'TaelinArena.Game.TxFunction': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.animate': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.animate_between': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.animate_die': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.animate_with_blink': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.at_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.at_max_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.at_min_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.between_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.blink': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.cast': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.combine_mov_buffs': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'buff', body: [Function] }
  },
  'F64.compare_numbers': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'TaelinArena.Game.create_at': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.dash': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.die': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.end_thing': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.get_position_by_pid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  'TaelinArena.Game.get_stt_value': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.get_stt_value_v3': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.get_thing_act': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_box': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_bst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_buf': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_by_pid.cond': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  'TaelinArena.Game.get_thing_by_pid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  'TaelinArena.Game.get_thing_chi': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_die': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_dir': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_dmg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_hit': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_knk': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_lit': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_mhp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_mid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_mov': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_nam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_pad': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_pid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_pos': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_rst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_sid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_stt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_tik': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_trg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_vel': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_wei': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.handle_shields': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'hit_dmg',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'hit_dmg', body: [Function] }
  },
  'TaelinArena.Game.has_shields': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.illumine': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.init_act': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.is_rooted': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.is_silenced': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.is_stunned': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.is_using_buff': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.is_walking': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'this', body: [Function] }
  },
  'TaelinArena.Game.map_stage': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fn', body: [Function] }
  },
  'TaelinArena.Game.map_stt_key': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.move.fmc': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.reset': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.set_stt_value_v3': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.set_thing_act': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_box': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_bst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_buf': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_chi': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_die': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_dir': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_dmg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_hit': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_knk': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_lit': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_mhp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_mid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_mov': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_nam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_pad': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_pid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_pos': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_rst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_sid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_stt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_tik': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_trg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_vel': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_wei': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.spawn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.speed_multiplier_of': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.targ_dir': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.update_buff': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.update_buff_dur': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.use_shields': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'buff',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'buff', body: [Function] }
  },
  'TaelinArena.Game.with_thing.effect': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  'TaelinArena.Game.with_thing': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  BENFIX_BLOCK_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_021: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_HURT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_CASTING_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_CASTING_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_STEEL_TORNADO_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_STEEL_TORNADO_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_STEEL_TORNADO_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_STEEL_TORNADO_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DEFENSE_MODE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DEFENSE_MODE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DEFENSE_MODE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_HURT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_021: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_022: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_023: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_024: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_WALK_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_WALK_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_WALK_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_WALK_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_HURT_WITHOUT_SABER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_HURT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_WITHOUT_SABER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_WITHOUT_SABER_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_WITHOUT_SABER_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_WITHOUT_SABER_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_WITHOUT_SABER_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_WITHOUT_SABER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_WITHOUT_SABER_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_WITHOUT_SABER_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_HALO_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_PROJECTILE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_021: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_022: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_023: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_024: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_025: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_026: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_027: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_028: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_PILLAR_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_PILLAR_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_PILLAR_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_PILLAR_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_PILLAR_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HURT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_POT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_021: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_022: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_023: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_024: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_025: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_026: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_027: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_028: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_POSED_BACKUP: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  POSTE_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_021: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_022: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_023: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  WALL_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'TaelinArena.Thing.bleskape_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Thing.poste_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Thing.puddledmg_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Thing.puddleheak_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Thing.punchingbag_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Thing.wall_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.collide_with': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'a_pos',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a_pos', body: [Function] }
  },
  'TaelinArena.exec_command': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'cmd', body: [Function] }
  },
  'TaelinArena.exec_turn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'gm', body: [Function] }
  },
  'TaelinArena.fold_with_context': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'TaelinArena.interact_with': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'this',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'this', body: [Function] }
  },
  Text: { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'String' } },
  The: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'The.term': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'U16.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.and': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.div': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  U16: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'u16',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'U16.gte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.gtn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.inc': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.lte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.or': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.parse_hex': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'U16.pow': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.shl': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U16.shr': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U16.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.to_nat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.xor': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.0': {
    type: { ctor: 'Ref', name: 'U32' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'U32.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.and': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.concat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.div': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  U32: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'u32',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'U32.gte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.gtn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.hash2': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.inc': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.lte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.or': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.parse_hex': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'U32.pow': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.shl': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U32.shr': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U32.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.to_nat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.xor': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.0': {
    type: { ctor: 'Ref', name: 'U64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'U64.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.and': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.div': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  U64: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'u64',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'U64.gte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.gtn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.inc': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.lte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.mix.const0': {
    type: { ctor: 'Ref', name: 'U64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'U64.mix.const1': {
    type: { ctor: 'Ref', name: 'U64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'U64.mix': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'h', body: [Function] }
  },
  'U64.mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.or': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.parse_hex': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'U64.pow': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.shl': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U64.shr': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U64.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.to_nat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.xor': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'UFind.new': {
    type: { ctor: 'Ref', name: 'UFind' },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'UFind.equivalent': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'uf', body: [Function] }
  },
  'UFind.find': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'B',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'B', body: [Function] }
  },
  UFind: {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'UFind.new_node': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'uf', body: [Function] }
  },
  'UFind.union': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'uf', body: [Function] }
  },
  UNode: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'unode_value',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'UNode.link': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'parent', body: [Function] }
  },
  'UNode.root': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'rank', body: [Function] }
  },
  Unit: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'unit',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Unit.new': {
    type: { ctor: 'Ref', name: 'Unit' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Unit.show': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'u', body: [Function] }
  },
  'Word.0': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.1': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.add.aux': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.add': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.and': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.and' }
  },
  'Word.cmp.aux': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.cmp': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.concat': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'a_size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'a_size', body: [Function] }
  },
  'Word.div': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.div' }
  },
  'Word.drop': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.eql': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  Word: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'size', body: [Function] }
  },
  'Word.from_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'size', body: [Function] }
  },
  'Word.gte': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.gtn': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.inc': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.lte': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.ltn': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.mod': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.mod' }
  },
  'Word.mul': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.mul' }
  },
  'Word.nil': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Word.or': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.or' }
  },
  'Word.parse_hex': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'size', body: [Function] }
  },
  'Word.pow': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.pow' }
  },
  'Word.pred': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.shift_left': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.shift_left' }
  },
  'Word.shift_right': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.shift_right' }
  },
  'Word.sub': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.sub' }
  },
  'Word.to_bits': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.to_nat': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.to_nat.go': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.xor': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.xor' }
  },
  hello: {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'uname', expr: [Object], body: [Function] }
  }
}
module.exports = (function (){
  var F64 = new Float64Array(1);
  var U32 = new Uint32Array(F64.buffer);
  var F64_get = (x,i)=>((F64[0]=x),(i<32?(U32[0]>>>i)&1:(U32[1]>>>(i-32)&1)));
  var F64_set = (x,i)=>((F64[0]=x),(i<32?(U32[0]=U32[0]|(1<<i)):(U32[1]=U32[1]|(1<<(i-32)))),F64[0]);
  var inst_unit = x=>x(1);
  var elim_unit = x=>v=>v;
  var inst_bool = x=>x(true)(false);
  var elim_bool = x=>t=>f=>x?t:f;
  var inst_nat = x=>x(0n)(p=>1n+p);
  var elim_nat = x=>z=>s=>x===0n?z:s(x-1n);
  var inst_bits = x=>x('')(p=>p+'0')(p=>p+'1');
  var elim_bits = x=>be=>b0=>b1=>(x.length?(x[x.length-1]==='0'?b0(x.slice(0,-1)):b1(x.slice(0,-1))):be);
  var inst_u16 = x=>x(w=>(function R(x,k){return x(0)(p=>R(p,k*2))(p=>k+R(p,k*2))})(w,1));
  var elim_u16 = x=>u=>u((function R(i){return we=>w0=>w1=>i===16?we:((x>>>i)&1?w1:w0)(R(i+1))})(0));
  var inst_u32 = x=>x(w=>(function R(x,k){return x(0)(p=>R(p,k*2))(p=>k+R(p,k*2))})(w,1));
  var elim_u32 = x=>u=>u((function R(i){return we=>w0=>w1=>i===32?we:((x>>>i)&1?w1:w0)(R(i+1))})(0));
  var inst_u64 = x=>x(w=>(function R(x,k){return x(0n)(p=>R(p,k*2n))(p=>k+R(p,k*2n))})(w,1n));
  var elim_u64 = x=>u=>u((function R(i){return we=>w0=>w1=>i===64n?we:((x>>i)&1n?w1:w0)(R(i+1n))})(0n));
  var inst_f64 = x=>x(w=>(function R(x,i){return x(0)(p=>R(p,i+1))(p=>F64_set(R(p,i+1),i))})(w,0));
  var elim_f64 = x=>u=>u((function R(i){return we=>w0=>w1=>i===64?we:(F64_get(x,i)?w1:w0)(R(i+1))})(0));
  var inst_string = x=>x('')(h=>t=>String.fromCharCode(h)+t);
  var elim_string = x=>n=>c=>x===''?n:c(x.charCodeAt(0))(x.slice(1));
  var $Exports$add = ($x=>($xs=>($new=>($add=>$add($x)($xs($new)($add))))));
  var $List$nil = ($nil=>($cons=>$nil));
  var $List$cons = ($head=>($tail=>($nil=>($cons=>$cons($head)($tail)))));
  var $List$fold = ($nil=>($cons=>($list=>$list($nil)(($x=>($xs=>$cons($x)($List$fold($nil)($cons)($xs))))))));
  var $List = ($A=>(void 0));
  var $F64$atan = a=>Math.atan(a);
  var $F64$mul = a=>b=>a*b;
  var $F64$cos = a=>Math.cos(a);
  var $F64$sin = a=>Math.sin(a);
  var $F64$sub = a=>b=>a-b;
  var $F64$add = a=>b=>a+b;
  var $F64$V3$new = ($x=>($y=>($z=>($new=>$new($x)($y)($z)))));
  var $F64$V3$add = ($a=>($b=>$a(($a$x=>($a$y=>($a$z=>$b(($b$x=>($b$y=>($b$z=>($c$x=>($c$y=>($c$z=>$F64$V3$new($c$x)($c$y)($c$z))($F64$add($a$z)($b$z)))($F64$add($a$y)($b$y)))($F64$add($a$x)($a$x))))))))))));
  var $F64$V3$polygon_to_segments$transform = ($pos=>($dir=>($pnt=>$pnt(($pnt$x=>($pnt$y=>($pnt$z=>$dir(($dir$x=>($dir$y=>($dir$z=>($a=>($pnt_x_times_cos_a=>($pnt_y_times_sin_a=>($pnt_x_times_sin_a=>($pnt_y_times_cos_a=>($x=>($y=>$F64$V3$add($pos)($F64$V3$new($x)($y)($pnt$z)))($F64$add($pnt_x_times_sin_a)($pnt_y_times_cos_a)))($F64$sub($pnt_x_times_cos_a)($pnt_y_times_sin_a)))($F64$mul($pnt$y)($F64$cos($a))))($F64$mul($pnt$x)($F64$sin($a))))($F64$mul($pnt$y)($F64$sin($a))))($F64$mul($pnt$x)($F64$cos($a))))($F64$atan($dir$y)($dir$x)))))))))))));
  var $F64$Segment$new = ($a=>($b=>($new=>$new($a)($b))));
  var $F64$V3$polygon_to_segments$nil = ($pos=>($dir=>($pt_a=>($pt_0=>$pt_0($List$nil)(($pt_0$value=>$pt_a($List$nil)(($pt_a$value=>($p0=>($p1=>($sg=>$List$cons($sg)($List$nil))($F64$Segment$new($p0)($p1)))($F64$V3$polygon_to_segments$transform($pos)($dir)($pt_0$value)))($F64$V3$polygon_to_segments$transform($pos)($dir)($pt_a$value))))))))));
  var $Maybe$some = ($value=>($=>($some=>$some($value))));
  var $Maybe = ($A=>(void 0));
  var $F64$V3$polygon_to_segments$cons = ($pos=>($dir=>($pt_b=>($segs=>($pt_a=>($pt_0=>$pt_a($segs($Maybe$some($pt_b))($Maybe$some($pt_b)))(($pt_a$value=>($pt_0=>($p0=>($p1=>($sg=>$List$cons($sg)($segs($Maybe$some($pt_b))($pt_0)))($F64$Segment$new($p0)($p1)))($F64$V3$polygon_to_segments$transform($pos)($dir)($pt_b)))($F64$V3$polygon_to_segments$transform($pos)($dir)($pt_a$value)))($pt_0($Maybe$some($pt_b))(($pt_0$value=>$pt_0)))))))))));
  var $Maybe$none = ($none=>($=>$none));
  var $F64$V3$polygon_to_segments = ($pos=>($dir=>($pts=>$List$fold($F64$V3$polygon_to_segments$nil($pos)($dir))($F64$V3$polygon_to_segments$cons($pos)($dir))($pts)($Maybe$none)($Maybe$none))));
  var $Cmp$ltn = ($ltn=>($eql=>($gtn=>$ltn)));
  var $Cmp$gtn = ($ltn=>($eql=>($gtn=>$gtn)));
  var $Word$cmp$aux = ($a=>($b=>($c=>$a(($b=>$c))(($a$pred=>($b=>$b(($a$pred=>$c))(($b$pred=>($a$pred=>$Word$cmp$aux($a$pred)($b$pred)($c))))(($b$pred=>($a$pred=>$Word$cmp$aux($a$pred)($b$pred)($Cmp$ltn))))($a$pred))))(($a$pred=>($b=>$b(($a$pred=>$c))(($b$pred=>($a$pred=>$Word$cmp$aux($a$pred)($b$pred)($Cmp$gtn))))(($b$pred=>($a$pred=>$Word$cmp$aux($a$pred)($b$pred)($c))))($a$pred))))($b))));
  var $Cmp$eql = ($ltn=>($eql=>($gtn=>$eql)));
  var $Word$cmp = ($a=>($b=>$Word$cmp$aux($a)($b)($Cmp$eql)));
  var $Bool$false = inst_bool(($t=>($f=>$f)));
  var $Bool$true = inst_bool(($t=>($f=>$t)));
  var $Word$eql = ($a=>($b=>$Word$cmp($a)($b)($Bool$false)($Bool$true)($Bool$false)));
  var $Nat$succ = ($n=>inst_nat(($z=>($s=>$s($n)))));
  var $Nat$zero = inst_nat(($z=>($s=>$z)));
  var $Nat$0 = $Nat$zero;
  var $Nat$1 = $Nat$succ($Nat$0);
  var $Nat$2 = $Nat$succ($Nat$1);
  var $Nat$3 = $Nat$succ($Nat$2);
  var $Nat$4 = $Nat$succ($Nat$3);
  var $Nat$5 = $Nat$succ($Nat$4);
  var $Nat$6 = $Nat$succ($Nat$5);
  var $Nat$7 = $Nat$succ($Nat$6);
  var $Nat$8 = $Nat$succ($Nat$7);
  var $Nat$9 = $Nat$succ($Nat$8);
  var $Nat$10 = $Nat$succ($Nat$9);
  var $Nat$11 = $Nat$succ($Nat$10);
  var $Nat$12 = $Nat$succ($Nat$11);
  var $Nat$13 = $Nat$succ($Nat$12);
  var $Nat$14 = $Nat$succ($Nat$13);
  var $Nat$15 = $Nat$succ($Nat$14);
  var $Nat$16 = $Nat$succ($Nat$15);
  var $Nat$17 = $Nat$succ($Nat$16);
  var $Nat$18 = $Nat$succ($Nat$17);
  var $Nat$19 = $Nat$succ($Nat$18);
  var $Nat$20 = $Nat$succ($Nat$19);
  var $Nat$21 = $Nat$succ($Nat$20);
  var $Nat$22 = $Nat$succ($Nat$21);
  var $Nat$23 = $Nat$succ($Nat$22);
  var $Nat$24 = $Nat$succ($Nat$23);
  var $Nat$25 = $Nat$succ($Nat$24);
  var $Nat$26 = $Nat$succ($Nat$25);
  var $Nat$27 = $Nat$succ($Nat$26);
  var $Nat$28 = $Nat$succ($Nat$27);
  var $Nat$29 = $Nat$succ($Nat$28);
  var $Nat$30 = $Nat$succ($Nat$29);
  var $Nat$31 = $Nat$succ($Nat$30);
  var $Nat$32 = $Nat$succ($Nat$31);
  var $Nat$33 = $Nat$succ($Nat$32);
  var $Nat$34 = $Nat$succ($Nat$33);
  var $Nat$35 = $Nat$succ($Nat$34);
  var $Nat$36 = $Nat$succ($Nat$35);
  var $Nat$37 = $Nat$succ($Nat$36);
  var $Nat$38 = $Nat$succ($Nat$37);
  var $Nat$39 = $Nat$succ($Nat$38);
  var $Nat$40 = $Nat$succ($Nat$39);
  var $Nat$41 = $Nat$succ($Nat$40);
  var $Nat$42 = $Nat$succ($Nat$41);
  var $Nat$43 = $Nat$succ($Nat$42);
  var $Nat$44 = $Nat$succ($Nat$43);
  var $Nat$45 = $Nat$succ($Nat$44);
  var $Nat$46 = $Nat$succ($Nat$45);
  var $Nat$47 = $Nat$succ($Nat$46);
  var $Nat$48 = $Nat$succ($Nat$47);
  var $Nat$49 = $Nat$succ($Nat$48);
  var $Nat$50 = $Nat$succ($Nat$49);
  var $Nat$51 = $Nat$succ($Nat$50);
  var $Nat$52 = $Nat$succ($Nat$51);
  var $Nat$53 = $Nat$succ($Nat$52);
  var $Nat$54 = $Nat$succ($Nat$53);
  var $Nat$55 = $Nat$succ($Nat$54);
  var $Nat$56 = $Nat$succ($Nat$55);
  var $Nat$57 = $Nat$succ($Nat$56);
  var $Nat$58 = $Nat$succ($Nat$57);
  var $Nat$59 = $Nat$succ($Nat$58);
  var $Nat$60 = $Nat$succ($Nat$59);
  var $Nat$61 = $Nat$succ($Nat$60);
  var $Nat$62 = $Nat$succ($Nat$61);
  var $Nat$63 = $Nat$succ($Nat$62);
  var $Nat$64 = $Nat$succ($Nat$63);
  var $F64$eql = ($x=>($y=>elim_f64($x)(($x$word=>elim_f64($y)(($y$word=>$Word$eql($x$word)($y$word)))))));
  var $Bool$and = a=>b=>a&&b;
  var $F64$V3$eql = ($a=>($b=>$a(($a$x=>($a$y=>($a$z=>$b(($b$x=>($b$y=>($b$z=>($same_x=>($same_y=>($same_z=>$Bool$and($same_x)($Bool$and($same_y)($same_z)))($F64$eql($a$z)($b$z)))($F64$eql($a$y)($b$y)))($F64$eql($a$x)($b$x))))))))))));
  var $F64$V3$sub = ($a=>($b=>$a(($a$x=>($a$y=>($a$z=>$b(($b$x=>($b$y=>($b$z=>($c$x=>($c$y=>($c$z=>$F64$V3$new($c$x)($c$y)($c$z))($F64$sub($a$z)($b$z)))($F64$sub($a$y)($b$y)))($F64$sub($a$x)($a$x))))))))))));
  var $F64$new = ($a=>inst_f64(($f64=>$f64($a))));
  var $Word = ($size=>(void 0));
  var $Word$nil = ($we=>($w0=>($w1=>$we)));
  var $Word$0 = ($wo=>($we=>($w0=>($w1=>$w0($wo)))));
  var $Bits$nil = inst_bits(($be=>($b0=>($b1=>$be))));
  var $Word$1 = ($wo=>($we=>($w0=>($w1=>$w1($wo)))));
  var $Word$from_bits = ($size=>($bits=>elim_nat($size)($Word$nil)(($size$pred=>elim_bits($bits)($Word$0($Word$from_bits($size$pred)($Bits$nil)))(($bits$pred=>$Word$0($Word$from_bits($size$pred)($bits$pred))))(($bits$pred=>$Word$1($Word$from_bits($size$pred)($bits$pred))))))));
  var $U16$eql = a=>b=>a===b;
  var $Char$parse$type = ($str=>(void 0));
  var $Unit$new = inst_unit(($unit=>$unit));
  var $Char$parse = ($str=>elim_string($str)($Unit$new)(($str$head=>($str$tail=>$str$head))));
  var $String$cons = ($head=>($tail=>inst_string(($strnil=>($strcons=>$strcons($head)($tail))))));
  var $U16$new = ($a=>inst_u16(($u16=>$u16($a))));
  var $Char$new = ($b0=>($b1=>($b2=>($b3=>($b4=>($b5=>($b6=>($b7=>($b8=>($b9=>($bA=>($bB=>($bC=>($bD=>($bE=>($bF=>($kF=>($kE=>($kD=>($kC=>($kB=>($kA=>($k9=>($k8=>($k7=>($k6=>($k5=>($k4=>($k3=>($k2=>($k1=>($k0=>($k_=>$U16$new($k0($k1($k2($k3($k4($k5($k6($k7($k8($k9($kA($kB($kC($kD($kE($kF($k_))))))))))))))))))($Word$nil))($bF($Word$0)($Word$1)))($bE($Word$0)($Word$1)))($bD($Word$0)($Word$1)))($bC($Word$0)($Word$1)))($bB($Word$0)($Word$1)))($bA($Word$0)($Word$1)))($b9($Word$0)($Word$1)))($b8($Word$0)($Word$1)))($b7($Word$0)($Word$1)))($b6($Word$0)($Word$1)))($b5($Word$0)($Word$1)))($b4($Word$0)($Word$1)))($b3($Word$0)($Word$1)))($b2($Word$0)($Word$1)))($b1($Word$0)($Word$1)))($b0($Word$0)($Word$1))))))))))))))))));
  var $Bit$0 = ($o=>($i=>$o));
  var $Bit$1 = ($o=>($i=>$i));
  var $String$nil = inst_string(($strnil=>($strcons=>$strnil)));
  var $Bits$1 = ($bs=>inst_bits(($be=>($b0=>($b1=>$b1($bs))))));
  var $Bits$0 = ($bs=>inst_bits(($be=>($b0=>($b1=>$b0($bs))))));
  var $Bits$from_string = ($str=>elim_string($str)($Bits$nil)(($str$head=>($str$tail=>elim_bool($U16$eql($str$head)($Char$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$nil))))(($=>$Bits$1($Bits$from_string($str$tail))))(($=>$Bits$0($Bits$from_string($str$tail))))($Unit$new)))));
  var $F64$parse_binary = ($str=>$F64$new($Word$from_bits($Nat$64)($Bits$from_string($str))));
  var $F64$0 = $F64$parse_binary($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  var $F64$div = a=>b=>a/b;
  var $F64$1 = $F64$parse_binary($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  var $F64$pow = a=>b=>a**b;
  var $F64$V3$len = ($v=>$v(($v$x=>($v$y=>($v$z=>($sqr=>($sqr=>($sqr=>($sqr=>($expo=>($sqr=>$sqr)($F64$pow($sqr)($expo)))($F64$div($F64$1)($F64$add($F64$1)($F64$1))))($F64$add($sqr)($F64$mul($v$z)($v$z))))($F64$add($sqr)($F64$mul($v$y)($v$y))))($F64$add($sqr)($F64$mul($v$x)($v$x))))($F64$0))))));
  var $F64$V3$norm = ($v=>$v(($v$x=>($v$y=>($v$z=>($len=>($new_x=>($new_y=>($new_z=>$F64$V3$new($new_x)($new_y)($new_z))($F64$div($v$z)($len)))($F64$div($v$y)($len)))($F64$div($v$x)($len)))($F64$V3$len($v)))))));
  var $F64$V3$look_at = ($a=>($b=>($c=>$a(($a$x=>($a$y=>($a$z=>$b(($a$x=>($a$y=>($a$z=>$c(($a$x=>($a$y=>($a$z=>($a_eql_b=>($diff=>($normdiff=>elim_bool($a_eql_b)($normdiff)($c))($F64$V3$norm($diff)))($F64$V3$sub($b)($a)))($F64$V3$eql($a)($b)))))))))))))))));
  var $List$find = ($cond=>($xs=>$xs($Maybe$none)(($head=>($tail=>elim_bool($cond($head))($Maybe$some($head))($List$find($cond)($tail)))))));
  var $TaelinArena$Game$get_thing_pid = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$pid))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_by_pid$cond = ($pid=>($thi=>($thi$pid=>$F64$eql($pid)($thi$pid))($TaelinArena$Game$get_thing_pid($thi))));
  var $TaelinArena$Game$get_thing_by_pid = ($pid=>($gm=>$gm(($gm$stage=>$List$find($TaelinArena$Game$get_thing_by_pid$cond($pid))($gm$stage)))));
  var $TaelinArena$Game$get_thing_pos = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$pos))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_position_by_pid = ($pid=>($gm=>$TaelinArena$Game$get_thing_by_pid($pid)($gm)($F64$V3$new($F64$0)($F64$0)($F64$0))(($found=>$TaelinArena$Game$get_thing_pos($found)))));
  var $List$map = ($fn=>($list=>$list($List$nil)(($list$head=>($list$tail=>$List$cons($fn($list$head))($List$map($fn)($list$tail)))))));
  var $TaelinArena$Game$Game$new = ($stage=>($new=>$new($stage)));
  var $TaelinArena$Game$map_stage = ($fn=>($gm=>$gm(($gm$stage=>($new_stage=>$TaelinArena$Game$Game$new($new_stage))($List$map($fn)($gm$stage))))));
  var $TaelinArena$Game$Command$new = ($pid=>($inp=>($new=>$new($pid)($inp))));
  var $TaelinArena$Game$Input$sdir = ($dir=>($sdir=>($key0=>($key1=>($key2=>($key3=>($key4=>($key5=>($cmsg=>$sdir($dir))))))))));
  var $TaelinArena$Game$Input$key0 = ($pos=>($sdir=>($key0=>($key1=>($key2=>($key3=>($key4=>($key5=>($cmsg=>$key0($pos))))))))));
  var $TaelinArena$Game$Input$key1 = ($pos=>($sdir=>($key0=>($key1=>($key2=>($key3=>($key4=>($key5=>($cmsg=>$key1($pos))))))))));
  var $TaelinArena$Game$Input$key2 = ($pos=>($sdir=>($key0=>($key1=>($key2=>($key3=>($key4=>($key5=>($cmsg=>$key2($pos))))))))));
  var $TaelinArena$Game$Input$key3 = ($pos=>($sdir=>($key0=>($key1=>($key2=>($key3=>($key4=>($key5=>($cmsg=>$key3($pos))))))))));
  var $TaelinArena$Game$Input$key4 = ($pos=>($sdir=>($key0=>($key1=>($key2=>($key3=>($key4=>($key5=>($cmsg=>$key4($pos))))))))));
  var $TaelinArena$Game$Input$key5 = ($pos=>($sdir=>($key0=>($key1=>($key2=>($key3=>($key4=>($key5=>($cmsg=>$key5($pos))))))))));
  var $TaelinArena$Game$get_thing_buf = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$buf))))))))))))))))))))))))))));
  var $TaelinArena$Game$is_silenced = ($self=>($self$buf=>($is_silenced=>($found_buf=>$found_buf($Bool$false)(($value=>$Bool$true)))($List$find($is_silenced)($self$buf)))(($buff=>$buff(($buff$dur=>($buff$val=>$Bool$false)))(($buff$dur=>($buff$val=>$Bool$false)))(($buff$dur=>($buff$val=>$Bool$false)))(($buff$dur=>$Bool$true))(($buff$dur=>$Bool$false))(($buff$dur=>$Bool$true)))))($TaelinArena$Game$get_thing_buf($self)));
  var $TaelinArena$Game$is_stunned = ($self=>($self$buf=>($is_stunned=>($found_buf=>$found_buf($Bool$false)(($value=>$Bool$true)))($List$find($is_stunned)($self$buf)))(($buff=>$buff(($buff$dur=>($buff$val=>$Bool$false)))(($buff$dur=>($buff$val=>$Bool$false)))(($buff$dur=>($buff$val=>$Bool$false)))(($buff$dur=>$Bool$false))(($buff$dur=>$Bool$false))(($buff$dur=>$Bool$true)))))($TaelinArena$Game$get_thing_buf($self)));
  var $TaelinArena$Game$get_thing_act = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$act))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_trg = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$trg))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_tik = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$tik))))))))))))))))))))))))))));
  var $TaelinArena$Game$Thing$new = ($fun=>($pid=>($mid=>($act=>($sid=>($stt=>($nam=>($lit=>($tik=>($pos=>($mov=>($bst=>($pad=>($dir=>($trg=>($vel=>($box=>($wei=>($mhp=>($dmg=>($knk=>($buf=>($chi=>($hit=>($rst=>($die=>($new=>$new($fun)($pid)($mid)($act)($sid)($stt)($nam)($lit)($tik)($pos)($mov)($bst)($pad)($dir)($trg)($vel)($box)($wei)($mhp)($dmg)($knk)($buf)($chi)($hit)($rst)($die))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_act = ($thi=>($new_act=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($new_act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $Bool$eql = ($a=>($b=>elim_bool($a)(elim_bool($b)($Bool$true)($Bool$false))(elim_bool($b)($Bool$false)($Bool$true))));
  var $Bool$if = x=>ct=>cf=>x?ct:cf;
  var $TaelinArena$Game$set_thing_trg = ($thi=>($new_trg=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($new_trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_tik = ($thi=>($new_tik=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($new_tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$init_act = ($self=>($new_act=>($new_trg=>($self$act=>($self$trg=>($self$tik=>($act_eql_0=>($self=>($self=>($self=>$self)($TaelinArena$Game$set_thing_tik($self)($Bool$if($act_eql_0)($F64$0)($self$tik))))($TaelinArena$Game$set_thing_trg($self)($Bool$if($act_eql_0)($new_trg)($self$trg))))($TaelinArena$Game$set_thing_act($self)($Bool$if($act_eql_0)($new_act)($self$act))))($F64$eql($self$act)($F64$0)))($TaelinArena$Game$get_thing_tik($self)))($TaelinArena$Game$get_thing_trg($self)))($TaelinArena$Game$get_thing_act($self)))));
  var $TaelinArena$Game$set_thing_pad = ($thi=>($new_pad=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($new_pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $F64$2 = $F64$parse_binary($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  var $F64$parse = $F64$parse;
  var $TaelinArena$Game$with_thing$effect = ($pid=>($fn=>($thi=>($thi$pid=>elim_bool($F64$eql($pid)($thi$pid))($fn($thi))($thi))($TaelinArena$Game$get_thing_pid($thi)))));
  var $TaelinArena$Game$with_thing = ($pid=>($fn=>($gm=>$TaelinArena$Game$map_stage($TaelinArena$Game$with_thing$effect($pid)($fn))($gm))));
  var $TaelinArena$exec_command = ($cmd=>($gm=>$cmd(($cmd$pid=>($cmd$inp=>($fn=>$TaelinArena$Game$with_thing($cmd$pid)($fn)($gm))(($this=>($inp=>($is_silenced=>($is_stunned=>elim_bool($is_stunned)($inp(($sdir$dir=>$TaelinArena$Game$init_act($this)($F64$0)($sdir$dir)))(($key0$pos=>$this))(($key1$pos=>$this))(($key2$pos=>$this))(($key3$pos=>$this))(($key4$pos=>$this))(($key5$pos=>$this))(($cmsg$txt=>$this)))(elim_bool($is_silenced)($inp(($sdir$dir=>$TaelinArena$Game$set_thing_pad($this)($sdir$dir)))(($key0$pos=>$this))(($key1$pos=>$this))(($key2$pos=>$this))(($key3$pos=>$this))(($key4$pos=>$this))(($key5$pos=>$this))(($cmsg$txt=>$this)))($inp(($sdir$dir=>$TaelinArena$Game$set_thing_pad($this)($sdir$dir)))(($key0$pos=>$TaelinArena$Game$init_act($this)($F64$1)($key0$pos)))(($key1$pos=>$TaelinArena$Game$init_act($this)($F64$2)($key1$pos)))(($key2$pos=>$TaelinArena$Game$init_act($this)($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$1)($Bit$1))($String$nil)))($key2$pos)))(($key3$pos=>$TaelinArena$Game$init_act($this)($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$0)($Bit$0))($String$nil)))($key3$pos)))(($key4$pos=>$TaelinArena$Game$init_act($this)($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$0)($Bit$1))($String$nil)))($key4$pos)))(($key5$pos=>$TaelinArena$Game$init_act($this)($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$1)($Bit$0))($String$nil)))($key5$pos)))(($cmsg$txt=>$this)))))($TaelinArena$Game$is_stunned($this)))($TaelinArena$Game$is_silenced($this)))($cmd$inp))))))));
  var $TaelinArena$Game$set_thing_fun = ($thi=>($new_fun=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($new_fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_sid = ($thi=>($new_sid=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($new_sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_pid = ($thi=>($new_pid=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($new_pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_pos = ($thi=>($new_pos=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($new_pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_nam = ($thi=>($new_nam=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($new_nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_dir = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$dir))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_box = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$box))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_sid = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$sid))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_hit = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$hit))))))))))))))))))))))))))));
  var $F64$sqrt = ($n=>$F64$pow($n)($F64$div($F64$1)($F64$2)));
  var $F64$V3$sqr_dist = ($a=>($b=>$a(($a$x=>($a$y=>($a$z=>$b(($b$x=>($b$y=>($b$z=>($two=>($x_diff=>($y_diff=>($z_diff=>$F64$add($x_diff)($F64$add($y_diff)($z_diff)))($F64$pow($F64$sub($a$z)($b$z))($two)))($F64$pow($F64$sub($a$y)($b$y))($two)))($F64$pow($F64$sub($a$x)($b$x))($two)))($F64$add($F64$1)($F64$1))))))))))));
  var $F64$V3$dist = ($a=>($b=>$F64$sqrt($F64$V3$sqr_dist($a)($b))));
  var $Word$ltn = ($a=>($b=>$Word$cmp($a)($b)($Bool$true)($Bool$false)($Bool$false)));
  var $F64$cmp = ($a=>($b=>elim_f64($a)(($a$word=>elim_f64($b)(($b$word=>elim_bool($F64$eql($a)($b))($Cmp$eql)(elim_bool($Word$ltn($a$word)($b$word))($Cmp$ltn)($Cmp$gtn))))))));
  var $F64$ltn = ($a=>($b=>$F64$cmp($a)($b)($Bool$true)($Bool$false)($Bool$false)));
  var $F64$V3$scale = ($k=>($v=>$v(($v$x=>($v$y=>($v$z=>($new_x=>($new_y=>($new_z=>$F64$V3$new($new_x)($new_y)($new_z))($F64$mul($k)($v$z)))($F64$mul($k)($v$y)))($F64$mul($k)($v$x))))))));
  var $F64$max = $F64$max;
  var $F64$min = $F64$min;
  var $F64$V3$point_segment_sqrdist = ($p=>($s=>$p(($p$x=>($p$y=>($p$z=>$s(($a=>($b=>$a(($a$x=>($a$y=>($a$z=>$b(($b$x=>($b$y=>($b$z=>($ab_x_diff_sqrd=>($ab_y_diff_sqrd=>($pa_x_diff=>($pa_y_diff=>($ba_x_diff=>($ba_y_diff=>($l=>($t=>($t=>($t=>($d=>($t_times_ba_x_diff=>($t_times_ba_y_diff=>($k=>($d=>($k=>($d=>$d)($F64$add($d)($k)))($F64$pow($F64$sub($p$y)($F64$add($a$y)($t_times_ba_y_diff)))($F64$2)))($F64$add($d)($k)))($F64$pow($F64$sub($p$x)($F64$add($a$x)($t_times_ba_x_diff)))($F64$2)))($F64$mul($t)($ba_y_diff)))($F64$mul($t)($ba_x_diff)))($F64$0))($F64$max($F64$0)($F64$min($F64$1)($t))))($F64$div($t)($l)))($F64$add($F64$mul($pa_x_diff)($ba_x_diff))($F64$mul($pa_y_diff)($ba_y_diff))))($F64$add($ab_x_diff_sqrd)($ab_y_diff_sqrd)))($F64$sub($b$y)($a$y)))($F64$sub($b$x)($a$x)))($F64$sub($p$y)($a$y)))($F64$sub($p$x)($a$x)))($F64$pow($F64$sub($a$y)($b$y))($F64$2)))($F64$pow($F64$sub($a$x)($b$x))($F64$2)))))))))))))))))));
  var $F64$V3$point_segment_dist = ($p=>($s=>$F64$sqrt($F64$V3$point_segment_sqrdist($p)($s))));
  var $F64$V3$rot_90 = ($v=>$v(($v$x=>($v$y=>($v$z=>$F64$V3$new($v$y)($F64$sub($F64$0)($v$x))($v$z))))));
  var $TaelinArena$collide_with = ($a_pos=>($a_dir=>($a_box=>($b_pos=>($b_dir=>($b_box=>($none=>$a_box($none)(($a_box$rad=>$b_box($none)(($b_box$rad=>($dst=>($rad=>($if_condition=>$Bool$if($if_condition)(($out_dir=>($out_vec=>$Maybe$some($out_vec))($F64$V3$scale($F64$sub($rad)($dst))($out_dir)))($F64$V3$norm($F64$V3$sub($a_pos)($b_pos))))($none))($Bool$and($F64$ltn($F64$0)($dst))($F64$ltn($dst)($rad))))($F64$add($a_box$rad)($b_box$rad)))($F64$V3$dist($a_pos)($b_pos))))(($b_box$pts=>($cons=>($segs=>$List$fold($none)($cons)($segs))($F64$V3$polygon_to_segments($b_pos)($b_dir)($b_box$pts)))(($segment=>($result=>$result($segment(($segment$a=>($segment$b=>($dst=>($rad=>$Bool$if($F64$ltn($dst)($rad))(($out_dir=>($out_vec=>$Maybe$some($out_vec))($F64$V3$scale($F64$sub($rad)($dst))($out_dir)))($F64$V3$rot_90($F64$V3$norm($F64$V3$sub($segment$a)($segment$b)))))($none))($a_box$rad))($F64$V3$point_segment_dist($a_pos)($segment))))))(($result$value=>$Maybe$some($result$value))))))))))(($a_box$pts=>$none)))($Maybe$none)))))));
  var $TaelinArena$Game$get_thing_dmg = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$dmg))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_dmg = ($thi=>($new_dmg=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($new_dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $Pair$new = ($a=>($b=>($pair=>$pair($a)($b))));
  var $Pair = ($A=>($B=>(void 0)));
  var $F64$Ordering$EQ = ($F64$Ordering$LT=>($F64$Ordering$EQ=>($F64$Ordering$GT=>$F64$Ordering$EQ)));
  var $F64$Ordering$GT = ($F64$Ordering$LT=>($F64$Ordering$EQ=>($F64$Ordering$GT=>$F64$Ordering$GT)));
  var $F64$Ordering$LT = ($F64$Ordering$LT=>($F64$Ordering$EQ=>($F64$Ordering$GT=>$F64$Ordering$LT)));
  var $F64$compare_numbers = ($a=>($b=>$Bool$if($F64$eql($a)($b))($F64$Ordering$EQ)($Bool$if($F64$ltn($b)($a))($F64$Ordering$GT)($F64$Ordering$LT))));
  var $TaelinArena$Game$Buff$shielded = ($dur=>($val=>($shielded=>($slowed=>($hasted=>($silenced=>($rooted=>($stuned=>$shielded($dur)($val)))))))));
  var $TaelinArena$Game$use_shields = ($buff=>($acc=>$acc(($acc$fst=>($acc$snd=>$buff(($buff$dur=>($buff$val=>$Bool$if($F64$eql($acc$fst)($F64$0))($acc)(($compare=>$compare(($remaining_shield_val=>($remaining_buf=>$Pair$new($F64$0)($remaining_buf))($List$cons($TaelinArena$Game$Buff$shielded($buff$dur)($remaining_shield_val))($acc$snd)))($F64$sub($buff$val)($acc$fst)))($Pair$new($F64$0)($acc$snd))(($remaining_dmg=>$Pair$new($remaining_dmg)($acc$snd))($F64$sub($acc$fst)($buff$val))))($F64$compare_numbers($acc$fst)($buff$val))))))(($buff$dur=>($buff$val=>$Pair$new($acc$fst)($List$cons($buff)($acc$snd)))))(($buff$dur=>($buff$val=>$Pair$new($acc$fst)($List$cons($buff)($acc$snd)))))(($buff$dur=>$Pair$new($acc$fst)($List$cons($buff)($acc$snd))))(($buff$dur=>$Pair$new($acc$fst)($List$cons($buff)($acc$snd))))(($buff$dur=>$Pair$new($acc$fst)($List$cons($buff)($acc$snd)))))))));
  var $Pair$fst = ($pair=>$pair(($a=>($b=>$a))));
  var $Pair$snd = ($pair=>$pair(($a=>($b=>$b))));
  var $TaelinArena$Game$set_thing_buf = ($thi=>($new_buf=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($new_buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$handle_shields = ($hit_dmg=>($self=>($self$buf=>($self$dmg=>($init_val=>($res=>($res$fst=>($res$snd=>($remaining_dmg=>($remaining_buf=>($self=>($self=>$self)($TaelinArena$Game$set_thing_buf($self)($remaining_buf)))($TaelinArena$Game$set_thing_dmg($self)($remaining_dmg)))($res$snd))($F64$add($res$fst)($self$dmg)))($Pair$snd($res)))($Pair$fst($res)))($List$fold($init_val)($TaelinArena$Game$use_shields)($self$buf)))($Pair$new($hit_dmg)($List$nil)))($TaelinArena$Game$get_thing_dmg($self)))($TaelinArena$Game$get_thing_buf($self))));
  var $TaelinArena$Game$set_thing_knk = ($thi=>($new_knk=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($new_knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$Buff$slowed = ($dur=>($val=>($shielded=>($slowed=>($hasted=>($silenced=>($rooted=>($stuned=>$slowed($dur)($val)))))))));
  var $TaelinArena$Game$Buff$hasted = ($dur=>($val=>($shielded=>($slowed=>($hasted=>($silenced=>($rooted=>($stuned=>$hasted($dur)($val)))))))));
  var $TaelinArena$Game$Buff$silenced = ($dur=>($shielded=>($slowed=>($hasted=>($silenced=>($rooted=>($stuned=>$silenced($dur))))))));
  var $TaelinArena$Game$Buff$rooted = ($dur=>($shielded=>($slowed=>($hasted=>($silenced=>($rooted=>($stuned=>$rooted($dur))))))));
  var $TaelinArena$Game$Buff$stuned = ($dur=>($shielded=>($slowed=>($hasted=>($silenced=>($rooted=>($stuned=>$stuned($dur))))))));
  var $TaelinArena$interact_with = ($this=>($that=>($this$pos=>($this$dir=>($this$box=>($this$buf=>($this$sid=>($that$pos=>($that$dir=>($that$box=>($that$hit=>($that$sid=>($out_vec=>($this=>($this=>$this)(($apply_hit=>$List$fold($this)($apply_hit)($that$hit))(($hit=>($this=>$hit(($hit$eff=>($hit$pos=>($hit$dir=>($hit$box=>($out_vec=>$out_vec($this)(($out_vec$value=>($compare_sid=>($apply_eff=>$List$fold($this)($apply_eff)($hit$eff))(($eff=>($this=>$eff(($eff$lif=>($this$dmg=>$Bool$if($compare_sid)($this)($TaelinArena$Game$set_thing_dmg($this)($F64$sub($this$dmg)($eff$lif))))($TaelinArena$Game$get_thing_dmg($this))))(($eff$dmg=>$Bool$if($compare_sid)($this)($TaelinArena$Game$handle_shields($eff$dmg)($this))))(($eff$mag=>$Bool$if($compare_sid)($this)(($v3=>($dir=>($vec=>$TaelinArena$Game$set_thing_knk($this)($vec))($F64$V3$scale($eff$mag)($dir)))($F64$V3$look_at($hit$pos)($this$pos)($v3)))($F64$V3$new($F64$1)($F64$0)($F64$0)))))(($eff$mag=>($eff$dir=>$Bool$if($compare_sid)($this)(($vec=>$TaelinArena$Game$set_thing_knk($this)($vec))($F64$V3$scale($eff$mag)($eff$dir))))))(($eff$dur=>($eff$val=>$Bool$if($compare_sid)($this)(($updated_buffs=>$TaelinArena$Game$set_thing_buf($this)($updated_buffs))($List$cons($TaelinArena$Game$Buff$slowed($eff$dur)($eff$val))($this$buf))))))(($eff$dur=>($eff$val=>$Bool$if($compare_sid)($this)(($updated_buffs=>$TaelinArena$Game$set_thing_buf($this)($updated_buffs))($List$cons($TaelinArena$Game$Buff$hasted($eff$dur)($eff$val))($this$buf))))))(($eff$dur=>($eff$val=>$Bool$if($compare_sid)($this)(($updated_buffs=>$TaelinArena$Game$set_thing_buf($this)($updated_buffs))($List$cons($TaelinArena$Game$Buff$shielded($eff$dur)($eff$val))($this$buf))))))(($eff$dur=>$Bool$if($compare_sid)($this)(($updated_buffs=>$TaelinArena$Game$set_thing_buf($this)($updated_buffs))($List$cons($TaelinArena$Game$Buff$silenced($eff$dur))($this$buf)))))(($eff$dur=>$Bool$if($compare_sid)($this)(($updated_buffs=>$TaelinArena$Game$set_thing_buf($this)($updated_buffs))($List$cons($TaelinArena$Game$Buff$rooted($eff$dur))($this$buf)))))(($eff$dur=>$Bool$if($compare_sid)($this)(($updated_buffs=>$TaelinArena$Game$set_thing_buf($this)($updated_buffs))($List$cons($TaelinArena$Game$Buff$stuned($eff$dur))($this$buf)))))(($eff$to_pos=>($eff$all=>$Bool$if($F64$eql($eff$all)($F64$1))($TaelinArena$Game$set_thing_pos($this)($eff$to_pos))($this))))))))($F64$eql($this$sid)($that$sid)))))($TaelinArena$collide_with($this$pos)($this$dir)($this$box)($hit$pos)($hit$dir)($hit$box))))))))))))($out_vec($this)(($out_vec$value=>($new_pos=>$TaelinArena$Game$set_thing_pos($this)($new_pos))($F64$V3$add($this$pos)($out_vec$value))))))($TaelinArena$collide_with($this$pos)($this$dir)($this$box)($that$pos)($that$dir)($that$box)))($TaelinArena$Game$get_thing_sid($this)))($TaelinArena$Game$get_thing_hit($that)))($TaelinArena$Game$get_thing_box($that)))($TaelinArena$Game$get_thing_dir($that)))($TaelinArena$Game$get_thing_pos($that)))($TaelinArena$Game$get_thing_sid($this)))($TaelinArena$Game$get_thing_buf($this)))($TaelinArena$Game$get_thing_box($this)))($TaelinArena$Game$get_thing_dir($this)))($TaelinArena$Game$get_thing_pos($this))));
  var $TaelinArena$Game$set_thing_hit = ($thi=>($new_hit=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($new_hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_rst = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$rst))))))))))))))))))))))))))));
  var $TaelinArena$Game$Hitbox$cbox = ($rad=>($nbox=>($cbox=>($pbox=>$cbox($rad)))));
  var $TaelinArena$Game$set_thing_vel = ($thi=>($new_vel=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($new_vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_bst = ($thi=>($new_bst=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($new_bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_box = ($thi=>($new_box=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($new_box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_lit = ($thi=>($new_lit=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($new_lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_rst = ($thi=>($new_rst=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($new_rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_bst = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$bst))))))))))))))))))))))))))));
  var $TaelinArena$Game$combine_mov_buffs = ($buff=>($i=>$buff(($buff$dur=>($buff$val=>$i)))(($buff$dur=>($buff$val=>$F64$mul($i)($buff$val))))(($buff$dur=>($buff$val=>$F64$mul($i)($buff$val))))(($buff$dur=>$i))(($buff$dur=>$F64$0))(($buff$dur=>$F64$0))));
  var $TaelinArena$Game$speed_multiplier_of = ($self=>($bst=>($buf=>$List$fold($bst)($TaelinArena$Game$combine_mov_buffs)($buf))($TaelinArena$Game$get_thing_buf($self)))($TaelinArena$Game$get_thing_bst($self)));
  var $TaelinArena$Game$get_thing_mov = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$mov))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_pad = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$pad))))))))))))))))))))))))))));
  var $TaelinArena$Game$update_buff_dur = ($self=>($self$buf=>($fn=>($new_buf=>$TaelinArena$Game$set_thing_buf($self)($new_buf))($List$fold($List$nil)($fn)($self$buf)))(($buff=>($acc=>$buff(($buff$dur=>($buff$val=>$Bool$if($F64$eql($buff$dur)($F64$0))($acc)($List$cons($TaelinArena$Game$Buff$shielded($F64$sub($buff$dur)($F64$1))($buff$val))($acc)))))(($buff$dur=>($buff$val=>$Bool$if($F64$eql($buff$dur)($F64$0))($acc)($List$cons($TaelinArena$Game$Buff$slowed($F64$sub($buff$dur)($F64$1))($buff$val))($acc)))))(($buff$dur=>($buff$val=>$Bool$if($F64$eql($buff$dur)($F64$0))($acc)($List$cons($TaelinArena$Game$Buff$hasted($F64$sub($buff$dur)($F64$1))($buff$val))($acc)))))(($buff$dur=>$Bool$if($F64$eql($buff$dur)($F64$0))($acc)($List$cons($TaelinArena$Game$Buff$silenced($F64$sub($buff$dur)($F64$1)))($acc))))(($buff$dur=>$Bool$if($F64$eql($buff$dur)($F64$0))($acc)($List$cons($TaelinArena$Game$Buff$rooted($F64$sub($buff$dur)($F64$1)))($acc))))(($buff$dur=>$Bool$if($F64$eql($buff$dur)($F64$0))($acc)($List$cons($TaelinArena$Game$Buff$stuned($F64$sub($buff$dur)($F64$1)))($acc))))))))($TaelinArena$Game$get_thing_buf($self)));
  var $TaelinArena$Game$get_thing_knk = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$knk))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_wei = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$wei))))))))))))))))))))))))))));
  var $F64$gtn = ($a=>($b=>$F64$cmp($a)($b)($Bool$false)($Bool$false)($Bool$true)));
  var $TaelinArena$Game$get_thing_fun = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$fun))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_chi = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$chi))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_chi = ($thi=>($new_chi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($new_chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $F64$V3$get_z = ($v=>$v(($v$x=>($v$y=>($v$z=>$v$z)))));
  var $F64$V3$get_y = ($v=>$v(($v$x=>($v$y=>($v$z=>$v$y)))));
  var $TaelinArena$Game$get_thing_mhp = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$mhp))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_die = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$die))))))))))))))))))))))))))));
  var $Bool$or = a=>b=>a||b;
  var $List$concat = ($as=>($bs=>$as($bs)(($head=>($tail=>$List$cons($head)($List$concat($tail)($bs)))))));
  var $TaelinArena$fold_with_context = ($i=>($f=>($xs=>($ys=>$xs($i)(($xs$head=>($xs$tail=>($ys2=>($rest=>$f($xs$head)($ys($xs$tail))($rest))($TaelinArena$fold_with_context($i)($f)($xs$tail)($ys2)))(($x=>$ys($List$cons($xs$head)($xs)))))))))));
  var $TaelinArena$exec_turn = ($gm=>($intr=>($tick=>($things_id=>($stage=>($stage_nil=>($new_stage=>$TaelinArena$Game$Game$new($new_stage))($TaelinArena$fold_with_context($stage_nil)($tick)($stage)($things_id)))($List$nil))($gm(($stage=>$stage))))(($x=>$x)))(($this=>($others=>($res=>($this=>($rst=>($this=>($boost=>($pos=>($mov=>($pad=>($this=>($this=>($pos=>($knk=>($wei=>($new_pos=>($knk_len=>($new_knk=>($this=>($this=>($fun=>($this=>($this=>($tik=>($this=>($this_chi=>($chi_init=>($chi_list=>($this=>($this_pos=>($pos_x=>($pos_y=>($pos_z=>($new_x=>($new_y=>($new_z=>($this=>($dmg=>($mhp=>($new_dmg=>($this=>($sid=>($dmg=>($mhp=>($no_hp=>($die=>($xs=>$List$concat($chi_list)($xs))(elim_bool($Bool$or($die)($no_hp))($res)($List$cons($this)($res))))($TaelinArena$Game$get_thing_die($this)))($Bool$false))($TaelinArena$Game$get_thing_mhp($this)))($TaelinArena$Game$get_thing_dmg($this)))($TaelinArena$Game$get_thing_sid($this)))($TaelinArena$Game$set_thing_dmg($this)($new_dmg)))($F64$max($F64$0)($F64$min($mhp)($dmg))))($TaelinArena$Game$get_thing_mhp($this)))($TaelinArena$Game$get_thing_dmg($this)))($TaelinArena$Game$set_thing_pos($this)($F64$V3$new($new_x)($new_y)($new_z))))($F64$min($F64$max($F64$0)($pos_z))($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$1)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$1)($Bit$0))($String$nil)))))))($F64$min($F64$max($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$1)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$nil))))))($pos_y))($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$1)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$nil)))))))($F64$min($F64$max($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$1)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$1)($Bit$0))($String$nil))))))($pos_x))($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$1)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$1)($Bit$0))($String$nil)))))))($F64$V3$get_z($this_pos)))($F64$V3$get_y($this_pos)))($F64$V3$get_z($this_pos)))($TaelinArena$Game$get_thing_pos($this)))($TaelinArena$Game$set_thing_chi($this)($List$nil)))($List$map($chi_init)($this_chi)))(($chi=>$TaelinArena$Game$get_thing_fun($chi)($chi))))($TaelinArena$Game$get_thing_chi($this)))($TaelinArena$Game$set_thing_tik($this)($F64$add($tik)($F64$1))))($TaelinArena$Game$get_thing_tik($this)))($List$fold($this)($intr)($others)))($fun($this)))($TaelinArena$Game$get_thing_fun($this)))($TaelinArena$Game$set_thing_knk($this)($new_knk)))($TaelinArena$Game$set_thing_pos($this)($new_pos)))(elim_bool($F64$gtn($knk_len)($F64$0))(($force=>$F64$V3$scale($force)($F64$V3$norm($knk)))($F64$max($F64$sub($knk_len)($wei))($F64$0)))($knk)))($F64$V3$len($knk)))($F64$V3$add($pos)($knk)))($TaelinArena$Game$get_thing_wei($this)))($TaelinArena$Game$get_thing_knk($this)))($TaelinArena$Game$get_thing_pos($this)))($TaelinArena$Game$update_buff_dur($this)))($TaelinArena$Game$set_thing_pos($this)($F64$V3$add($pos)($F64$V3$scale($F64$mul($mov)($boost))($pad)))))($TaelinArena$Game$get_thing_pad($this)))($TaelinArena$Game$get_thing_mov($this)))($TaelinArena$Game$get_thing_pos($this)))($TaelinArena$Game$speed_multiplier_of($this)))(elim_bool($rst)(($new_vel=>($new_bst=>($new_box=>($new_act=>($new_tik=>($new_lit=>($new_rst=>($this=>($this=>($this=>($this=>($this=>($this=>($this=>$this)($TaelinArena$Game$set_thing_rst($this)($new_rst)))($TaelinArena$Game$set_thing_lit($this)($new_lit)))($TaelinArena$Game$set_thing_tik($this)($new_tik)))($TaelinArena$Game$set_thing_act($this)($new_act)))($TaelinArena$Game$set_thing_box($this)($new_box)))($TaelinArena$Game$set_thing_bst($this)($new_bst)))($TaelinArena$Game$set_thing_vel($this)($new_vel)))($Bool$false))($List$nil))($F64$0))($F64$0))($TaelinArena$Game$Hitbox$cbox($F64$mul($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$1)($Bit$1))($String$nil)))($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$0)($Bit$0))($String$nil))))))($F64$1))($F64$V3$new($F64$0)($F64$0)($F64$0)))($this)))($TaelinArena$Game$get_thing_rst($this)))($TaelinArena$Game$set_thing_hit($this)($List$nil)))))))(($that=>($this=>$TaelinArena$interact_with($this)($that)))));
  var $Exports$new = ($new=>($add=>$new));
  var $Exports$TaelinArena = $Exports$add($List$nil)($Exports$add($List$cons)($Exports$add($F64$V3$polygon_to_segments)($Exports$add($F64$V3$look_at)($Exports$add($TaelinArena$Game$get_position_by_pid)($Exports$add($TaelinArena$Game$map_stage)($Exports$add($TaelinArena$Game$Command$new)($Exports$add($TaelinArena$Game$Input$sdir)($Exports$add($TaelinArena$Game$Input$key0)($Exports$add($TaelinArena$Game$Input$key1)($Exports$add($TaelinArena$Game$Input$key2)($Exports$add($TaelinArena$Game$Input$key3)($Exports$add($TaelinArena$Game$Input$key4)($Exports$add($TaelinArena$Game$Input$key5)($Exports$add($TaelinArena$exec_command)($Exports$add($TaelinArena$Game$Thing$new)($Exports$add($TaelinArena$Game$set_thing_fun)($Exports$add($TaelinArena$Game$set_thing_sid)($Exports$add($TaelinArena$Game$set_thing_pid)($Exports$add($TaelinArena$Game$set_thing_pos)($Exports$add($TaelinArena$Game$set_thing_nam)($Exports$add($TaelinArena$Game$Game$new)($Exports$add($TaelinArena$exec_turn)($Exports$new)))))))))))))))))))))));
  return {
    'Exports.add': $Exports$add,
    'List.nil': $List$nil,
    'List.cons': $List$cons,
    'List.fold': $List$fold,
    'List': $List,
    'F64.atan': $F64$atan,
    'F64.mul': $F64$mul,
    'F64.cos': $F64$cos,
    'F64.sin': $F64$sin,
    'F64.sub': $F64$sub,
    'F64.add': $F64$add,
    'F64.V3.new': $F64$V3$new,
    'F64.V3.add': $F64$V3$add,
    'F64.V3.polygon_to_segments.transform': $F64$V3$polygon_to_segments$transform,
    'F64.Segment.new': $F64$Segment$new,
    'F64.V3.polygon_to_segments.nil': $F64$V3$polygon_to_segments$nil,
    'Maybe.some': $Maybe$some,
    'Maybe': $Maybe,
    'F64.V3.polygon_to_segments.cons': $F64$V3$polygon_to_segments$cons,
    'Maybe.none': $Maybe$none,
    'F64.V3.polygon_to_segments': $F64$V3$polygon_to_segments,
    'Cmp.ltn': $Cmp$ltn,
    'Cmp.gtn': $Cmp$gtn,
    'Word.cmp.aux': $Word$cmp$aux,
    'Cmp.eql': $Cmp$eql,
    'Word.cmp': $Word$cmp,
    'Bool.false': $Bool$false,
    'Bool.true': $Bool$true,
    'Word.eql': $Word$eql,
    'Nat.succ': $Nat$succ,
    'Nat.zero': $Nat$zero,
    'Nat.0': $Nat$0,
    'Nat.1': $Nat$1,
    'Nat.2': $Nat$2,
    'Nat.3': $Nat$3,
    'Nat.4': $Nat$4,
    'Nat.5': $Nat$5,
    'Nat.6': $Nat$6,
    'Nat.7': $Nat$7,
    'Nat.8': $Nat$8,
    'Nat.9': $Nat$9,
    'Nat.10': $Nat$10,
    'Nat.11': $Nat$11,
    'Nat.12': $Nat$12,
    'Nat.13': $Nat$13,
    'Nat.14': $Nat$14,
    'Nat.15': $Nat$15,
    'Nat.16': $Nat$16,
    'Nat.17': $Nat$17,
    'Nat.18': $Nat$18,
    'Nat.19': $Nat$19,
    'Nat.20': $Nat$20,
    'Nat.21': $Nat$21,
    'Nat.22': $Nat$22,
    'Nat.23': $Nat$23,
    'Nat.24': $Nat$24,
    'Nat.25': $Nat$25,
    'Nat.26': $Nat$26,
    'Nat.27': $Nat$27,
    'Nat.28': $Nat$28,
    'Nat.29': $Nat$29,
    'Nat.30': $Nat$30,
    'Nat.31': $Nat$31,
    'Nat.32': $Nat$32,
    'Nat.33': $Nat$33,
    'Nat.34': $Nat$34,
    'Nat.35': $Nat$35,
    'Nat.36': $Nat$36,
    'Nat.37': $Nat$37,
    'Nat.38': $Nat$38,
    'Nat.39': $Nat$39,
    'Nat.40': $Nat$40,
    'Nat.41': $Nat$41,
    'Nat.42': $Nat$42,
    'Nat.43': $Nat$43,
    'Nat.44': $Nat$44,
    'Nat.45': $Nat$45,
    'Nat.46': $Nat$46,
    'Nat.47': $Nat$47,
    'Nat.48': $Nat$48,
    'Nat.49': $Nat$49,
    'Nat.50': $Nat$50,
    'Nat.51': $Nat$51,
    'Nat.52': $Nat$52,
    'Nat.53': $Nat$53,
    'Nat.54': $Nat$54,
    'Nat.55': $Nat$55,
    'Nat.56': $Nat$56,
    'Nat.57': $Nat$57,
    'Nat.58': $Nat$58,
    'Nat.59': $Nat$59,
    'Nat.60': $Nat$60,
    'Nat.61': $Nat$61,
    'Nat.62': $Nat$62,
    'Nat.63': $Nat$63,
    'Nat.64': $Nat$64,
    'F64.eql': $F64$eql,
    'Bool.and': $Bool$and,
    'F64.V3.eql': $F64$V3$eql,
    'F64.V3.sub': $F64$V3$sub,
    'F64.new': $F64$new,
    'Word': $Word,
    'Word.nil': $Word$nil,
    'Word.0': $Word$0,
    'Bits.nil': $Bits$nil,
    'Word.1': $Word$1,
    'Word.from_bits': $Word$from_bits,
    'U16.eql': $U16$eql,
    'Char.parse.type': $Char$parse$type,
    'Unit.new': $Unit$new,
    'Char.parse': $Char$parse,
    'String.cons': $String$cons,
    'U16.new': $U16$new,
    'Char.new': $Char$new,
    'Bit.0': $Bit$0,
    'Bit.1': $Bit$1,
    'String.nil': $String$nil,
    'Bits.1': $Bits$1,
    'Bits.0': $Bits$0,
    'Bits.from_string': $Bits$from_string,
    'F64.parse_binary': $F64$parse_binary,
    'F64.0': $F64$0,
    'F64.div': $F64$div,
    'F64.1': $F64$1,
    'F64.pow': $F64$pow,
    'F64.V3.len': $F64$V3$len,
    'F64.V3.norm': $F64$V3$norm,
    'F64.V3.look_at': $F64$V3$look_at,
    'List.find': $List$find,
    'TaelinArena.Game.get_thing_pid': $TaelinArena$Game$get_thing_pid,
    'TaelinArena.Game.get_thing_by_pid.cond': $TaelinArena$Game$get_thing_by_pid$cond,
    'TaelinArena.Game.get_thing_by_pid': $TaelinArena$Game$get_thing_by_pid,
    'TaelinArena.Game.get_thing_pos': $TaelinArena$Game$get_thing_pos,
    'TaelinArena.Game.get_position_by_pid': $TaelinArena$Game$get_position_by_pid,
    'List.map': $List$map,
    'TaelinArena.Game.Game.new': $TaelinArena$Game$Game$new,
    'TaelinArena.Game.map_stage': $TaelinArena$Game$map_stage,
    'TaelinArena.Game.Command.new': $TaelinArena$Game$Command$new,
    'TaelinArena.Game.Input.sdir': $TaelinArena$Game$Input$sdir,
    'TaelinArena.Game.Input.key0': $TaelinArena$Game$Input$key0,
    'TaelinArena.Game.Input.key1': $TaelinArena$Game$Input$key1,
    'TaelinArena.Game.Input.key2': $TaelinArena$Game$Input$key2,
    'TaelinArena.Game.Input.key3': $TaelinArena$Game$Input$key3,
    'TaelinArena.Game.Input.key4': $TaelinArena$Game$Input$key4,
    'TaelinArena.Game.Input.key5': $TaelinArena$Game$Input$key5,
    'TaelinArena.Game.get_thing_buf': $TaelinArena$Game$get_thing_buf,
    'TaelinArena.Game.is_silenced': $TaelinArena$Game$is_silenced,
    'TaelinArena.Game.is_stunned': $TaelinArena$Game$is_stunned,
    'TaelinArena.Game.get_thing_act': $TaelinArena$Game$get_thing_act,
    'TaelinArena.Game.get_thing_trg': $TaelinArena$Game$get_thing_trg,
    'TaelinArena.Game.get_thing_tik': $TaelinArena$Game$get_thing_tik,
    'TaelinArena.Game.Thing.new': $TaelinArena$Game$Thing$new,
    'TaelinArena.Game.set_thing_act': $TaelinArena$Game$set_thing_act,
    'Bool.eql': $Bool$eql,
    'Bool.if': $Bool$if,
    'TaelinArena.Game.set_thing_trg': $TaelinArena$Game$set_thing_trg,
    'TaelinArena.Game.set_thing_tik': $TaelinArena$Game$set_thing_tik,
    'TaelinArena.Game.init_act': $TaelinArena$Game$init_act,
    'TaelinArena.Game.set_thing_pad': $TaelinArena$Game$set_thing_pad,
    'F64.2': $F64$2,
    'F64.parse': $F64$parse,
    'TaelinArena.Game.with_thing.effect': $TaelinArena$Game$with_thing$effect,
    'TaelinArena.Game.with_thing': $TaelinArena$Game$with_thing,
    'TaelinArena.exec_command': $TaelinArena$exec_command,
    'TaelinArena.Game.set_thing_fun': $TaelinArena$Game$set_thing_fun,
    'TaelinArena.Game.set_thing_sid': $TaelinArena$Game$set_thing_sid,
    'TaelinArena.Game.set_thing_pid': $TaelinArena$Game$set_thing_pid,
    'TaelinArena.Game.set_thing_pos': $TaelinArena$Game$set_thing_pos,
    'TaelinArena.Game.set_thing_nam': $TaelinArena$Game$set_thing_nam,
    'TaelinArena.Game.get_thing_dir': $TaelinArena$Game$get_thing_dir,
    'TaelinArena.Game.get_thing_box': $TaelinArena$Game$get_thing_box,
    'TaelinArena.Game.get_thing_sid': $TaelinArena$Game$get_thing_sid,
    'TaelinArena.Game.get_thing_hit': $TaelinArena$Game$get_thing_hit,
    'F64.sqrt': $F64$sqrt,
    'F64.V3.sqr_dist': $F64$V3$sqr_dist,
    'F64.V3.dist': $F64$V3$dist,
    'Word.ltn': $Word$ltn,
    'F64.cmp': $F64$cmp,
    'F64.ltn': $F64$ltn,
    'F64.V3.scale': $F64$V3$scale,
    'F64.max': $F64$max,
    'F64.min': $F64$min,
    'F64.V3.point_segment_sqrdist': $F64$V3$point_segment_sqrdist,
    'F64.V3.point_segment_dist': $F64$V3$point_segment_dist,
    'F64.V3.rot_90': $F64$V3$rot_90,
    'TaelinArena.collide_with': $TaelinArena$collide_with,
    'TaelinArena.Game.get_thing_dmg': $TaelinArena$Game$get_thing_dmg,
    'TaelinArena.Game.set_thing_dmg': $TaelinArena$Game$set_thing_dmg,
    'Pair.new': $Pair$new,
    'Pair': $Pair,
    'F64.Ordering.EQ': $F64$Ordering$EQ,
    'F64.Ordering.GT': $F64$Ordering$GT,
    'F64.Ordering.LT': $F64$Ordering$LT,
    'F64.compare_numbers': $F64$compare_numbers,
    'TaelinArena.Game.Buff.shielded': $TaelinArena$Game$Buff$shielded,
    'TaelinArena.Game.use_shields': $TaelinArena$Game$use_shields,
    'Pair.fst': $Pair$fst,
    'Pair.snd': $Pair$snd,
    'TaelinArena.Game.set_thing_buf': $TaelinArena$Game$set_thing_buf,
    'TaelinArena.Game.handle_shields': $TaelinArena$Game$handle_shields,
    'TaelinArena.Game.set_thing_knk': $TaelinArena$Game$set_thing_knk,
    'TaelinArena.Game.Buff.slowed': $TaelinArena$Game$Buff$slowed,
    'TaelinArena.Game.Buff.hasted': $TaelinArena$Game$Buff$hasted,
    'TaelinArena.Game.Buff.silenced': $TaelinArena$Game$Buff$silenced,
    'TaelinArena.Game.Buff.rooted': $TaelinArena$Game$Buff$rooted,
    'TaelinArena.Game.Buff.stuned': $TaelinArena$Game$Buff$stuned,
    'TaelinArena.interact_with': $TaelinArena$interact_with,
    'TaelinArena.Game.set_thing_hit': $TaelinArena$Game$set_thing_hit,
    'TaelinArena.Game.get_thing_rst': $TaelinArena$Game$get_thing_rst,
    'TaelinArena.Game.Hitbox.cbox': $TaelinArena$Game$Hitbox$cbox,
    'TaelinArena.Game.set_thing_vel': $TaelinArena$Game$set_thing_vel,
    'TaelinArena.Game.set_thing_bst': $TaelinArena$Game$set_thing_bst,
    'TaelinArena.Game.set_thing_box': $TaelinArena$Game$set_thing_box,
    'TaelinArena.Game.set_thing_lit': $TaelinArena$Game$set_thing_lit,
    'TaelinArena.Game.set_thing_rst': $TaelinArena$Game$set_thing_rst,
    'TaelinArena.Game.get_thing_bst': $TaelinArena$Game$get_thing_bst,
    'TaelinArena.Game.combine_mov_buffs': $TaelinArena$Game$combine_mov_buffs,
    'TaelinArena.Game.speed_multiplier_of': $TaelinArena$Game$speed_multiplier_of,
    'TaelinArena.Game.get_thing_mov': $TaelinArena$Game$get_thing_mov,
    'TaelinArena.Game.get_thing_pad': $TaelinArena$Game$get_thing_pad,
    'TaelinArena.Game.update_buff_dur': $TaelinArena$Game$update_buff_dur,
    'TaelinArena.Game.get_thing_knk': $TaelinArena$Game$get_thing_knk,
    'TaelinArena.Game.get_thing_wei': $TaelinArena$Game$get_thing_wei,
    'F64.gtn': $F64$gtn,
    'TaelinArena.Game.get_thing_fun': $TaelinArena$Game$get_thing_fun,
    'TaelinArena.Game.get_thing_chi': $TaelinArena$Game$get_thing_chi,
    'TaelinArena.Game.set_thing_chi': $TaelinArena$Game$set_thing_chi,
    'F64.V3.get_z': $F64$V3$get_z,
    'F64.V3.get_y': $F64$V3$get_y,
    'TaelinArena.Game.get_thing_mhp': $TaelinArena$Game$get_thing_mhp,
    'TaelinArena.Game.get_thing_die': $TaelinArena$Game$get_thing_die,
    'Bool.or': $Bool$or,
    'List.concat': $List$concat,
    'TaelinArena.fold_with_context': $TaelinArena$fold_with_context,
    'TaelinArena.exec_turn': $TaelinArena$exec_turn,
    'Exports.new': $Exports$new,
    'Exports.TaelinArena': $Exports$TaelinArena,
  };
})();
console.log(module.exports['Exports.TaelinArena']);
➜  Moonad git:(183-TaelinArena) clear                    

➜  Moonad git:(183-TaelinArena) ✗ fmcjs Exports.TaelinArena
{
  'Bit.0': {
    type: { ctor: 'Ref', name: 'Bit' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Bit.1': {
    type: { ctor: 'Ref', name: 'Bit' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  Bit: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'bit',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Bits.0': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'bs',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bs', body: [Function] }
  },
  'Bits.1': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'bs',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bs', body: [Function] }
  },
  'Bits.concat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bits.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bs1', body: [Function] }
  },
  Bits: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'bits',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Bits.from_string': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Bits.inc': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bits', body: [Function] }
  },
  'Bits.nil': {
    type: { ctor: 'Ref', name: 'Bits' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Bits.parse_hex': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Bits.parse_hex.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Bits.reverse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'as', body: [Function] }
  },
  'Bits.reverse.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'as', body: [Function] }
  },
  'Bool.and': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.elim': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'b',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'b', body: [Function] }
  },
  'Bool.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.false': {
    type: { ctor: 'Ref', name: 'Bool' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Bool.false_isnt_true': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'P', expr: [Object], body: [Function] }
  },
  Bool: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'bool',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Bool.if': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Bool.not': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.notf': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.or': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.test.different_elem': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'a',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.true': {
    type: { ctor: 'Ref', name: 'Bool' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Bool.true_isnt_false': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Lam', eras: false, name: 'e', body: [Function] }
  },
  Char: { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'U16' } },
  'Char.hex_value': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'chr', body: [Function] }
  },
  'Char.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'b0', body: [Function] }
  },
  'Char.newline': {
    type: { ctor: 'Ref', name: 'Char' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Char.parse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'str',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Char.parse.type': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Char.quote': {
    type: { ctor: 'Ref', name: 'Char' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Char.tab': {
    type: { ctor: 'Ref', name: 'Char' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Cmp.eql': {
    type: { ctor: 'Ref', name: 'Cmp' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  Cmp: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'cmp',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Cmp.gtn': {
    type: { ctor: 'Ref', name: 'Cmp' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Cmp.ltn': {
    type: { ctor: 'Ref', name: 'Cmp' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Comp.app': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'func', body: [Function] }
  },
  'Comp.fal': {
    type: { ctor: 'Ref', name: 'Comp' },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  Comp: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'comp',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Comp.lam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Comp.let': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Comp.stringify': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'comp', body: [Function] }
  },
  'Comp.tru': {
    type: { ctor: 'Ref', name: 'Comp' },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Comp.var': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  Concat: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Concat.push': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Concat.to_list': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Bind': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    }
  },
  'Core.Comp.check': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.Comp.infer': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.Ctx.ext': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Core.Ctx': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Ctx.nil': {
    type: { ctor: 'Ref', name: 'Core.Ctx' },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Core.Def': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Defs': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Defs.get': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Defs.get_term': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Defs.get_type': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Defs.new': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Core.Defs.set': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Core.Defs.term': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Defs.type': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Read.Reply': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Core.Read.all': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.ann': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'expr', body: [Function] }
  },
  'Core.Read.app': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'func', body: [Function] }
  },
  'Core.Read.arr': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bind', body: [Function] }
  },
  'Core.Read.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Read.def': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.defs': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.defs.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Read.done': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Read.fail': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Read.first_of': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Read': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Core.Read.fst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'txts', body: [Function] }
  },
  'Core.Read.is_name': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'chr', body: [Function] }
  },
  'Core.Read.is_name.set': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.is_space': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'chr', body: [Function] }
  },
  'Core.Read.lam': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.let': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.nam': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Lam', eras: false, name: 'code', body: [Function] }
  },
  'Core.Read.next': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Core.Read.one': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'chr0', body: [Function] }
  },
  'Core.Read.opt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Core.Read.par': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.pip': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'func', body: [Function] }
  },
  'Core.Read.seek': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Read.trm.base': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'nil', expr: [Object], body: [Function] }
  },
  'Core.Read.trm': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.trm.post': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'base', body: [Function] }
  },
  'Core.Read.txt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Core.Read.typ': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.var': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.wrd': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.all.Tuple': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Core.all': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'eras', body: [Function] }
  },
  'Core.ann': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'done', body: [Function] }
  },
  'Core.app': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'eras', body: [Function] }
  },
  'Core.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Core.eql.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  Core: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'core',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Core.if_all': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.is_all': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.is_lam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.lam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'eras', body: [Function] }
  },
  'Core.let': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Core.normalize': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.parse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'code', body: [Function] }
  },
  'Core.parse_defs': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'code', body: [Function] }
  },
  'Core.reduce': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.ref': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Core.stringify': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.stringify.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.to_bits.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.to_uid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.typ': {
    type: { ctor: 'Ref', name: 'Core' },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Core.typecheck': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.typecomp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.typeinfer': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.var': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Debug.log': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Either.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Either: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Either.left': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Either.right': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Empty.absurd': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'x',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  Empty: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'empty',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Equal.apply': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Equal.apply_ind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Equal.chain': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Equal: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Equal.mirror': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Equal.rewrite': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Equal.to': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Example.nat': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Example.tco': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'Let', name: 'n10', expr: [Object], body: [Function] }
  },
  'Example.u32_add': {
    type: { ctor: 'Ref', name: 'U32' },
    term: { ctor: 'Let', name: 'num', expr: [Object], body: [Function] }
  },
  'Exports.TaelinArena': {
    type: { ctor: 'Ref', name: 'Exports' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Exports.add': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Exports.example': {
    type: { ctor: 'Ref', name: 'Exports' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  Exports: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Exports.new': {
    type: { ctor: 'Ref', name: 'Exports' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'F64.0': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.1': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.180': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.2': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.256': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.Boundary': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'boundary',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.Boundary.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pts', body: [Function] }
  },
  'F64.Circle': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'circle',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.Circle.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.Line': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'line',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.Line.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.Segment': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'segment',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.Segment.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.circle_boundary_intersects': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'c', body: [Function] }
  },
  'F64.V3.circle_line_intersection': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'c', body: [Function] }
  },
  'F64.V3.circle_to_circle_hit_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.dot': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'v3',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.V3.get_x': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.get_y': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.get_z': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.len': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.look_at': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.map': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fn', body: [Function] }
  },
  'F64.V3.map_x': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fn', body: [Function] }
  },
  'F64.V3.map_y': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fn', body: [Function] }
  },
  'F64.V3.map_z': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fn', body: [Function] }
  },
  'F64.V3.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'F64.V3.norm': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.point_segment_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'p', body: [Function] }
  },
  'F64.V3.point_segment_sqrdist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'p', body: [Function] }
  },
  'F64.V3.polygon_to_segments.cons': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.V3.polygon_to_segments': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.V3.polygon_to_segments.nil': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.V3.polygon_to_segments.transform': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.V3.rot_90': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.rotate': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.scale': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'k', body: [Function] }
  },
  'F64.V3.sqr_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64._1': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.acos': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.acos' }
  },
  'F64.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.add' }
  },
  'F64.asin': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.asin' }
  },
  'F64.atan': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.atan' }
  },
  'F64.cmp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.cos': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.cos' }
  },
  'F64.div': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.div' }
  },
  'F64.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'F64.exp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.exp' }
  },
  'F64.floor': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  F64: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'f64',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.from_bool': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'b', body: [Function] }
  },
  'F64.gte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.gtn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.if': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'F64.is_between': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.log': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.log' }
  },
  'F64.lte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.max': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.max' }
  },
  'F64.min': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.min' }
  },
  'F64.mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.mod' }
  },
  'F64.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.mul' }
  },
  'F64.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.parse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.parse' }
  },
  'F64.parse_binary': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'F64.pi': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.pow': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.pow' }
  },
  'F64.sin': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.sin' }
  },
  'F64.sqrt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'F64.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.sub' }
  },
  'F64.tan': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.tan' }
  },
  'Function.call': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.comp': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.const': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.curry': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.flip': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Function: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Function.id': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.pipe': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.uncurry': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'IO.end': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  IO: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'IO.inp': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'IO.log': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'JSON.array': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'JSON.bool': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  JSON: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'json',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'JSON.null': {
    type: { ctor: 'Ref', name: 'JSON' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'JSON.number': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'JSON.object': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'JSON.string': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'Lang.Cont': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    }
  },
  'Lang.all': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'Bnd', expr: [Object], body: [Function] }
  },
  'Lang.ann': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.app': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.arr': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.block_comment': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.core': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.enclose': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Lang.is_name': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'c', body: [Function] }
  },
  'Lang.is_space': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'c', body: [Function] }
  },
  'Lang.lam': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.let': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.line_comment': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: {
      ctor: 'Let',
      name: 'not_newline',
      expr: [Object],
      body: [Function]
    }
  },
  'Lang.nam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'allow_empty', body: [Function] }
  },
  'Lang.open': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.par': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.parse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 's',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 's', body: [Function] }
  },
  'Lang.pip': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.pst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.space': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.symbol': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Lang.test': {
    type: { ctor: 'Ref', name: 'String' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.trm': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.typ': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.var': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.whitespace': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'List.all': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.all_true': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'list', body: [Function] }
  },
  'List.any': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.any_true': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'list', body: [Function] }
  },
  'List.append': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.at': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.chunk': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.concat': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.cons': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.drop': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.filter': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.find': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.find_last.aux': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.find_last': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.flatten': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  List: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'List.fold': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.ifind.aux': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.ifind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.imap': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.intercalate': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.is_empty': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.length': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.map': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.nil': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.push': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.reverse.aux': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.reverse': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.show': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.single': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.take': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.to_concat': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.zip_with': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Map: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Map.get': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Map.lookup': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Map.mix': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Map.new': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  query: {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Map.set': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Map.tie': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Maybe.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Maybe.extract': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Maybe: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Maybe.join': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Maybe.map': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Maybe.none': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Maybe.some': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Nat.0': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'Ref', name: 'Nat.zero' }
  },
  'Nat.1': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.10': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.11': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.12': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.13': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.14': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.15': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.16': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.17': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.18': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.19': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.2': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.20': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.21': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.22': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.23': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.24': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.25': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.26': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.27': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.28': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.29': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.3': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.30': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.31': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.32': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.33': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.34': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.35': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.36': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.37': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.38': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.39': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.4': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.40': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.41': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.42': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.43': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.44': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.45': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.46': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.47': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.48': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.49': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.5': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.50': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.51': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.52': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.53': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.54': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.55': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.56': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.57': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.58': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.59': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.6': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.60': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.61': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.62': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.63': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.64': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.7': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.8': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.9': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.apply': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Nat.cmp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Nat.div': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.div_mod.aux': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.div_mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.double': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  Nat: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'nat',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Nat.gte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Nat.gtn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Nat.induction': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'n',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'k', body: [Function] }
  },
  'Nat.is_zero': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.lte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Nat.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Nat.mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.parse_decimal': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Nat.parse_decimal.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Nat.pred': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.show.aux': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.show.digit': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.show': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.show_base': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.solve_for': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'x',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'Nat.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.sub_rem': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.succ': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.sum': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.sum.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.to_base': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'base', body: [Function] }
  },
  'Nat.to_base.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'base', body: [Function] }
  },
  'Nat.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.to_string': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.to_string_base': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'base', body: [Function] }
  },
  'Nat.to_string_decimal': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.zero': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Newtype.elim': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Newtype: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Newtype.val': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'NonEmpty.cons': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'NonEmpty.end': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  NonEmpty: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'NonEmpty.to_list': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Not: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'P',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'P', body: [Function] }
  },
  Or: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  Pair: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Pair.fst': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Pair.new': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Pair.snd': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parsec.Error.Fancy.custom': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.Fancy.fail': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.Fancy': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'E', body: [Function] }
  },
  'Parsec.Error.Item.end_of_input': {
    type: { ctor: 'Ref', name: 'Parsec.Error.Item' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Parsec.Error.Item': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'parser.error.tokens',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Parsec.Error.Item.label': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'xs', body: [Function] }
  },
  'Parsec.Error.Item.show': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'e', body: [Function] }
  },
  'Parsec.Error.Item.tokens': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'xs', body: [Function] }
  },
  'Parsec.Error': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'E', body: [Function] }
  },
  'Parsec.Error.index': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.make_fancy': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.make_trivial': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.merge': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.show': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Reply.eaten_error': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.Reply.eaten_value': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.Reply.empty_error': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.Reply.empty_value': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.Reply': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'S', body: [Function] }
  },
  'Parsec.Reply.to_either': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.State.default': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.State': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'S', body: [Function] }
  },
  'Parsec.State.longest_match': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.State.make': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.any_char': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.ap': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.char': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.choice': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.eof': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.fail': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  Parsec: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'S', body: [Function] }
  },
  'Parsec.get_state': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.label': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.make': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.many': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.many_till': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.map': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.observing': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.optional': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.parse': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.peek': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.plus': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.pure': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.run': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.run_default': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.skip_many': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.take': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.take_while': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.take_while1': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.test1': {
    type: { ctor: 'Ref', name: 'String' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Parsec.then': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.throw': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.token': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.tokens': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.try': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.type': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'S', body: [Function] }
  },
  'Parsec.zero': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parser.Error': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Parser.Error.show': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'e', body: [Function] }
  },
  'Parser.Reply': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Parser.State.default': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'input', body: [Function] }
  },
  'Parser.State': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Parser.any_char': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Parser.ap': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.char': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'c', body: [Function] }
  },
  'Parser.choice': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.eof': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Parser.fail': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Parser: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Parser.label': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.many': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.many_till': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.observing': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.optional': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.parse': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.plus': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.pure': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.run': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.run_default': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.run_either': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.skip_many': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.take': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.take_while': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'f', body: [Function] }
  },
  'Parser.take_while1': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'err', body: [Function] }
  },
  'Parser.then': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.token': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.tokens': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Parser.try': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.type': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Parser.zero': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Research.core_in_core': {
    type: { ctor: 'Ref', name: 'String' },
    term: { ctor: 'Let', name: 'defs', expr: [Object], body: [Function] }
  },
  'Research.Var': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Research.Var.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Research.Ctx': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Research.Ctx.nil': {
    type: { ctor: 'Ref', name: 'Research.Ctx' },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Research.Ctx.ext': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'nam', body: [Function] }
  },
  'Research.Ctx.get': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'chr', body: [Function] }
  },
  'Research.parse_fun.filt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Research.parse_fun.typ0': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Research.parse_fun.typ1': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'nam', body: [Function] }
  },
  'Research.parse_fun.term': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'str',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Research.fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'str',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Research.crazy': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Research.it_works': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Research.equal_mul': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Research.floats': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'Let', name: 'f2', expr: [Object], body: [Function] }
  },
  'Research.get_syntax': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'Let', name: 'pair', expr: [Object], body: [Function] }
  },
  'Research.inference0': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Research.inference1': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'b', body: [Function] }
  },
  'Research.nat_literals': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'a', expr: [Object], body: [Function] }
  },
  'Research.solve': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Research.synthesis0': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Research.synthesis1': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'P',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  Set: {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Set.get': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bits', body: [Function] }
  },
  'Set.new': {
    type: { ctor: 'Ref', name: 'Set' },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Set.set': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bits', body: [Function] }
  },
  Show: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'x',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'Show.msg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'x',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  Sigma: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Sigma.fst': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Sigma.new': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Sigma.snd': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'String.chunk': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'String.concat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'as', body: [Function] }
  },
  'String.cons': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'head', body: [Function] }
  },
  'String.drop': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'String.drop_until': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'cond', body: [Function] }
  },
  'String.drop_while': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'cond', body: [Function] }
  },
  'String.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'String.filter': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'cond', body: [Function] }
  },
  'String.flatten': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'as', body: [Function] }
  },
  String: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'string',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'String.is_empty': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.length': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.nil': {
    type: { ctor: 'Ref', name: 'String' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'String.quote': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.reverse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.reverse.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.single': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'x',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'String.tail': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.take': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'String.take_n.aux': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'String.take_n': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'String.take_while.aux': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'f', body: [Function] }
  },
  'String.take_while': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'f', body: [Function] }
  },
  'String.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.to_list': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.to_set': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.to_stringifier': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Stringifier.concat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  Stringifier: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    }
  },
  'Stringifier.to_string': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  Subset: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Subset.new': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'TaelinArena.Constants.ONE_SEC': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'TaelinArena.Constants.POS_X_KEY': {
    type: { ctor: 'Ref', name: 'Bits' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'TaelinArena.Constants.POS_Y_KEY': {
    type: { ctor: 'Ref', name: 'Bits' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'TaelinArena.Game.ActionId': { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'F64' } },
  'TaelinArena.Game.Buff': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'buff',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Buff.hasted': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Buff.rooted': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Buff.shielded': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Buff.silenced': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Buff.slowed': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Buff.stuned': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Command': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'command',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Command.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  'TaelinArena.Game.Effect.damage': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dmg', body: [Function] }
  },
  'TaelinArena.Game.Effect': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'effect',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Effect.haste': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.heal': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'lif', body: [Function] }
  },
  'TaelinArena.Game.Effect.impulse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'mag', body: [Function] }
  },
  'TaelinArena.Game.Effect.repulse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'mag', body: [Function] }
  },
  'TaelinArena.Game.Effect.root': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.shield': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.silence': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.slow': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.stun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.teleport': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'to_pos', body: [Function] }
  },
  'TaelinArena.Game.Game': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'game',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Game.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'stage', body: [Function] }
  },
  'TaelinArena.Game.Hit': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'hit',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Hit.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'eff', body: [Function] }
  },
  'TaelinArena.Game.Hitbox.cbox': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'rad', body: [Function] }
  },
  'TaelinArena.Game.Hitbox': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'hitbox',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Hitbox.nbox': {
    type: { ctor: 'Ref', name: 'TaelinArena.Game.Hitbox' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'TaelinArena.Game.Hitbox.pbox': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pts', body: [Function] }
  },
  'TaelinArena.Game.Input.cmsg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'txt', body: [Function] }
  },
  'TaelinArena.Game.Input': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'input',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Input.key0': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.key1': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.key2': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.key3': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.key4': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.key5': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.sdir': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dir', body: [Function] }
  },
  'TaelinArena.Game.Light': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'light',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Light.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.ModelId': { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'F64' } },
  'F64.Ordering.EQ': {
    type: { ctor: 'Ref', name: 'F64.Ordering' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'F64.Ordering.GT': {
    type: { ctor: 'Ref', name: 'F64.Ordering' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'F64.Ordering.LT': {
    type: { ctor: 'Ref', name: 'F64.Ordering' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'F64.Ordering': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'F64.ordering',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.PlayerId': { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'F64' } },
  'TaelinArena.Game.SideId': { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'F64' } },
  'TaelinArena.Game.Thing': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'thing',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Thing.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fun', body: [Function] }
  },
  'TaelinArena.Game.TxFunction': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.animate': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.animate_between': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.animate_die': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.animate_with_blink': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.at_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.at_max_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.at_min_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.between_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.blink': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.cast': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.combine_mov_buffs': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'buff', body: [Function] }
  },
  'F64.compare_numbers': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'TaelinArena.Game.create_at': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.dash': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.die': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.end_thing': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.get_position_by_pid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  'TaelinArena.Game.get_stt_value': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.get_stt_value_v3': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.get_thing_act': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_box': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_bst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_buf': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_by_pid.cond': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  'TaelinArena.Game.get_thing_by_pid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  'TaelinArena.Game.get_thing_chi': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_die': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_dir': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_dmg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_hit': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_knk': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_lit': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_mhp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_mid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_mov': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_nam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_pad': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_pid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_pos': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_rst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_sid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_stt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_tik': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_trg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_vel': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_wei': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.handle_shields': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'hit_dmg',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'hit_dmg', body: [Function] }
  },
  'TaelinArena.Game.has_shields': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.illumine': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.init_act': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.is_rooted': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.is_silenced': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.is_stunned': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.is_using_buff': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.is_walking': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'this', body: [Function] }
  },
  'TaelinArena.Game.map_stage': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fn', body: [Function] }
  },
  'TaelinArena.Game.map_stt_key': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.move.fmc': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.reset': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.set_stt_value_v3': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.set_thing_act': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_box': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_bst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_buf': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_chi': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_die': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_dir': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_dmg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_hit': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_knk': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_lit': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_mhp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_mid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_mov': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_nam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_pad': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_pid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_pos': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_rst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_sid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_stt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_tik': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_trg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_vel': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_wei': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.spawn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.speed_multiplier_of': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.targ_dir': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.update_buff': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.update_buff_dur': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.use_shields': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'buff',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'buff', body: [Function] }
  },
  'TaelinArena.Game.with_thing.effect': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  'TaelinArena.Game.with_thing': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  BENFIX_BLOCK_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_021: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_HURT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_CASTING_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_CASTING_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_STEEL_TORNADO_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_STEEL_TORNADO_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_STEEL_TORNADO_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_STEEL_TORNADO_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DEFENSE_MODE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DEFENSE_MODE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DEFENSE_MODE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_HURT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_021: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_022: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_023: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_024: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_WALK_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_WALK_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_WALK_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_WALK_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_HURT_WITHOUT_SABER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_HURT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_WITHOUT_SABER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_WITHOUT_SABER_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_WITHOUT_SABER_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_WITHOUT_SABER_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_WITHOUT_SABER_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_WITHOUT_SABER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_WITHOUT_SABER_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_WITHOUT_SABER_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_HALO_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_PROJECTILE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_021: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_022: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_023: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_024: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_025: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_026: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_027: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_028: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_PILLAR_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_PILLAR_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_PILLAR_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_PILLAR_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_PILLAR_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HURT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_POT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_021: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_022: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_023: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_024: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_025: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_026: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_027: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_028: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_POSED_BACKUP: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  POSTE_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_021: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_022: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_023: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  WALL_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'TaelinArena.Thing.bleskape_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Thing.poste_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Thing.puddledmg_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Thing.puddleheak_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Thing.punchingbag_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Thing.wall_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.collide_with': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'a_pos',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a_pos', body: [Function] }
  },
  'TaelinArena.exec_command': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'cmd', body: [Function] }
  },
  'TaelinArena.exec_turn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'gm', body: [Function] }
  },
  'TaelinArena.fold_with_context': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'TaelinArena.interact_with': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'this',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'this', body: [Function] }
  },
  Text: { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'String' } },
  The: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'The.term': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'U16.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.and': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.div': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  U16: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'u16',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'U16.gte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.gtn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.inc': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.lte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.or': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.parse_hex': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'U16.pow': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.shl': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U16.shr': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U16.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.to_nat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.xor': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.0': {
    type: { ctor: 'Ref', name: 'U32' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'U32.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.and': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.concat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.div': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  U32: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'u32',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'U32.gte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.gtn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.hash2': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.inc': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.lte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.or': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.parse_hex': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'U32.pow': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.shl': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U32.shr': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U32.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.to_nat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.xor': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.0': {
    type: { ctor: 'Ref', name: 'U64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'U64.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.and': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.div': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  U64: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'u64',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'U64.gte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.gtn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.inc': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.lte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.mix.const0': {
    type: { ctor: 'Ref', name: 'U64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'U64.mix.const1': {
    type: { ctor: 'Ref', name: 'U64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'U64.mix': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'h', body: [Function] }
  },
  'U64.mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.or': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.parse_hex': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'U64.pow': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.shl': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U64.shr': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U64.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.to_nat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.xor': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'UFind.new': {
    type: { ctor: 'Ref', name: 'UFind' },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'UFind.equivalent': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'uf', body: [Function] }
  },
  'UFind.find': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'B',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'B', body: [Function] }
  },
  UFind: {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'UFind.new_node': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'uf', body: [Function] }
  },
  'UFind.union': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'uf', body: [Function] }
  },
  UNode: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'unode_value',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'UNode.link': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'parent', body: [Function] }
  },
  'UNode.root': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'rank', body: [Function] }
  },
  Unit: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'unit',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Unit.new': {
    type: { ctor: 'Ref', name: 'Unit' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Unit.show': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'u', body: [Function] }
  },
  'Word.0': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.1': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.add.aux': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.add': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.and': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.and' }
  },
  'Word.cmp.aux': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.cmp': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.concat': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'a_size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'a_size', body: [Function] }
  },
  'Word.div': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.div' }
  },
  'Word.drop': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.eql': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  Word: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'size', body: [Function] }
  },
  'Word.from_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'size', body: [Function] }
  },
  'Word.gte': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.gtn': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.inc': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.lte': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.ltn': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.mod': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.mod' }
  },
  'Word.mul': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.mul' }
  },
  'Word.nil': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Word.or': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.or' }
  },
  'Word.parse_hex': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'size', body: [Function] }
  },
  'Word.pow': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.pow' }
  },
  'Word.pred': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.shift_left': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.shift_left' }
  },
  'Word.shift_right': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.shift_right' }
  },
  'Word.sub': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.sub' }
  },
  'Word.to_bits': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.to_nat': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.to_nat.go': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.xor': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.xor' }
  },
  hello: {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'uname', expr: [Object], body: [Function] }
  }
}
module.exports = (function (){
  var F64 = new Float64Array(1);
  var U32 = new Uint32Array(F64.buffer);
  var F64_get = (x,i)=>((F64[0]=x),(i<32?(U32[0]>>>i)&1:(U32[1]>>>(i-32)&1)));
  var F64_set = (x,i)=>((F64[0]=x),(i<32?(U32[0]=U32[0]|(1<<i)):(U32[1]=U32[1]|(1<<(i-32)))),F64[0]);
  var inst_unit = x=>x(1);
  var elim_unit = x=>v=>v;
  var inst_bool = x=>x(true)(false);
  var elim_bool = x=>t=>f=>x?t:f;
  var inst_nat = x=>x(0n)(p=>1n+p);
  var elim_nat = x=>z=>s=>x===0n?z:s(x-1n);
  var inst_bits = x=>x('')(p=>p+'0')(p=>p+'1');
  var elim_bits = x=>be=>b0=>b1=>(x.length?(x[x.length-1]==='0'?b0(x.slice(0,-1)):b1(x.slice(0,-1))):be);
  var inst_u16 = x=>x(w=>(function R(x,k){return x(0)(p=>R(p,k*2))(p=>k+R(p,k*2))})(w,1));
  var elim_u16 = x=>u=>u((function R(i){return we=>w0=>w1=>i===16?we:((x>>>i)&1?w1:w0)(R(i+1))})(0));
  var inst_u32 = x=>x(w=>(function R(x,k){return x(0)(p=>R(p,k*2))(p=>k+R(p,k*2))})(w,1));
  var elim_u32 = x=>u=>u((function R(i){return we=>w0=>w1=>i===32?we:((x>>>i)&1?w1:w0)(R(i+1))})(0));
  var inst_u64 = x=>x(w=>(function R(x,k){return x(0n)(p=>R(p,k*2n))(p=>k+R(p,k*2n))})(w,1n));
  var elim_u64 = x=>u=>u((function R(i){return we=>w0=>w1=>i===64n?we:((x>>i)&1n?w1:w0)(R(i+1n))})(0n));
  var inst_f64 = x=>x(w=>(function R(x,i){return x(0)(p=>R(p,i+1))(p=>F64_set(R(p,i+1),i))})(w,0));
  var elim_f64 = x=>u=>u((function R(i){return we=>w0=>w1=>i===64?we:(F64_get(x,i)?w1:w0)(R(i+1))})(0));
  var inst_string = x=>x('')(h=>t=>String.fromCharCode(h)+t);
  var elim_string = x=>n=>c=>x===''?n:c(x.charCodeAt(0))(x.slice(1));
  var $Exports$add = ($x=>($xs=>($new=>($add=>$add($x)($xs($new)($add))))));
  var $List$nil = ($nil=>($cons=>$nil));
  var $List$cons = ($head=>($tail=>($nil=>($cons=>$cons($head)($tail)))));
  var $List$fold = ($nil=>($cons=>($list=>$list($nil)(($x=>($xs=>$cons($x)($List$fold($nil)($cons)($xs))))))));
  var $List = ($A=>(void 0));
  var $F64$atan = a=>Math.atan(a);
  var $F64$mul = a=>b=>a*b;
  var $F64$cos = a=>Math.cos(a);
  var $F64$sin = a=>Math.sin(a);
  var $F64$sub = a=>b=>a-b;
  var $F64$add = a=>b=>a+b;
  var $F64$V3$new = ($x=>($y=>($z=>($new=>$new($x)($y)($z)))));
  var $F64$V3$add = ($a=>($b=>$a(($a$x=>($a$y=>($a$z=>$b(($b$x=>($b$y=>($b$z=>($c$x=>($c$y=>($c$z=>$F64$V3$new($c$x)($c$y)($c$z))($F64$add($a$z)($b$z)))($F64$add($a$y)($b$y)))($F64$add($a$x)($a$x))))))))))));
  var $F64$V3$polygon_to_segments$transform = ($pos=>($dir=>($pnt=>$pnt(($pnt$x=>($pnt$y=>($pnt$z=>$dir(($dir$x=>($dir$y=>($dir$z=>($a=>($pnt_x_times_cos_a=>($pnt_y_times_sin_a=>($pnt_x_times_sin_a=>($pnt_y_times_cos_a=>($x=>($y=>$F64$V3$add($pos)($F64$V3$new($x)($y)($pnt$z)))($F64$add($pnt_x_times_sin_a)($pnt_y_times_cos_a)))($F64$sub($pnt_x_times_cos_a)($pnt_y_times_sin_a)))($F64$mul($pnt$y)($F64$cos($a))))($F64$mul($pnt$x)($F64$sin($a))))($F64$mul($pnt$y)($F64$sin($a))))($F64$mul($pnt$x)($F64$cos($a))))($F64$atan($dir$y)($dir$x)))))))))))));
  var $F64$Segment$new = ($a=>($b=>($new=>$new($a)($b))));
  var $F64$V3$polygon_to_segments$nil = ($pos=>($dir=>($pt_a=>($pt_0=>$pt_0($List$nil)(($pt_0$value=>$pt_a($List$nil)(($pt_a$value=>($p0=>($p1=>($sg=>$List$cons($sg)($List$nil))($F64$Segment$new($p0)($p1)))($F64$V3$polygon_to_segments$transform($pos)($dir)($pt_0$value)))($F64$V3$polygon_to_segments$transform($pos)($dir)($pt_a$value))))))))));
  var $Maybe$some = ($value=>($=>($some=>$some($value))));
  var $Maybe = ($A=>(void 0));
  var $F64$V3$polygon_to_segments$cons = ($pos=>($dir=>($pt_b=>($segs=>($pt_a=>($pt_0=>$pt_a($segs($Maybe$some($pt_b))($Maybe$some($pt_b)))(($pt_a$value=>($pt_0=>($p0=>($p1=>($sg=>$List$cons($sg)($segs($Maybe$some($pt_b))($pt_0)))($F64$Segment$new($p0)($p1)))($F64$V3$polygon_to_segments$transform($pos)($dir)($pt_b)))($F64$V3$polygon_to_segments$transform($pos)($dir)($pt_a$value)))($pt_0($Maybe$some($pt_b))(($pt_0$value=>$pt_0)))))))))));
  var $Maybe$none = ($none=>($=>$none));
  var $F64$V3$polygon_to_segments = ($pos=>($dir=>($pts=>$List$fold($F64$V3$polygon_to_segments$nil($pos)($dir))($F64$V3$polygon_to_segments$cons($pos)($dir))($pts)($Maybe$none)($Maybe$none))));
  var $Cmp$ltn = ($ltn=>($eql=>($gtn=>$ltn)));
  var $Cmp$gtn = ($ltn=>($eql=>($gtn=>$gtn)));
  var $Word$cmp$aux = ($a=>($b=>($c=>$a(($b=>$c))(($a$pred=>($b=>$b(($a$pred=>$c))(($b$pred=>($a$pred=>$Word$cmp$aux($a$pred)($b$pred)($c))))(($b$pred=>($a$pred=>$Word$cmp$aux($a$pred)($b$pred)($Cmp$ltn))))($a$pred))))(($a$pred=>($b=>$b(($a$pred=>$c))(($b$pred=>($a$pred=>$Word$cmp$aux($a$pred)($b$pred)($Cmp$gtn))))(($b$pred=>($a$pred=>$Word$cmp$aux($a$pred)($b$pred)($c))))($a$pred))))($b))));
  var $Cmp$eql = ($ltn=>($eql=>($gtn=>$eql)));
  var $Word$cmp = ($a=>($b=>$Word$cmp$aux($a)($b)($Cmp$eql)));
  var $Bool$false = inst_bool(($t=>($f=>$f)));
  var $Bool$true = inst_bool(($t=>($f=>$t)));
  var $Word$eql = ($a=>($b=>$Word$cmp($a)($b)($Bool$false)($Bool$true)($Bool$false)));
  var $Nat$succ = ($n=>inst_nat(($z=>($s=>$s($n)))));
  var $Nat$zero = inst_nat(($z=>($s=>$z)));
  var $Nat$0 = $Nat$zero;
  var $Nat$1 = $Nat$succ($Nat$0);
  var $Nat$2 = $Nat$succ($Nat$1);
  var $Nat$3 = $Nat$succ($Nat$2);
  var $Nat$4 = $Nat$succ($Nat$3);
  var $Nat$5 = $Nat$succ($Nat$4);
  var $Nat$6 = $Nat$succ($Nat$5);
  var $Nat$7 = $Nat$succ($Nat$6);
  var $Nat$8 = $Nat$succ($Nat$7);
  var $Nat$9 = $Nat$succ($Nat$8);
  var $Nat$10 = $Nat$succ($Nat$9);
  var $Nat$11 = $Nat$succ($Nat$10);
  var $Nat$12 = $Nat$succ($Nat$11);
  var $Nat$13 = $Nat$succ($Nat$12);
  var $Nat$14 = $Nat$succ($Nat$13);
  var $Nat$15 = $Nat$succ($Nat$14);
  var $Nat$16 = $Nat$succ($Nat$15);
  var $Nat$17 = $Nat$succ($Nat$16);
  var $Nat$18 = $Nat$succ($Nat$17);
  var $Nat$19 = $Nat$succ($Nat$18);
  var $Nat$20 = $Nat$succ($Nat$19);
  var $Nat$21 = $Nat$succ($Nat$20);
  var $Nat$22 = $Nat$succ($Nat$21);
  var $Nat$23 = $Nat$succ($Nat$22);
  var $Nat$24 = $Nat$succ($Nat$23);
  var $Nat$25 = $Nat$succ($Nat$24);
  var $Nat$26 = $Nat$succ($Nat$25);
  var $Nat$27 = $Nat$succ($Nat$26);
  var $Nat$28 = $Nat$succ($Nat$27);
  var $Nat$29 = $Nat$succ($Nat$28);
  var $Nat$30 = $Nat$succ($Nat$29);
  var $Nat$31 = $Nat$succ($Nat$30);
  var $Nat$32 = $Nat$succ($Nat$31);
  var $Nat$33 = $Nat$succ($Nat$32);
  var $Nat$34 = $Nat$succ($Nat$33);
  var $Nat$35 = $Nat$succ($Nat$34);
  var $Nat$36 = $Nat$succ($Nat$35);
  var $Nat$37 = $Nat$succ($Nat$36);
  var $Nat$38 = $Nat$succ($Nat$37);
  var $Nat$39 = $Nat$succ($Nat$38);
  var $Nat$40 = $Nat$succ($Nat$39);
  var $Nat$41 = $Nat$succ($Nat$40);
  var $Nat$42 = $Nat$succ($Nat$41);
  var $Nat$43 = $Nat$succ($Nat$42);
  var $Nat$44 = $Nat$succ($Nat$43);
  var $Nat$45 = $Nat$succ($Nat$44);
  var $Nat$46 = $Nat$succ($Nat$45);
  var $Nat$47 = $Nat$succ($Nat$46);
  var $Nat$48 = $Nat$succ($Nat$47);
  var $Nat$49 = $Nat$succ($Nat$48);
  var $Nat$50 = $Nat$succ($Nat$49);
  var $Nat$51 = $Nat$succ($Nat$50);
  var $Nat$52 = $Nat$succ($Nat$51);
  var $Nat$53 = $Nat$succ($Nat$52);
  var $Nat$54 = $Nat$succ($Nat$53);
  var $Nat$55 = $Nat$succ($Nat$54);
  var $Nat$56 = $Nat$succ($Nat$55);
  var $Nat$57 = $Nat$succ($Nat$56);
  var $Nat$58 = $Nat$succ($Nat$57);
  var $Nat$59 = $Nat$succ($Nat$58);
  var $Nat$60 = $Nat$succ($Nat$59);
  var $Nat$61 = $Nat$succ($Nat$60);
  var $Nat$62 = $Nat$succ($Nat$61);
  var $Nat$63 = $Nat$succ($Nat$62);
  var $Nat$64 = $Nat$succ($Nat$63);
  var $F64$eql = ($x=>($y=>elim_f64($x)(($x$word=>elim_f64($y)(($y$word=>$Word$eql($x$word)($y$word)))))));
  var $Bool$and = a=>b=>a&&b;
  var $F64$V3$eql = ($a=>($b=>$a(($a$x=>($a$y=>($a$z=>$b(($b$x=>($b$y=>($b$z=>($same_x=>($same_y=>($same_z=>$Bool$and($same_x)($Bool$and($same_y)($same_z)))($F64$eql($a$z)($b$z)))($F64$eql($a$y)($b$y)))($F64$eql($a$x)($b$x))))))))))));
  var $F64$V3$sub = ($a=>($b=>$a(($a$x=>($a$y=>($a$z=>$b(($b$x=>($b$y=>($b$z=>($c$x=>($c$y=>($c$z=>$F64$V3$new($c$x)($c$y)($c$z))($F64$sub($a$z)($b$z)))($F64$sub($a$y)($b$y)))($F64$sub($a$x)($a$x))))))))))));
  var $F64$new = ($a=>inst_f64(($f64=>$f64($a))));
  var $Word = ($size=>(void 0));
  var $Word$nil = ($we=>($w0=>($w1=>$we)));
  var $Word$0 = ($wo=>($we=>($w0=>($w1=>$w0($wo)))));
  var $Bits$nil = inst_bits(($be=>($b0=>($b1=>$be))));
  var $Word$1 = ($wo=>($we=>($w0=>($w1=>$w1($wo)))));
  var $Word$from_bits = ($size=>($bits=>elim_nat($size)($Word$nil)(($size$pred=>elim_bits($bits)($Word$0($Word$from_bits($size$pred)($Bits$nil)))(($bits$pred=>$Word$0($Word$from_bits($size$pred)($bits$pred))))(($bits$pred=>$Word$1($Word$from_bits($size$pred)($bits$pred))))))));
  var $U16$eql = a=>b=>a===b;
  var $Char$parse$type = ($str=>(void 0));
  var $Unit$new = inst_unit(($unit=>$unit));
  var $Char$parse = ($str=>elim_string($str)($Unit$new)(($str$head=>($str$tail=>$str$head))));
  var $String$cons = ($head=>($tail=>inst_string(($strnil=>($strcons=>$strcons($head)($tail))))));
  var $U16$new = ($a=>inst_u16(($u16=>$u16($a))));
  var $Char$new = ($b0=>($b1=>($b2=>($b3=>($b4=>($b5=>($b6=>($b7=>($b8=>($b9=>($bA=>($bB=>($bC=>($bD=>($bE=>($bF=>($kF=>($kE=>($kD=>($kC=>($kB=>($kA=>($k9=>($k8=>($k7=>($k6=>($k5=>($k4=>($k3=>($k2=>($k1=>($k0=>($k_=>$U16$new($k0($k1($k2($k3($k4($k5($k6($k7($k8($k9($kA($kB($kC($kD($kE($kF($k_))))))))))))))))))($Word$nil))($bF($Word$0)($Word$1)))($bE($Word$0)($Word$1)))($bD($Word$0)($Word$1)))($bC($Word$0)($Word$1)))($bB($Word$0)($Word$1)))($bA($Word$0)($Word$1)))($b9($Word$0)($Word$1)))($b8($Word$0)($Word$1)))($b7($Word$0)($Word$1)))($b6($Word$0)($Word$1)))($b5($Word$0)($Word$1)))($b4($Word$0)($Word$1)))($b3($Word$0)($Word$1)))($b2($Word$0)($Word$1)))($b1($Word$0)($Word$1)))($b0($Word$0)($Word$1))))))))))))))))));
  var $Bit$0 = ($o=>($i=>$o));
  var $Bit$1 = ($o=>($i=>$i));
  var $String$nil = inst_string(($strnil=>($strcons=>$strnil)));
  var $Bits$1 = ($bs=>inst_bits(($be=>($b0=>($b1=>$b1($bs))))));
  var $Bits$0 = ($bs=>inst_bits(($be=>($b0=>($b1=>$b0($bs))))));
  var $Bits$from_string = ($str=>elim_string($str)($Bits$nil)(($str$head=>($str$tail=>elim_bool($U16$eql($str$head)($Char$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$nil))))(($=>$Bits$1($Bits$from_string($str$tail))))(($=>$Bits$0($Bits$from_string($str$tail))))($Unit$new)))));
  var $F64$parse_binary = ($str=>$F64$new($Word$from_bits($Nat$64)($Bits$from_string($str))));
  var $F64$0 = $F64$parse_binary($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  var $F64$div = a=>b=>a/b;
  var $F64$1 = $F64$parse_binary($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  var $F64$pow = a=>b=>a**b;
  var $F64$V3$len = ($v=>$v(($v$x=>($v$y=>($v$z=>($sqr=>($sqr=>($sqr=>($sqr=>($expo=>($sqr=>$sqr)($F64$pow($sqr)($expo)))($F64$div($F64$1)($F64$add($F64$1)($F64$1))))($F64$add($sqr)($F64$mul($v$z)($v$z))))($F64$add($sqr)($F64$mul($v$y)($v$y))))($F64$add($sqr)($F64$mul($v$x)($v$x))))($F64$0))))));
  var $F64$V3$norm = ($v=>$v(($v$x=>($v$y=>($v$z=>($len=>($new_x=>($new_y=>($new_z=>$F64$V3$new($new_x)($new_y)($new_z))($F64$div($v$z)($len)))($F64$div($v$y)($len)))($F64$div($v$x)($len)))($F64$V3$len($v)))))));
  var $F64$V3$look_at = ($a=>($b=>($c=>$a(($a$x=>($a$y=>($a$z=>$b(($a$x=>($a$y=>($a$z=>$c(($a$x=>($a$y=>($a$z=>($a_eql_b=>($diff=>($normdiff=>elim_bool($a_eql_b)($normdiff)($c))($F64$V3$norm($diff)))($F64$V3$sub($b)($a)))($F64$V3$eql($a)($b)))))))))))))))));
  var $List$find = ($cond=>($xs=>$xs($Maybe$none)(($head=>($tail=>elim_bool($cond($head))($Maybe$some($head))($List$find($cond)($tail)))))));
  var $TaelinArena$Game$get_thing_pid = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$pid))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_by_pid$cond = ($pid=>($thi=>($thi$pid=>$F64$eql($pid)($thi$pid))($TaelinArena$Game$get_thing_pid($thi))));
  var $TaelinArena$Game$get_thing_by_pid = ($pid=>($gm=>$gm(($gm$stage=>$List$find($TaelinArena$Game$get_thing_by_pid$cond($pid))($gm$stage)))));
  var $TaelinArena$Game$get_thing_pos = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$pos))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_position_by_pid = ($pid=>($gm=>$TaelinArena$Game$get_thing_by_pid($pid)($gm)($F64$V3$new($F64$0)($F64$0)($F64$0))(($found=>$TaelinArena$Game$get_thing_pos($found)))));
  var $List$map = ($fn=>($list=>$list($List$nil)(($list$head=>($list$tail=>$List$cons($fn($list$head))($List$map($fn)($list$tail)))))));
  var $TaelinArena$Game$Game$new = ($stage=>($new=>$new($stage)));
  var $TaelinArena$Game$map_stage = ($fn=>($gm=>$gm(($gm$stage=>($new_stage=>$TaelinArena$Game$Game$new($new_stage))($List$map($fn)($gm$stage))))));
  var $TaelinArena$Game$Command$new = ($pid=>($inp=>($new=>$new($pid)($inp))));
  var $TaelinArena$Game$Input$sdir = ($dir=>($sdir=>($key0=>($key1=>($key2=>($key3=>($key4=>($key5=>($cmsg=>$sdir($dir))))))))));
  var $TaelinArena$Game$Input$key0 = ($pos=>($sdir=>($key0=>($key1=>($key2=>($key3=>($key4=>($key5=>($cmsg=>$key0($pos))))))))));
  var $TaelinArena$Game$Input$key1 = ($pos=>($sdir=>($key0=>($key1=>($key2=>($key3=>($key4=>($key5=>($cmsg=>$key1($pos))))))))));
  var $TaelinArena$Game$Input$key2 = ($pos=>($sdir=>($key0=>($key1=>($key2=>($key3=>($key4=>($key5=>($cmsg=>$key2($pos))))))))));
  var $TaelinArena$Game$Input$key3 = ($pos=>($sdir=>($key0=>($key1=>($key2=>($key3=>($key4=>($key5=>($cmsg=>$key3($pos))))))))));
  var $TaelinArena$Game$Input$key4 = ($pos=>($sdir=>($key0=>($key1=>($key2=>($key3=>($key4=>($key5=>($cmsg=>$key4($pos))))))))));
  var $TaelinArena$Game$Input$key5 = ($pos=>($sdir=>($key0=>($key1=>($key2=>($key3=>($key4=>($key5=>($cmsg=>$key5($pos))))))))));
  var $TaelinArena$Game$get_thing_buf = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$buf))))))))))))))))))))))))))));
  var $TaelinArena$Game$is_silenced = ($self=>($self$buf=>($is_silenced=>($found_buf=>$found_buf($Bool$false)(($value=>$Bool$true)))($List$find($is_silenced)($self$buf)))(($buff=>$buff(($buff$dur=>($buff$val=>$Bool$false)))(($buff$dur=>($buff$val=>$Bool$false)))(($buff$dur=>($buff$val=>$Bool$false)))(($buff$dur=>$Bool$true))(($buff$dur=>$Bool$false))(($buff$dur=>$Bool$true)))))($TaelinArena$Game$get_thing_buf($self)));
  var $TaelinArena$Game$is_stunned = ($self=>($self$buf=>($is_stunned=>($found_buf=>$found_buf($Bool$false)(($value=>$Bool$true)))($List$find($is_stunned)($self$buf)))(($buff=>$buff(($buff$dur=>($buff$val=>$Bool$false)))(($buff$dur=>($buff$val=>$Bool$false)))(($buff$dur=>($buff$val=>$Bool$false)))(($buff$dur=>$Bool$false))(($buff$dur=>$Bool$false))(($buff$dur=>$Bool$true)))))($TaelinArena$Game$get_thing_buf($self)));
  var $TaelinArena$Game$get_thing_act = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$act))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_trg = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$trg))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_tik = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$tik))))))))))))))))))))))))))));
  var $TaelinArena$Game$Thing$new = ($fun=>($pid=>($mid=>($act=>($sid=>($stt=>($nam=>($lit=>($tik=>($pos=>($mov=>($bst=>($pad=>($dir=>($trg=>($vel=>($box=>($wei=>($mhp=>($dmg=>($knk=>($buf=>($chi=>($hit=>($rst=>($die=>($new=>$new($fun)($pid)($mid)($act)($sid)($stt)($nam)($lit)($tik)($pos)($mov)($bst)($pad)($dir)($trg)($vel)($box)($wei)($mhp)($dmg)($knk)($buf)($chi)($hit)($rst)($die))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_act = ($thi=>($new_act=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($new_act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $Bool$eql = ($a=>($b=>elim_bool($a)(elim_bool($b)($Bool$true)($Bool$false))(elim_bool($b)($Bool$false)($Bool$true))));
  var $Bool$if = x=>ct=>cf=>x?ct:cf;
  var $TaelinArena$Game$set_thing_trg = ($thi=>($new_trg=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($new_trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_tik = ($thi=>($new_tik=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($new_tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$init_act = ($self=>($new_act=>($new_trg=>($self$act=>($self$trg=>($self$tik=>($act_eql_0=>($self=>($self=>($self=>$self)($TaelinArena$Game$set_thing_tik($self)($Bool$if($act_eql_0)($F64$0)($self$tik))))($TaelinArena$Game$set_thing_trg($self)($Bool$if($act_eql_0)($new_trg)($self$trg))))($TaelinArena$Game$set_thing_act($self)($Bool$if($act_eql_0)($new_act)($self$act))))($F64$eql($self$act)($F64$0)))($TaelinArena$Game$get_thing_tik($self)))($TaelinArena$Game$get_thing_trg($self)))($TaelinArena$Game$get_thing_act($self)))));
  var $TaelinArena$Game$set_thing_pad = ($thi=>($new_pad=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($new_pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $F64$2 = $F64$parse_binary($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  var $F64$parse = $F64$parse;
  var $TaelinArena$Game$with_thing$effect = ($pid=>($fn=>($thi=>($thi$pid=>elim_bool($F64$eql($pid)($thi$pid))($fn($thi))($thi))($TaelinArena$Game$get_thing_pid($thi)))));
  var $TaelinArena$Game$with_thing = ($pid=>($fn=>($gm=>$TaelinArena$Game$map_stage($TaelinArena$Game$with_thing$effect($pid)($fn))($gm))));
  var $TaelinArena$exec_command = ($cmd=>($gm=>$cmd(($cmd$pid=>($cmd$inp=>($fn=>$TaelinArena$Game$with_thing($cmd$pid)($fn)($gm))(($this=>($inp=>($is_silenced=>($is_stunned=>elim_bool($is_stunned)($inp(($sdir$dir=>$TaelinArena$Game$init_act($this)($F64$0)($sdir$dir)))(($key0$pos=>$this))(($key1$pos=>$this))(($key2$pos=>$this))(($key3$pos=>$this))(($key4$pos=>$this))(($key5$pos=>$this))(($cmsg$txt=>$this)))(elim_bool($is_silenced)($inp(($sdir$dir=>$TaelinArena$Game$set_thing_pad($this)($sdir$dir)))(($key0$pos=>$this))(($key1$pos=>$this))(($key2$pos=>$this))(($key3$pos=>$this))(($key4$pos=>$this))(($key5$pos=>$this))(($cmsg$txt=>$this)))($inp(($sdir$dir=>$TaelinArena$Game$set_thing_pad($this)($sdir$dir)))(($key0$pos=>$TaelinArena$Game$init_act($this)($F64$1)($key0$pos)))(($key1$pos=>$TaelinArena$Game$init_act($this)($F64$2)($key1$pos)))(($key2$pos=>$TaelinArena$Game$init_act($this)($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$1)($Bit$1))($String$nil)))($key2$pos)))(($key3$pos=>$TaelinArena$Game$init_act($this)($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$0)($Bit$0))($String$nil)))($key3$pos)))(($key4$pos=>$TaelinArena$Game$init_act($this)($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$0)($Bit$1))($String$nil)))($key4$pos)))(($key5$pos=>$TaelinArena$Game$init_act($this)($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$1)($Bit$0))($String$nil)))($key5$pos)))(($cmsg$txt=>$this)))))($TaelinArena$Game$is_stunned($this)))($TaelinArena$Game$is_silenced($this)))($cmd$inp))))))));
  var $TaelinArena$Game$set_thing_fun = ($thi=>($new_fun=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($new_fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_sid = ($thi=>($new_sid=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($new_sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_pid = ($thi=>($new_pid=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($new_pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_pos = ($thi=>($new_pos=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($new_pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_nam = ($thi=>($new_nam=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($new_nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_dir = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$dir))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_box = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$box))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_sid = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$sid))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_hit = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$hit))))))))))))))))))))))))))));
  var $F64$sqrt = ($n=>$F64$pow($n)($F64$div($F64$1)($F64$2)));
  var $F64$V3$sqr_dist = ($a=>($b=>$a(($a$x=>($a$y=>($a$z=>$b(($b$x=>($b$y=>($b$z=>($two=>($x_diff=>($y_diff=>($z_diff=>$F64$add($x_diff)($F64$add($y_diff)($z_diff)))($F64$pow($F64$sub($a$z)($b$z))($two)))($F64$pow($F64$sub($a$y)($b$y))($two)))($F64$pow($F64$sub($a$x)($b$x))($two)))($F64$add($F64$1)($F64$1))))))))))));
  var $F64$V3$dist = ($a=>($b=>$F64$sqrt($F64$V3$sqr_dist($a)($b))));
  var $Word$ltn = ($a=>($b=>$Word$cmp($a)($b)($Bool$true)($Bool$false)($Bool$false)));
  var $F64$cmp = ($a=>($b=>elim_f64($a)(($a$word=>elim_f64($b)(($b$word=>elim_bool($F64$eql($a)($b))($Cmp$eql)(elim_bool($Word$ltn($a$word)($b$word))($Cmp$ltn)($Cmp$gtn))))))));
  var $F64$ltn = ($a=>($b=>$F64$cmp($a)($b)($Bool$true)($Bool$false)($Bool$false)));
  var $F64$V3$scale = ($k=>($v=>$v(($v$x=>($v$y=>($v$z=>($new_x=>($new_y=>($new_z=>$F64$V3$new($new_x)($new_y)($new_z))($F64$mul($k)($v$z)))($F64$mul($k)($v$y)))($F64$mul($k)($v$x))))))));
  var $F64$max = $F64$max;
  var $F64$min = $F64$min;
  var $F64$V3$point_segment_sqrdist = ($p=>($s=>$p(($p$x=>($p$y=>($p$z=>$s(($a=>($b=>$a(($a$x=>($a$y=>($a$z=>$b(($b$x=>($b$y=>($b$z=>($ab_x_diff_sqrd=>($ab_y_diff_sqrd=>($pa_x_diff=>($pa_y_diff=>($ba_x_diff=>($ba_y_diff=>($l=>($t=>($t=>($t=>($d=>($t_times_ba_x_diff=>($t_times_ba_y_diff=>($k=>($d=>($k=>($d=>$d)($F64$add($d)($k)))($F64$pow($F64$sub($p$y)($F64$add($a$y)($t_times_ba_y_diff)))($F64$2)))($F64$add($d)($k)))($F64$pow($F64$sub($p$x)($F64$add($a$x)($t_times_ba_x_diff)))($F64$2)))($F64$mul($t)($ba_y_diff)))($F64$mul($t)($ba_x_diff)))($F64$0))($F64$max($F64$0)($F64$min($F64$1)($t))))($F64$div($t)($l)))($F64$add($F64$mul($pa_x_diff)($ba_x_diff))($F64$mul($pa_y_diff)($ba_y_diff))))($F64$add($ab_x_diff_sqrd)($ab_y_diff_sqrd)))($F64$sub($b$y)($a$y)))($F64$sub($b$x)($a$x)))($F64$sub($p$y)($a$y)))($F64$sub($p$x)($a$x)))($F64$pow($F64$sub($a$y)($b$y))($F64$2)))($F64$pow($F64$sub($a$x)($b$x))($F64$2)))))))))))))))))));
  var $F64$V3$point_segment_dist = ($p=>($s=>$F64$sqrt($F64$V3$point_segment_sqrdist($p)($s))));
  var $F64$V3$rot_90 = ($v=>$v(($v$x=>($v$y=>($v$z=>$F64$V3$new($v$y)($F64$sub($F64$0)($v$x))($v$z))))));
  var $TaelinArena$collide_with = ($a_pos=>($a_dir=>($a_box=>($b_pos=>($b_dir=>($b_box=>($none=>$a_box($none)(($a_box$rad=>$b_box($none)(($b_box$rad=>($dst=>($rad=>($if_condition=>$Bool$if($if_condition)(($out_dir=>($out_vec=>$Maybe$some($out_vec))($F64$V3$scale($F64$sub($rad)($dst))($out_dir)))($F64$V3$norm($F64$V3$sub($a_pos)($b_pos))))($none))($Bool$and($F64$ltn($F64$0)($dst))($F64$ltn($dst)($rad))))($F64$add($a_box$rad)($b_box$rad)))($F64$V3$dist($a_pos)($b_pos))))(($b_box$pts=>($cons=>($segs=>$List$fold($none)($cons)($segs))($F64$V3$polygon_to_segments($b_pos)($b_dir)($b_box$pts)))(($segment=>($result=>$result($segment(($segment$a=>($segment$b=>($dst=>($rad=>$Bool$if($F64$ltn($dst)($rad))(($out_dir=>($out_vec=>$Maybe$some($out_vec))($F64$V3$scale($F64$sub($rad)($dst))($out_dir)))($F64$V3$rot_90($F64$V3$norm($F64$V3$sub($segment$a)($segment$b)))))($none))($a_box$rad))($F64$V3$point_segment_dist($a_pos)($segment))))))(($result$value=>$Maybe$some($result$value))))))))))(($a_box$pts=>$none)))($Maybe$none)))))));
  var $TaelinArena$Game$get_thing_dmg = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$dmg))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_dmg = ($thi=>($new_dmg=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($new_dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $Pair$new = ($a=>($b=>($pair=>$pair($a)($b))));
  var $Pair = ($A=>($B=>(void 0)));
  var $F64$Ordering$EQ = ($F64$Ordering$LT=>($F64$Ordering$EQ=>($F64$Ordering$GT=>$F64$Ordering$EQ)));
  var $F64$Ordering$GT = ($F64$Ordering$LT=>($F64$Ordering$EQ=>($F64$Ordering$GT=>$F64$Ordering$GT)));
  var $F64$Ordering$LT = ($F64$Ordering$LT=>($F64$Ordering$EQ=>($F64$Ordering$GT=>$F64$Ordering$LT)));
  var $F64$compare_numbers = ($a=>($b=>$Bool$if($F64$eql($a)($b))($F64$Ordering$EQ)($Bool$if($F64$ltn($b)($a))($F64$Ordering$GT)($F64$Ordering$LT))));
  var $TaelinArena$Game$Buff$shielded = ($dur=>($val=>($shielded=>($slowed=>($hasted=>($silenced=>($rooted=>($stuned=>$shielded($dur)($val)))))))));
  var $TaelinArena$Game$use_shields = ($buff=>($acc=>$acc(($acc$fst=>($acc$snd=>$buff(($buff$dur=>($buff$val=>$Bool$if($F64$eql($acc$fst)($F64$0))($acc)(($compare=>$compare(($remaining_shield_val=>($remaining_buf=>$Pair$new($F64$0)($remaining_buf))($List$cons($TaelinArena$Game$Buff$shielded($buff$dur)($remaining_shield_val))($acc$snd)))($F64$sub($buff$val)($acc$fst)))($Pair$new($F64$0)($acc$snd))(($remaining_dmg=>$Pair$new($remaining_dmg)($acc$snd))($F64$sub($acc$fst)($buff$val))))($F64$compare_numbers($acc$fst)($buff$val))))))(($buff$dur=>($buff$val=>$Pair$new($acc$fst)($List$cons($buff)($acc$snd)))))(($buff$dur=>($buff$val=>$Pair$new($acc$fst)($List$cons($buff)($acc$snd)))))(($buff$dur=>$Pair$new($acc$fst)($List$cons($buff)($acc$snd))))(($buff$dur=>$Pair$new($acc$fst)($List$cons($buff)($acc$snd))))(($buff$dur=>$Pair$new($acc$fst)($List$cons($buff)($acc$snd)))))))));
  var $Pair$fst = ($pair=>$pair(($a=>($b=>$a))));
  var $Pair$snd = ($pair=>$pair(($a=>($b=>$b))));
  var $TaelinArena$Game$set_thing_buf = ($thi=>($new_buf=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($new_buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$handle_shields = ($hit_dmg=>($self=>($self$buf=>($self$dmg=>($init_val=>($res=>($res$fst=>($res$snd=>($remaining_dmg=>($remaining_buf=>($self=>($self=>$self)($TaelinArena$Game$set_thing_buf($self)($remaining_buf)))($TaelinArena$Game$set_thing_dmg($self)($remaining_dmg)))($res$snd))($F64$add($res$fst)($self$dmg)))($Pair$snd($res)))($Pair$fst($res)))($List$fold($init_val)($TaelinArena$Game$use_shields)($self$buf)))($Pair$new($hit_dmg)($List$nil)))($TaelinArena$Game$get_thing_dmg($self)))($TaelinArena$Game$get_thing_buf($self))));
  var $TaelinArena$Game$set_thing_knk = ($thi=>($new_knk=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($new_knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$Buff$slowed = ($dur=>($val=>($shielded=>($slowed=>($hasted=>($silenced=>($rooted=>($stuned=>$slowed($dur)($val)))))))));
  var $TaelinArena$Game$Buff$hasted = ($dur=>($val=>($shielded=>($slowed=>($hasted=>($silenced=>($rooted=>($stuned=>$hasted($dur)($val)))))))));
  var $TaelinArena$Game$Buff$silenced = ($dur=>($shielded=>($slowed=>($hasted=>($silenced=>($rooted=>($stuned=>$silenced($dur))))))));
  var $TaelinArena$Game$Buff$rooted = ($dur=>($shielded=>($slowed=>($hasted=>($silenced=>($rooted=>($stuned=>$rooted($dur))))))));
  var $TaelinArena$Game$Buff$stuned = ($dur=>($shielded=>($slowed=>($hasted=>($silenced=>($rooted=>($stuned=>$stuned($dur))))))));
  var $TaelinArena$interact_with = ($this=>($that=>($this$pos=>($this$dir=>($this$box=>($this$buf=>($this$sid=>($that$pos=>($that$dir=>($that$box=>($that$hit=>($that$sid=>($out_vec=>($this=>($this=>$this)(($apply_hit=>$List$fold($this)($apply_hit)($that$hit))(($hit=>($this=>$hit(($hit$eff=>($hit$pos=>($hit$dir=>($hit$box=>($out_vec=>$out_vec($this)(($out_vec$value=>($compare_sid=>($apply_eff=>$List$fold($this)($apply_eff)($hit$eff))(($eff=>($this=>$eff(($eff$lif=>($this$dmg=>$Bool$if($compare_sid)($this)($TaelinArena$Game$set_thing_dmg($this)($F64$sub($this$dmg)($eff$lif))))($TaelinArena$Game$get_thing_dmg($this))))(($eff$dmg=>$Bool$if($compare_sid)($this)($TaelinArena$Game$handle_shields($eff$dmg)($this))))(($eff$mag=>$Bool$if($compare_sid)($this)(($v3=>($dir=>($vec=>$TaelinArena$Game$set_thing_knk($this)($vec))($F64$V3$scale($eff$mag)($dir)))($F64$V3$look_at($hit$pos)($this$pos)($v3)))($F64$V3$new($F64$1)($F64$0)($F64$0)))))(($eff$mag=>($eff$dir=>$Bool$if($compare_sid)($this)(($vec=>$TaelinArena$Game$set_thing_knk($this)($vec))($F64$V3$scale($eff$mag)($eff$dir))))))(($eff$dur=>($eff$val=>$Bool$if($compare_sid)($this)(($updated_buffs=>$TaelinArena$Game$set_thing_buf($this)($updated_buffs))($List$cons($TaelinArena$Game$Buff$slowed($eff$dur)($eff$val))($this$buf))))))(($eff$dur=>($eff$val=>$Bool$if($compare_sid)($this)(($updated_buffs=>$TaelinArena$Game$set_thing_buf($this)($updated_buffs))($List$cons($TaelinArena$Game$Buff$hasted($eff$dur)($eff$val))($this$buf))))))(($eff$dur=>($eff$val=>$Bool$if($compare_sid)($this)(($updated_buffs=>$TaelinArena$Game$set_thing_buf($this)($updated_buffs))($List$cons($TaelinArena$Game$Buff$shielded($eff$dur)($eff$val))($this$buf))))))(($eff$dur=>$Bool$if($compare_sid)($this)(($updated_buffs=>$TaelinArena$Game$set_thing_buf($this)($updated_buffs))($List$cons($TaelinArena$Game$Buff$silenced($eff$dur))($this$buf)))))(($eff$dur=>$Bool$if($compare_sid)($this)(($updated_buffs=>$TaelinArena$Game$set_thing_buf($this)($updated_buffs))($List$cons($TaelinArena$Game$Buff$rooted($eff$dur))($this$buf)))))(($eff$dur=>$Bool$if($compare_sid)($this)(($updated_buffs=>$TaelinArena$Game$set_thing_buf($this)($updated_buffs))($List$cons($TaelinArena$Game$Buff$stuned($eff$dur))($this$buf)))))(($eff$to_pos=>($eff$all=>$Bool$if($F64$eql($eff$all)($F64$1))($TaelinArena$Game$set_thing_pos($this)($eff$to_pos))($this))))))))($F64$eql($this$sid)($that$sid)))))($TaelinArena$collide_with($this$pos)($this$dir)($this$box)($hit$pos)($hit$dir)($hit$box))))))))))))($out_vec($this)(($out_vec$value=>($new_pos=>$TaelinArena$Game$set_thing_pos($this)($new_pos))($F64$V3$add($this$pos)($out_vec$value))))))($TaelinArena$collide_with($this$pos)($this$dir)($this$box)($that$pos)($that$dir)($that$box)))($TaelinArena$Game$get_thing_sid($this)))($TaelinArena$Game$get_thing_hit($that)))($TaelinArena$Game$get_thing_box($that)))($TaelinArena$Game$get_thing_dir($that)))($TaelinArena$Game$get_thing_pos($that)))($TaelinArena$Game$get_thing_sid($this)))($TaelinArena$Game$get_thing_buf($this)))($TaelinArena$Game$get_thing_box($this)))($TaelinArena$Game$get_thing_dir($this)))($TaelinArena$Game$get_thing_pos($this))));
  var $TaelinArena$Game$set_thing_hit = ($thi=>($new_hit=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($new_hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_rst = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$rst))))))))))))))))))))))))))));
  var $TaelinArena$Game$Hitbox$cbox = ($rad=>($nbox=>($cbox=>($pbox=>$cbox($rad)))));
  var $TaelinArena$Game$set_thing_vel = ($thi=>($new_vel=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($new_vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_bst = ($thi=>($new_bst=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($new_bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_box = ($thi=>($new_box=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($new_box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_lit = ($thi=>($new_lit=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($new_lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_rst = ($thi=>($new_rst=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($new_rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_bst = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$bst))))))))))))))))))))))))))));
  var $TaelinArena$Game$combine_mov_buffs = ($buff=>($i=>$buff(($buff$dur=>($buff$val=>$i)))(($buff$dur=>($buff$val=>$F64$mul($i)($buff$val))))(($buff$dur=>($buff$val=>$F64$mul($i)($buff$val))))(($buff$dur=>$i))(($buff$dur=>$F64$0))(($buff$dur=>$F64$0))));
  var $TaelinArena$Game$speed_multiplier_of = ($self=>($bst=>($buf=>$List$fold($bst)($TaelinArena$Game$combine_mov_buffs)($buf))($TaelinArena$Game$get_thing_buf($self)))($TaelinArena$Game$get_thing_bst($self)));
  var $TaelinArena$Game$get_thing_mov = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$mov))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_pad = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$pad))))))))))))))))))))))))))));
  var $TaelinArena$Game$update_buff_dur = ($self=>($self$buf=>($fn=>($new_buf=>$TaelinArena$Game$set_thing_buf($self)($new_buf))($List$fold($List$nil)($fn)($self$buf)))(($buff=>($acc=>$buff(($buff$dur=>($buff$val=>$Bool$if($F64$eql($buff$dur)($F64$0))($acc)($List$cons($TaelinArena$Game$Buff$shielded($F64$sub($buff$dur)($F64$1))($buff$val))($acc)))))(($buff$dur=>($buff$val=>$Bool$if($F64$eql($buff$dur)($F64$0))($acc)($List$cons($TaelinArena$Game$Buff$slowed($F64$sub($buff$dur)($F64$1))($buff$val))($acc)))))(($buff$dur=>($buff$val=>$Bool$if($F64$eql($buff$dur)($F64$0))($acc)($List$cons($TaelinArena$Game$Buff$hasted($F64$sub($buff$dur)($F64$1))($buff$val))($acc)))))(($buff$dur=>$Bool$if($F64$eql($buff$dur)($F64$0))($acc)($List$cons($TaelinArena$Game$Buff$silenced($F64$sub($buff$dur)($F64$1)))($acc))))(($buff$dur=>$Bool$if($F64$eql($buff$dur)($F64$0))($acc)($List$cons($TaelinArena$Game$Buff$rooted($F64$sub($buff$dur)($F64$1)))($acc))))(($buff$dur=>$Bool$if($F64$eql($buff$dur)($F64$0))($acc)($List$cons($TaelinArena$Game$Buff$stuned($F64$sub($buff$dur)($F64$1)))($acc))))))))($TaelinArena$Game$get_thing_buf($self)));
  var $TaelinArena$Game$get_thing_knk = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$knk))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_wei = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$wei))))))))))))))))))))))))))));
  var $F64$gtn = ($a=>($b=>$F64$cmp($a)($b)($Bool$false)($Bool$false)($Bool$true)));
  var $TaelinArena$Game$get_thing_fun = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$fun))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_chi = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$chi))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_chi = ($thi=>($new_chi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($new_chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $F64$V3$get_z = ($v=>$v(($v$x=>($v$y=>($v$z=>$v$z)))));
  var $F64$V3$get_y = ($v=>$v(($v$x=>($v$y=>($v$z=>$v$y)))));
  var $TaelinArena$Game$get_thing_mhp = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$mhp))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_die = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$die))))))))))))))))))))))))))));
  var $Bool$or = a=>b=>a||b;
  var $List$concat = ($as=>($bs=>$as($bs)(($head=>($tail=>$List$cons($head)($List$concat($tail)($bs)))))));
  var $TaelinArena$fold_with_context = ($i=>($f=>($xs=>($ys=>$xs($i)(($xs$head=>($xs$tail=>($ys2=>($rest=>$f($xs$head)($ys($xs$tail))($rest))($TaelinArena$fold_with_context($i)($f)($xs$tail)($ys2)))(($x=>$ys($List$cons($xs$head)($xs)))))))))));
  var $TaelinArena$exec_turn = ($gm=>($intr=>($tick=>($things_id=>($stage=>($stage_nil=>($new_stage=>$TaelinArena$Game$Game$new($new_stage))($TaelinArena$fold_with_context($stage_nil)($tick)($stage)($things_id)))($List$nil))($gm(($stage=>$stage))))(($x=>$x)))(($this=>($others=>($res=>($this=>($rst=>($this=>($boost=>($pos=>($mov=>($pad=>($this=>($this=>($pos=>($knk=>($wei=>($new_pos=>($knk_len=>($new_knk=>($this=>($this=>($fun=>($this=>($this=>($tik=>($this=>($this_chi=>($chi_init=>($chi_list=>($this=>($this_pos=>($pos_x=>($pos_y=>($pos_z=>($new_x=>($new_y=>($new_z=>($this=>($dmg=>($mhp=>($new_dmg=>($this=>($sid=>($dmg=>($mhp=>($no_hp=>($die=>($xs=>$List$concat($chi_list)($xs))(elim_bool($Bool$or($die)($no_hp))($res)($List$cons($this)($res))))($TaelinArena$Game$get_thing_die($this)))($Bool$false))($TaelinArena$Game$get_thing_mhp($this)))($TaelinArena$Game$get_thing_dmg($this)))($TaelinArena$Game$get_thing_sid($this)))($TaelinArena$Game$set_thing_dmg($this)($new_dmg)))($F64$max($F64$0)($F64$min($mhp)($dmg))))($TaelinArena$Game$get_thing_mhp($this)))($TaelinArena$Game$get_thing_dmg($this)))($TaelinArena$Game$set_thing_pos($this)($F64$V3$new($new_x)($new_y)($new_z))))($F64$min($F64$max($F64$0)($pos_z))($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$1)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$1)($Bit$0))($String$nil)))))))($F64$min($F64$max($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$1)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$nil))))))($pos_y))($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$1)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$nil)))))))($F64$min($F64$max($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$1)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$1)($Bit$0))($String$nil))))))($pos_x))($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$1)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$1)($Bit$0))($String$nil)))))))($F64$V3$get_z($this_pos)))($F64$V3$get_y($this_pos)))($F64$V3$get_z($this_pos)))($TaelinArena$Game$get_thing_pos($this)))($TaelinArena$Game$set_thing_chi($this)($List$nil)))($List$map($chi_init)($this_chi)))(($chi=>$TaelinArena$Game$get_thing_fun($chi)($chi))))($TaelinArena$Game$get_thing_chi($this)))($TaelinArena$Game$set_thing_tik($this)($F64$add($tik)($F64$1))))($TaelinArena$Game$get_thing_tik($this)))($List$fold($this)($intr)($others)))($fun($this)))($TaelinArena$Game$get_thing_fun($this)))($TaelinArena$Game$set_thing_knk($this)($new_knk)))($TaelinArena$Game$set_thing_pos($this)($new_pos)))(elim_bool($F64$gtn($knk_len)($F64$0))(($force=>$F64$V3$scale($force)($F64$V3$norm($knk)))($F64$max($F64$sub($knk_len)($wei))($F64$0)))($knk)))($F64$V3$len($knk)))($F64$V3$add($pos)($knk)))($TaelinArena$Game$get_thing_wei($this)))($TaelinArena$Game$get_thing_knk($this)))($TaelinArena$Game$get_thing_pos($this)))($TaelinArena$Game$update_buff_dur($this)))($TaelinArena$Game$set_thing_pos($this)($F64$V3$add($pos)($F64$V3$scale($F64$mul($mov)($boost))($pad)))))($TaelinArena$Game$get_thing_pad($this)))($TaelinArena$Game$get_thing_mov($this)))($TaelinArena$Game$get_thing_pos($this)))($TaelinArena$Game$speed_multiplier_of($this)))(elim_bool($rst)(($new_vel=>($new_bst=>($new_box=>($new_act=>($new_tik=>($new_lit=>($new_rst=>($this=>($this=>($this=>($this=>($this=>($this=>($this=>$this)($TaelinArena$Game$set_thing_rst($this)($new_rst)))($TaelinArena$Game$set_thing_lit($this)($new_lit)))($TaelinArena$Game$set_thing_tik($this)($new_tik)))($TaelinArena$Game$set_thing_act($this)($new_act)))($TaelinArena$Game$set_thing_box($this)($new_box)))($TaelinArena$Game$set_thing_bst($this)($new_bst)))($TaelinArena$Game$set_thing_vel($this)($new_vel)))($Bool$false))($List$nil))($F64$0))($F64$0))($TaelinArena$Game$Hitbox$cbox($F64$mul($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$1)($Bit$1))($String$nil)))($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$0)($Bit$0))($String$nil))))))($F64$1))($F64$V3$new($F64$0)($F64$0)($F64$0)))($this)))($TaelinArena$Game$get_thing_rst($this)))($TaelinArena$Game$set_thing_hit($this)($List$nil)))))))(($that=>($this=>$TaelinArena$interact_with($this)($that)))));
  var $Exports$new = ($new=>($add=>$new));
  var $Exports$TaelinArena = $Exports$add($List$nil)($Exports$add($List$cons)($Exports$add($F64$V3$polygon_to_segments)($Exports$add($F64$V3$look_at)($Exports$add($TaelinArena$Game$get_position_by_pid)($Exports$add($TaelinArena$Game$map_stage)($Exports$add($TaelinArena$Game$Command$new)($Exports$add($TaelinArena$Game$Input$sdir)($Exports$add($TaelinArena$Game$Input$key0)($Exports$add($TaelinArena$Game$Input$key1)($Exports$add($TaelinArena$Game$Input$key2)($Exports$add($TaelinArena$Game$Input$key3)($Exports$add($TaelinArena$Game$Input$key4)($Exports$add($TaelinArena$Game$Input$key5)($Exports$add($TaelinArena$exec_command)($Exports$add($TaelinArena$Game$Thing$new)($Exports$add($TaelinArena$Game$set_thing_fun)($Exports$add($TaelinArena$Game$set_thing_sid)($Exports$add($TaelinArena$Game$set_thing_pid)($Exports$add($TaelinArena$Game$set_thing_pos)($Exports$add($TaelinArena$Game$set_thing_nam)($Exports$add($TaelinArena$Game$Game$new)($Exports$add($TaelinArena$exec_turn)($Exports$new)))))))))))))))))))))));
  return {
    'Exports.add': $Exports$add,
    'List.nil': $List$nil,
    'List.cons': $List$cons,
    'List.fold': $List$fold,
    'List': $List,
    'F64.atan': $F64$atan,
    'F64.mul': $F64$mul,
    'F64.cos': $F64$cos,
    'F64.sin': $F64$sin,
    'F64.sub': $F64$sub,
    'F64.add': $F64$add,
    'F64.V3.new': $F64$V3$new,
    'F64.V3.add': $F64$V3$add,
    'F64.V3.polygon_to_segments.transform': $F64$V3$polygon_to_segments$transform,
    'F64.Segment.new': $F64$Segment$new,
    'F64.V3.polygon_to_segments.nil': $F64$V3$polygon_to_segments$nil,
    'Maybe.some': $Maybe$some,
    'Maybe': $Maybe,
    'F64.V3.polygon_to_segments.cons': $F64$V3$polygon_to_segments$cons,
    'Maybe.none': $Maybe$none,
    'F64.V3.polygon_to_segments': $F64$V3$polygon_to_segments,
    'Cmp.ltn': $Cmp$ltn,
    'Cmp.gtn': $Cmp$gtn,
    'Word.cmp.aux': $Word$cmp$aux,
    'Cmp.eql': $Cmp$eql,
    'Word.cmp': $Word$cmp,
    'Bool.false': $Bool$false,
    'Bool.true': $Bool$true,
    'Word.eql': $Word$eql,
    'Nat.succ': $Nat$succ,
    'Nat.zero': $Nat$zero,
    'Nat.0': $Nat$0,
    'Nat.1': $Nat$1,
    'Nat.2': $Nat$2,
    'Nat.3': $Nat$3,
    'Nat.4': $Nat$4,
    'Nat.5': $Nat$5,
    'Nat.6': $Nat$6,
    'Nat.7': $Nat$7,
    'Nat.8': $Nat$8,
    'Nat.9': $Nat$9,
    'Nat.10': $Nat$10,
    'Nat.11': $Nat$11,
    'Nat.12': $Nat$12,
    'Nat.13': $Nat$13,
    'Nat.14': $Nat$14,
    'Nat.15': $Nat$15,
    'Nat.16': $Nat$16,
    'Nat.17': $Nat$17,
    'Nat.18': $Nat$18,
    'Nat.19': $Nat$19,
    'Nat.20': $Nat$20,
    'Nat.21': $Nat$21,
    'Nat.22': $Nat$22,
    'Nat.23': $Nat$23,
    'Nat.24': $Nat$24,
    'Nat.25': $Nat$25,
    'Nat.26': $Nat$26,
    'Nat.27': $Nat$27,
    'Nat.28': $Nat$28,
    'Nat.29': $Nat$29,
    'Nat.30': $Nat$30,
    'Nat.31': $Nat$31,
    'Nat.32': $Nat$32,
    'Nat.33': $Nat$33,
    'Nat.34': $Nat$34,
    'Nat.35': $Nat$35,
    'Nat.36': $Nat$36,
    'Nat.37': $Nat$37,
    'Nat.38': $Nat$38,
    'Nat.39': $Nat$39,
    'Nat.40': $Nat$40,
    'Nat.41': $Nat$41,
    'Nat.42': $Nat$42,
    'Nat.43': $Nat$43,
    'Nat.44': $Nat$44,
    'Nat.45': $Nat$45,
    'Nat.46': $Nat$46,
    'Nat.47': $Nat$47,
    'Nat.48': $Nat$48,
    'Nat.49': $Nat$49,
    'Nat.50': $Nat$50,
    'Nat.51': $Nat$51,
    'Nat.52': $Nat$52,
    'Nat.53': $Nat$53,
    'Nat.54': $Nat$54,
    'Nat.55': $Nat$55,
    'Nat.56': $Nat$56,
    'Nat.57': $Nat$57,
    'Nat.58': $Nat$58,
    'Nat.59': $Nat$59,
    'Nat.60': $Nat$60,
    'Nat.61': $Nat$61,
    'Nat.62': $Nat$62,
    'Nat.63': $Nat$63,
    'Nat.64': $Nat$64,
    'F64.eql': $F64$eql,
    'Bool.and': $Bool$and,
    'F64.V3.eql': $F64$V3$eql,
    'F64.V3.sub': $F64$V3$sub,
    'F64.new': $F64$new,
    'Word': $Word,
    'Word.nil': $Word$nil,
    'Word.0': $Word$0,
    'Bits.nil': $Bits$nil,
    'Word.1': $Word$1,
    'Word.from_bits': $Word$from_bits,
    'U16.eql': $U16$eql,
    'Char.parse.type': $Char$parse$type,
    'Unit.new': $Unit$new,
    'Char.parse': $Char$parse,
    'String.cons': $String$cons,
    'U16.new': $U16$new,
    'Char.new': $Char$new,
    'Bit.0': $Bit$0,
    'Bit.1': $Bit$1,
    'String.nil': $String$nil,
    'Bits.1': $Bits$1,
    'Bits.0': $Bits$0,
    'Bits.from_string': $Bits$from_string,
    'F64.parse_binary': $F64$parse_binary,
    'F64.0': $F64$0,
    'F64.div': $F64$div,
    'F64.1': $F64$1,
    'F64.pow': $F64$pow,
    'F64.V3.len': $F64$V3$len,
    'F64.V3.norm': $F64$V3$norm,
    'F64.V3.look_at': $F64$V3$look_at,
    'List.find': $List$find,
    'TaelinArena.Game.get_thing_pid': $TaelinArena$Game$get_thing_pid,
    'TaelinArena.Game.get_thing_by_pid.cond': $TaelinArena$Game$get_thing_by_pid$cond,
    'TaelinArena.Game.get_thing_by_pid': $TaelinArena$Game$get_thing_by_pid,
    'TaelinArena.Game.get_thing_pos': $TaelinArena$Game$get_thing_pos,
    'TaelinArena.Game.get_position_by_pid': $TaelinArena$Game$get_position_by_pid,
    'List.map': $List$map,
    'TaelinArena.Game.Game.new': $TaelinArena$Game$Game$new,
    'TaelinArena.Game.map_stage': $TaelinArena$Game$map_stage,
    'TaelinArena.Game.Command.new': $TaelinArena$Game$Command$new,
    'TaelinArena.Game.Input.sdir': $TaelinArena$Game$Input$sdir,
    'TaelinArena.Game.Input.key0': $TaelinArena$Game$Input$key0,
    'TaelinArena.Game.Input.key1': $TaelinArena$Game$Input$key1,
    'TaelinArena.Game.Input.key2': $TaelinArena$Game$Input$key2,
    'TaelinArena.Game.Input.key3': $TaelinArena$Game$Input$key3,
    'TaelinArena.Game.Input.key4': $TaelinArena$Game$Input$key4,
    'TaelinArena.Game.Input.key5': $TaelinArena$Game$Input$key5,
    'TaelinArena.Game.get_thing_buf': $TaelinArena$Game$get_thing_buf,
    'TaelinArena.Game.is_silenced': $TaelinArena$Game$is_silenced,
    'TaelinArena.Game.is_stunned': $TaelinArena$Game$is_stunned,
    'TaelinArena.Game.get_thing_act': $TaelinArena$Game$get_thing_act,
    'TaelinArena.Game.get_thing_trg': $TaelinArena$Game$get_thing_trg,
    'TaelinArena.Game.get_thing_tik': $TaelinArena$Game$get_thing_tik,
    'TaelinArena.Game.Thing.new': $TaelinArena$Game$Thing$new,
    'TaelinArena.Game.set_thing_act': $TaelinArena$Game$set_thing_act,
    'Bool.eql': $Bool$eql,
    'Bool.if': $Bool$if,
    'TaelinArena.Game.set_thing_trg': $TaelinArena$Game$set_thing_trg,
    'TaelinArena.Game.set_thing_tik': $TaelinArena$Game$set_thing_tik,
    'TaelinArena.Game.init_act': $TaelinArena$Game$init_act,
    'TaelinArena.Game.set_thing_pad': $TaelinArena$Game$set_thing_pad,
    'F64.2': $F64$2,
    'F64.parse': $F64$parse,
    'TaelinArena.Game.with_thing.effect': $TaelinArena$Game$with_thing$effect,
    'TaelinArena.Game.with_thing': $TaelinArena$Game$with_thing,
    'TaelinArena.exec_command': $TaelinArena$exec_command,
    'TaelinArena.Game.set_thing_fun': $TaelinArena$Game$set_thing_fun,
    'TaelinArena.Game.set_thing_sid': $TaelinArena$Game$set_thing_sid,
    'TaelinArena.Game.set_thing_pid': $TaelinArena$Game$set_thing_pid,
    'TaelinArena.Game.set_thing_pos': $TaelinArena$Game$set_thing_pos,
    'TaelinArena.Game.set_thing_nam': $TaelinArena$Game$set_thing_nam,
    'TaelinArena.Game.get_thing_dir': $TaelinArena$Game$get_thing_dir,
    'TaelinArena.Game.get_thing_box': $TaelinArena$Game$get_thing_box,
    'TaelinArena.Game.get_thing_sid': $TaelinArena$Game$get_thing_sid,
    'TaelinArena.Game.get_thing_hit': $TaelinArena$Game$get_thing_hit,
    'F64.sqrt': $F64$sqrt,
    'F64.V3.sqr_dist': $F64$V3$sqr_dist,
    'F64.V3.dist': $F64$V3$dist,
    'Word.ltn': $Word$ltn,
    'F64.cmp': $F64$cmp,
    'F64.ltn': $F64$ltn,
    'F64.V3.scale': $F64$V3$scale,
    'F64.max': $F64$max,
    'F64.min': $F64$min,
    'F64.V3.point_segment_sqrdist': $F64$V3$point_segment_sqrdist,
    'F64.V3.point_segment_dist': $F64$V3$point_segment_dist,
    'F64.V3.rot_90': $F64$V3$rot_90,
    'TaelinArena.collide_with': $TaelinArena$collide_with,
    'TaelinArena.Game.get_thing_dmg': $TaelinArena$Game$get_thing_dmg,
    'TaelinArena.Game.set_thing_dmg': $TaelinArena$Game$set_thing_dmg,
    'Pair.new': $Pair$new,
    'Pair': $Pair,
    'F64.Ordering.EQ': $F64$Ordering$EQ,
    'F64.Ordering.GT': $F64$Ordering$GT,
    'F64.Ordering.LT': $F64$Ordering$LT,
    'F64.compare_numbers': $F64$compare_numbers,
    'TaelinArena.Game.Buff.shielded': $TaelinArena$Game$Buff$shielded,
    'TaelinArena.Game.use_shields': $TaelinArena$Game$use_shields,
    'Pair.fst': $Pair$fst,
    'Pair.snd': $Pair$snd,
    'TaelinArena.Game.set_thing_buf': $TaelinArena$Game$set_thing_buf,
    'TaelinArena.Game.handle_shields': $TaelinArena$Game$handle_shields,
    'TaelinArena.Game.set_thing_knk': $TaelinArena$Game$set_thing_knk,
    'TaelinArena.Game.Buff.slowed': $TaelinArena$Game$Buff$slowed,
    'TaelinArena.Game.Buff.hasted': $TaelinArena$Game$Buff$hasted,
    'TaelinArena.Game.Buff.silenced': $TaelinArena$Game$Buff$silenced,
    'TaelinArena.Game.Buff.rooted': $TaelinArena$Game$Buff$rooted,
    'TaelinArena.Game.Buff.stuned': $TaelinArena$Game$Buff$stuned,
    'TaelinArena.interact_with': $TaelinArena$interact_with,
    'TaelinArena.Game.set_thing_hit': $TaelinArena$Game$set_thing_hit,
    'TaelinArena.Game.get_thing_rst': $TaelinArena$Game$get_thing_rst,
    'TaelinArena.Game.Hitbox.cbox': $TaelinArena$Game$Hitbox$cbox,
    'TaelinArena.Game.set_thing_vel': $TaelinArena$Game$set_thing_vel,
    'TaelinArena.Game.set_thing_bst': $TaelinArena$Game$set_thing_bst,
    'TaelinArena.Game.set_thing_box': $TaelinArena$Game$set_thing_box,
    'TaelinArena.Game.set_thing_lit': $TaelinArena$Game$set_thing_lit,
    'TaelinArena.Game.set_thing_rst': $TaelinArena$Game$set_thing_rst,
    'TaelinArena.Game.get_thing_bst': $TaelinArena$Game$get_thing_bst,
    'TaelinArena.Game.combine_mov_buffs': $TaelinArena$Game$combine_mov_buffs,
    'TaelinArena.Game.speed_multiplier_of': $TaelinArena$Game$speed_multiplier_of,
    'TaelinArena.Game.get_thing_mov': $TaelinArena$Game$get_thing_mov,
    'TaelinArena.Game.get_thing_pad': $TaelinArena$Game$get_thing_pad,
    'TaelinArena.Game.update_buff_dur': $TaelinArena$Game$update_buff_dur,
    'TaelinArena.Game.get_thing_knk': $TaelinArena$Game$get_thing_knk,
    'TaelinArena.Game.get_thing_wei': $TaelinArena$Game$get_thing_wei,
    'F64.gtn': $F64$gtn,
    'TaelinArena.Game.get_thing_fun': $TaelinArena$Game$get_thing_fun,
    'TaelinArena.Game.get_thing_chi': $TaelinArena$Game$get_thing_chi,
    'TaelinArena.Game.set_thing_chi': $TaelinArena$Game$set_thing_chi,
    'F64.V3.get_z': $F64$V3$get_z,
    'F64.V3.get_y': $F64$V3$get_y,
    'TaelinArena.Game.get_thing_mhp': $TaelinArena$Game$get_thing_mhp,
    'TaelinArena.Game.get_thing_die': $TaelinArena$Game$get_thing_die,
    'Bool.or': $Bool$or,
    'List.concat': $List$concat,
    'TaelinArena.fold_with_context': $TaelinArena$fold_with_context,
    'TaelinArena.exec_turn': $TaelinArena$exec_turn,
    'Exports.new': $Exports$new,
    'Exports.TaelinArena': $Exports$TaelinArena,
  };
})();
console.log(module.exports['Exports.TaelinArena']);
➜  Moonad git:(183-TaelinArena) ✗ clear

➜  Moonad git:(183-TaelinArena) ✗ fm -v
Type-checking:
Bit.0                                                              : Bit
Bit.1                                                              : Bit
Bit                                                                : Type
Bits.0                                                             : (bs: Bits) -> Bits
Bits.1                                                             : (bs: Bits) -> Bits
Bits.concat                                                        : Bits -> Bits -> Bits
Bits.eql                                                           : Bits -> Bits -> Bool
Bits                                                               : Type
Bits.from_string                                                   : String -> Bits
Bits.inc                                                           : Bits -> Bits
Bits.nil                                                           : Bits
Bits.parse_hex                                                     : String -> Bits
Bits.parse_hex.go                                                  : String -> Bits -> Bits
Bits.reverse                                                       : Bits -> Bits
Bits.reverse.go                                                    : Bits -> Bits -> Bits
Bool.and                                                           : Bool -> Bool -> Bool
Bool.elim                                                          : (b: Bool) -> <P: Bool -> Type> -> P(Bool.true) -> P(Bool.false) -> P(b)
Bool.eql                                                           : Bool -> Bool -> Bool
Bool.false                                                         : Bool
Bool.false_isnt_true                                               : Not(Equal(Bool)(Bool.false)(Bool.true))
Bool                                                               : Type
Bool.if                                                            : <A: Type> -> (x: Bool) -> (ct: A) -> (cf: A) -> A
Bool.not                                                           : Bool -> Bool
Bool.notf                                                          : Bool -> Bool
Bool.or                                                            : Bool -> Bool -> Bool
Bool.test.different_elem                                           : (a: Bool) -> Subset(Bool)((b) Not(Equal(Bool)(a)(b)))
Bool.true                                                          : Bool
Bool.true_isnt_false                                               : Not(Equal(Bool)(Bool.true)(Bool.false))
Char                                                               : Type
Char.hex_value                                                     : Char -> Maybe(Nat)
Char.new                                                           : Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Char
Char.newline                                                       : Char
Char.parse                                                         : (str: String) -> Char.parse.type(str)
Char.parse.type                                                    : String -> Type
Char.quote                                                         : Char
Char.tab                                                           : Char
Cmp.eql                                                            : Cmp
Cmp                                                                : Type
Cmp.gtn                                                            : Cmp
Cmp.ltn                                                            : Cmp
Comp.app                                                           : Comp -> Comp -> Comp
Comp.fal                                                           : Comp
Comp                                                               : Type
Comp.lam                                                           : String -> Comp -> Comp
Comp.let                                                           : String -> Comp -> Comp -> Comp
Comp.stringify                                                     : Comp -> Stringifier
Comp.tru                                                           : Comp
Comp.var                                                           : String -> Comp
Concat                                                             : (A: Type) -> Type
Concat.push                                                        : <A: Type> -> A -> Concat(A) -> Concat(A)
Concat.to_list                                                     : <A: Type> -> (xs: Concat(A)) -> List(A)
Core.Bind                                                          : Type
Core.Comp.check                                                    : Core -> Core -> Core.Defs -> Nat -> Maybe(Pair(Comp)(Core))
Core.Comp.infer                                                    : Core -> Core.Defs -> Nat -> Maybe(Pair(Comp)(Core))
Core.Ctx.ext                                                       : String -> Core -> Core.Ctx -> Core.Ctx
Core.Ctx                                                           : Type
Core.Ctx.nil                                                       : Core.Ctx
Core.Def                                                           : Type
Core.Defs                                                          : Type
Core.Defs.get                                                      : Core.Defs -> String -> Maybe(Core.Def)
Core.Defs.get_term                                                 : Core.Defs -> String -> Maybe(Core)
Core.Defs.get_type                                                 : Core.Defs -> String -> Maybe(Core)
Core.Defs.new                                                      : Map(Pair(Core)(Core))
Core.Defs.set                                                      : String -> Core.Def -> Core.Defs -> Core.Defs
Core.Defs.term                                                     : Core.Defs -> String -> Core
Core.Defs.type                                                     : Core.Defs -> String -> Core
Core.Read.Reply                                                    : (A: Type) -> Type
Core.Read.all                                                      : Core.Read(Core.Bind)
Core.Read.ann                                                      : Core.Bind -> Core.Read(Core.Bind)
Core.Read.app                                                      : Core.Bind -> Core.Read(Core.Bind)
Core.Read.arr                                                      : Core.Bind -> Core.Read(Core.Bind)
Core.Read.bind                                                     : <A: Type> -> <B: Type> -> Core.Read(A) -> A -> Core.Read(B) -> Core.Read(B)
Core.Read.def                                                      : Core.Read(Pair(String)(Core.Def))
Core.Read.defs                                                     : Core.Read(Core.Defs)
Core.Read.defs.go                                                  : Core.Defs -> Core.Read(Core.Defs)
Core.Read.done                                                     : <A: Type> -> A -> String -> Core.Read.Reply(A)
Core.Read.fail                                                     : <A: Type> -> Core.Read.Reply(A)
Core.Read.first_of                                                 : <A: Type> -> List(Core.Read(A)) -> Core.Read(A)
Core.Read                                                          : Type -> Type
Core.Read.fst                                                      : List(String) -> Core.Read(Nat)
Core.Read.is_name                                                  : Char -> Bool
Core.Read.is_name.set                                              : Map(Unit)
Core.Read.is_space                                                 : Char -> Bool
Core.Read.lam                                                      : Core.Read(Core.Bind)
Core.Read.let                                                      : Core.Read(Core.Bind)
Core.Read.nam                                                      : Core.Read(String)
Core.Read.next                                                     : String -> String
Core.Read.one                                                      : String -> String -> Core.Read(Bool)
Core.Read.opt                                                      : String -> Core.Read(Bool)
Core.Read.par                                                      : Core.Read(Core.Bind)
Core.Read.pip                                                      : Core.Bind -> Core.Read(Core.Bind)
Core.Read.seek                                                     : <A: Type> -> <B: Type> -> Core.Read(A) -> A -> Core.Read(B) -> Core.Read(B)
Core.Read.trm.base                                                 : Core.Read(Core.Bind)
Core.Read.trm                                                      : Core.Read(Core.Bind)
Core.Read.trm.post                                                 : Core.Bind -> Core.Read(Core.Bind)
Core.Read.txt                                                      : String -> Core.Read(Unit)
Core.Read.typ                                                      : Core.Read(Core.Bind)
Core.Read.var                                                      : Core.Read(Core.Bind)
Core.Read.wrd                                                      : Core.Read(String)
Core.all.Tuple                                                     : Type
Core.all                                                           : Bool -> String -> String -> Core -> Core -> Core -> Core -> Core
Core.ann                                                           : Bool -> Core -> Core -> Core
Core.app                                                           : Bool -> Core -> Core -> Core
Core.eql                                                           : Core -> Core -> Core.Defs -> Bool
Core.eql.go                                                        : Core -> Core -> Core.Defs -> Set -> Nat -> Bool
Core                                                               : Type
Core.if_all                                                        : Core -> Maybe(Core.all.Tuple)
Core.is_all                                                        : Core -> Bool
Core.is_lam                                                        : Core -> Bool
Core.lam                                                           : Bool -> String -> Core -> Core -> Core
Core.let                                                           : String -> Core -> Core -> Core -> Core
Core.normalize                                                     : Core -> Core.Defs -> Core
Core.parse                                                         : String -> Core
Core.parse_defs                                                    : String -> Core.Defs
Core.reduce                                                        : Core -> Core.Defs -> Core
Core.ref                                                           : String -> Core
Core.stringify                                                     : Core -> String
Core.stringify.go                                                  : Core -> Stringifier
Core.to_bits                                                       : Core -> Bits
Core.to_bits.go                                                    : Core -> Nat -> Bool -> Bits -> Bits
Core.to_uid                                                        : Core -> Bits
Core.typ                                                           : Core
Core.typecheck                                                     : Core -> Core -> Core.Defs -> Nat -> Either(String)(Core)
Core.typecomp                                                      : Core -> Core -> Core.Defs -> Nat -> Either(String)(Core)
Core.typeinfer                                                     : Core -> Core.Defs -> Nat -> Either(Text)(Core)
Core.var                                                           : String -> Nat -> Bool -> Core
Debug.log                                                          : <A: Type> -> (s: String) -> (x: Unit -> A) -> A
Either.bind                                                        : <A: Type> -> <B: Type> -> <C: Type> -> Either(A)(B) -> B -> Either(A)(C) -> Either(A)(C)
Either                                                             : (A: Type) -> (B: Type) -> Type
Either.left                                                        : <A: Type> -> <B: Type> -> (x: A) -> Either(A)(B)
Either.right                                                       : <A: Type> -> <B: Type> -> (x: B) -> Either(A)(B)
Empty.absurd                                                       : (x: Empty) -> (P: Type) -> P
Empty                                                              : Type
Equal.apply                                                        : <A: Type> -> <B: A -> Type> -> (a: A) -> (b: A) -> (f: (x: A) -> B(x)) -> (e: Equal(A)(a)(b)) -> Equal(B(a))(f(a))(Equal.rewrite<A><b><a><B>(Equal.mirror<A><a><b>(e))(f(b)))
Equal.apply_ind                                                    : <A: Type> -> <B: Type> -> (a: A) -> (b: A) -> (f: (x: A) -> B) -> (e: Equal(A)(a)(b)) -> Equal(B)(f(a))(f(b))
Equal.chain                                                        : <A: Type> -> <a: A> -> <b: A> -> <c: A> -> (d: Equal(A)(a)(b)) -> (e: Equal(A)(b)(c)) -> Equal(A)(a)(c)
Equal                                                              : (A: Type) -> A -> A -> Type
Equal.mirror                                                       : <A: Type> -> <a: A> -> <b: A> -> (e: Equal(A)(a)(b)) -> Equal(A)(b)(a)
Equal.rewrite                                                      : <A: Type> -> <a: A> -> <b: A> -> <P: A -> Type> -> (e: Equal(A)(a)(b)) -> (x: P(a)) -> P(b)
Equal.to                                                           : <A: Type> -> <a: A> -> Equal(A)(a)(a)
Example.nat                                                        : Nat
Example.tco                                                        : Nat
Example.u32_add                                                    : U32
Exports.TaelinArena                                                : Exports
Exports.add                                                        : <A: Type> -> (x: A) -> (xs: Exports) -> Exports
Exports.example                                                    : Exports
Exports                                                            : Type
Exports.new                                                        : Exports
F64.0                                                              : F64
F64.1                                                              : F64
F64.180                                                            : F64
F64.2                                                              : F64
F64.256                                                            : F64
F64.Boundary                                                       : Type
F64.Boundary.new                                                   : List(F64.V3) -> F64.Boundary
F64.Circle                                                         : Type
F64.Circle.new                                                     : F64.V3 -> F64 -> F64.Circle
F64.Line                                                           : Type
F64.Line.new                                                       : F64.V3 -> F64.V3 -> F64.Line
F64.Segment                                                        : Type
F64.Segment.new                                                    : F64.V3 -> F64.V3 -> F64.Segment
F64.V3.add                                                         : F64.V3 -> F64.V3 -> F64.V3
F64.V3.circle_boundary_intersects                                  : F64.Circle -> F64.Boundary -> F64
F64.V3.circle_line_intersection                                    : F64.Circle -> F64.Line -> Maybe(Pair(F64.V3)(F64.V3))
F64.V3.circle_to_circle_hit_dist                                   : F64.Circle -> F64.V3 -> F64.Circle -> Maybe(F64)
F64.V3.dist                                                        : F64.V3 -> F64.V3 -> F64
F64.V3.dot                                                         : F64.V3 -> F64.V3 -> F64
F64.V3.eql                                                         : F64.V3 -> F64.V3 -> Bool
F64.V3                                                             : Type
F64.V3.get_x                                                       : F64.V3 -> F64
F64.V3.get_y                                                       : F64.V3 -> F64
F64.V3.get_z                                                       : F64.V3 -> F64
F64.V3.len                                                         : F64.V3 -> F64
F64.V3.look_at                                                     : F64.V3 -> F64.V3 -> F64.V3 -> F64.V3
F64.V3.ltn                                                         : F64.V3 -> F64.V3 -> Bool
F64.V3.map                                                         : F64 -> F64 -> F64.V3 -> F64.V3
F64.V3.map_x                                                       : F64 -> F64 -> F64.V3 -> F64.V3
F64.V3.map_y                                                       : F64 -> F64 -> F64.V3 -> F64.V3
F64.V3.map_z                                                       : F64 -> F64 -> F64.V3 -> F64.V3
F64.V3.mul                                                         : F64.V3 -> F64.V3 -> F64.V3
F64.V3.new                                                         : F64 -> F64 -> F64 -> F64.V3
F64.V3.norm                                                        : F64.V3 -> F64.V3
F64.V3.point_segment_dist                                          : F64.V3 -> F64.Segment -> F64
F64.V3.point_segment_sqrdist                                       : F64.V3 -> F64.Segment -> F64
F64.V3.polygon_to_segments.cons                                    : F64.V3 -> F64.V3 -> F64.V3 -> Maybe(F64.V3) -> Maybe(F64.V3) -> List(F64.Segment) -> Maybe(F64.V3) -> Maybe(F64.V3) -> List(F64.Segment)
F64.V3.polygon_to_segments                                         : F64.V3 -> F64.V3 -> List(F64.V3) -> List(F64.Segment)
F64.V3.polygon_to_segments.nil                                     : F64.V3 -> F64.V3 -> Maybe(F64.V3) -> Maybe(F64.V3) -> List(F64.Segment)
F64.V3.polygon_to_segments.transform                               : F64.V3 -> F64.V3 -> F64.V3 -> F64.V3
F64.V3.rot_90                                                      : F64.V3 -> F64.V3
F64.V3.rotate                                                      : F64 -> F64.V3 -> F64.V3 -> F64.V3
F64.V3.scale                                                       : F64 -> F64.V3 -> F64.V3
F64.V3.sqr_dist                                                    : F64.V3 -> F64.V3 -> F64
F64.V3.sub                                                         : F64.V3 -> F64.V3 -> F64.V3
F64._1                                                             : F64
F64.acos                                                           : F64 -> F64
F64.add                                                            : F64 -> F64 -> F64
F64.asin                                                           : F64 -> F64
F64.atan                                                           : F64 -> F64 -> F64
F64.cmp                                                            : F64 -> F64 -> Cmp
F64.cos                                                            : F64 -> F64
F64.div                                                            : F64 -> F64 -> F64
F64.eql                                                            : F64 -> F64 -> Bool
F64.exp                                                            : F64 -> F64 -> F64
F64.floor                                                          : F64 -> F64
F64                                                                : Type
F64.from_bool                                                      : Bool -> F64
F64.gte                                                            : F64 -> F64 -> Bool
F64.gtn                                                            : F64 -> F64 -> Bool
F64.if                                                             : <A: Type> -> (x: F64) -> (ct: A) -> (cf: A) -> A
F64.is_between                                                     : F64 -> F64 -> F64 -> Bool
F64.log                                                            : F64 -> F64
F64.lte                                                            : F64 -> F64 -> Bool
F64.ltn                                                            : F64 -> F64 -> Bool
F64.max                                                            : F64 -> F64 -> F64
F64.min                                                            : F64 -> F64 -> F64
F64.mod                                                            : F64 -> F64 -> F64
F64.mul                                                            : F64 -> F64 -> F64
F64.new                                                            : Word(Nat.64) -> F64
F64.parse                                                          : String -> F64
F64.parse_binary                                                   : String -> F64
F64.pi                                                             : F64
F64.pow                                                            : F64 -> F64 -> F64
F64.sin                                                            : F64 -> F64
F64.sqrt                                                           : F64 -> F64
F64.sub                                                            : F64 -> F64 -> F64
F64.tan                                                            : F64 -> F64
Function.call                                                      : <A: Type> -> <B: Type> -> (x: A) -> (f: A -> B) -> B
Function.comp                                                      : <A: Type> -> <B: Type> -> <C: B -> Type> -> (g: (b: B) -> C(b)) -> (f: A -> B) -> (x: A) -> C(f(x))
Function.const                                                     : <A: Type> -> (x: A) -> (y: A) -> A
Function.curry                                                     : <A: Type> -> <B: Type> -> <C: Type> -> (f: Pair(A)(B) -> C) -> (x: A) -> (y: B) -> C
Function.flip                                                      : <A: Type> -> <B: Type> -> <C: Type> -> (f: A -> B -> C) -> (y: B) -> (x: A) -> C
Function                                                           : (A: Type) -> (B: A -> Type) -> Type
Function.id                                                        : <A: Type> -> (x: A) -> A
Function.pipe                                                      : <A: Type> -> <B: Type> -> (x: A) -> (f: A -> B) -> B
Function.uncurry                                                   : <A: Type> -> <B: Type> -> <C: Type> -> (f: A -> B -> C) -> (p: Pair(A)(B)) -> C
IO.end                                                             : <A: Type> -> A -> IO(A)
IO                                                                 : Type -> Type
IO.inp                                                             : <A: Type> -> String -> IO(A) -> IO(A)
IO.log                                                             : <A: Type> -> String -> Unit -> IO(A) -> IO(A)
JSON.array                                                         : List(JSON) -> JSON
JSON.bool                                                          : Bool -> JSON
JSON                                                               : Type
JSON.null                                                          : JSON
JSON.number                                                        : F64 -> JSON
JSON.object                                                        : List(Pair(String)(JSON)) -> JSON
JSON.string                                                        : String -> JSON
Lang.Cont                                                          : Type
Lang.all                                                           : Parser(Core.Ctx -> Core)
Lang.ann                                                           : Core.Ctx -> Core -> Parser(Core.Ctx -> Core)
Lang.app                                                           : Core.Ctx -> Core -> Parser(Core.Ctx -> Core)
Lang.arr                                                           : Core.Ctx -> Core -> Parser(Core.Ctx -> Core)
Lang.block_comment                                                 : Parser(Unit)
Lang.core                                                          : Parser(Core)
Lang.enclose                                                       : <A: Type> -> Parser(A) -> Parser(Pair(Bool)(A))
Lang.is_name                                                       : Char -> Bool
Lang.is_space                                                      : Char -> Bool
Lang.lam                                                           : Parser(Core.Ctx -> Core)
Lang.let                                                           : Parser(Core.Ctx -> Core)
Lang.line_comment                                                  : Parser(Unit)
Lang.nam                                                           : Bool -> Parser(String)
Lang.open                                                          : Parser(Bool)
Lang.par                                                           : Parser(Core.Ctx -> Core)
Lang.parse                                                         : (s: String) -> Parser.type(Core)(Parser.run_default<Core>(Lang.core)(s))
Lang.pip                                                           : Core.Ctx -> Core -> Parser(Core.Ctx -> Core)
Lang.pst                                                           : Core.Ctx -> Core -> Parser(Core.Ctx -> Core)
Lang.space                                                         : Parser(Unit)
Lang.symbol                                                        : String -> Parser(String)
Lang.test                                                          : String
Lang.trm                                                           : Parser(Core.Ctx -> Core)
Lang.typ                                                           : Parser(Core.Ctx -> Core)
Lang.var                                                           : Parser(Core.Ctx -> Core)
Lang.whitespace                                                    : Parser(Unit)
List.all                                                           : <A: Type> -> A -> Bool -> List(A) -> Bool
List.all_true                                                      : List(Bool) -> Bool
List.any                                                           : <A: Type> -> A -> Bool -> List(A) -> Bool
List.any_true                                                      : List(Bool) -> Bool
List.append                                                        : <A: Type> -> List(A) -> A -> List(A)
List.at                                                            : <A: Type> -> List(A) -> Nat -> Maybe(A)
List.bind                                                          : <A: Type> -> <B: Type> -> List(A) -> A -> List(B) -> List(B)
List.chunk                                                         : <A: Type> -> Nat -> List(A) -> Maybe(List(A))
List.concat                                                        : <A: Type> -> List(A) -> List(A) -> List(A)
List.cons                                                          : <A: Type> -> (head: A) -> (tail: List(A)) -> List(A)
List.drop                                                          : <A: Type> -> Nat -> List(A) -> List(A)
List.filter                                                        : <A: Type> -> A -> Bool -> List(A) -> List(A)
List.find                                                          : <A: Type> -> A -> Bool -> List(A) -> Maybe(A)
List.find_last.aux                                                 : <A: Type> -> List(A) -> A -> Nat -> Bool -> Nat -> Maybe(Pair(A)(Nat)) -> Maybe(Pair(A)(Nat))
List.find_last                                                     : <A: Type> -> List(A) -> A -> Nat -> Bool -> Maybe(Pair(A)(Nat))
List.flatten                                                       : <A: Type> -> List(List(A)) -> List(A)
List                                                               : (A: Type) -> Type
List.fold                                                          : <A: Type> -> <B: Type> -> B -> A -> B -> B -> List(A) -> B
List.ifind.aux                                                     : <A: Type> -> List(A) -> A -> Nat -> Bool -> Nat -> Maybe(Pair(A)(Nat))
List.ifind                                                         : <A: Type> -> List(A) -> A -> Nat -> Bool -> Maybe(Pair(A)(Nat))
List.imap                                                          : <A: Type> -> <B: Type> -> Nat -> A -> B -> List(A) -> List(B)
List.intercalate                                                   : <A: Type> -> (sep: A) -> (xs: List(A)) -> List(A)
List.is_empty                                                      : <A: Type> -> List(A) -> Bool
List.length                                                        : <A: Type> -> List(A) -> Nat
List.map                                                           : <A: Type> -> <B: Type> -> A -> B -> List(A) -> List(B)
List.nil                                                           : <A: Type> -> List(A)
List.push                                                          : <A: Type> -> A -> List(A) -> List(A)
List.reverse.aux                                                   : <A: Type> -> List(A) -> List(A) -> List(A)
List.reverse                                                       : <A: Type> -> List(A) -> List(A)
List.show                                                          : <A: Type> -> (f: A -> String) -> (xs: List(A)) -> String
List.single                                                        : <A: Type> -> (x: A) -> List(A)
List.take                                                          : <A: Type> -> Nat -> List(A) -> List(A)
List.to_concat                                                     : <A: Type> -> (xs: List(A)) -> Concat(A)
List.zip_with                                                      : <A: Type> -> <B: Type> -> <C: Type> -> A -> B -> C -> List(A) -> List(B) -> List(C)
Map                                                                : (A: Type) -> Type
Map.get                                                            : <A: Type> -> Bits -> Map(A) -> Maybe(A)
Map.lookup                                                         : <A: Type> -> Bits -> A -> Map(A) -> Pair(A)(Map(A))
Map.mix                                                            : <A: Type> -> Maybe(A) -> Map(A) -> Map(A) -> Map(A)
Map.new                                                            : <A: Type> -> Map(A)
query                                                              : <A: Type> -> A -> Pair(A)(A) -> Bits -> Map(A) -> Pair(Map(A))(Maybe(A))
Map.set                                                            : <A: Type> -> Bits -> A -> Map(A) -> Map(A)
Map.tie                                                            : <A: Type> -> Maybe(A) -> Map(A) -> Map(A) -> Map(A)
Maybe.bind                                                         : <A: Type> -> <B: Type> -> Maybe(A) -> A -> Maybe(B) -> Maybe(B)
Maybe.extract                                                      : <A: Type> -> Maybe(A) -> A -> A
Maybe                                                              : Type -> Type
Maybe.join                                                         : <A: Type> -> Maybe(Maybe(A)) -> Maybe(A)
Maybe.map                                                          : <A: Type> -> <B: Type> -> A -> B -> Maybe(A) -> Maybe(B)
Maybe.none                                                         : <A: Type> -> Maybe(A)
Maybe.some                                                         : <A: Type> -> A -> Maybe(A)
Nat.0                                                              : Nat
Nat.1                                                              : Nat
Nat.10                                                             : Nat
Nat.11                                                             : Nat
Nat.12                                                             : Nat
Nat.13                                                             : Nat
Nat.14                                                             : Nat
Nat.15                                                             : Nat
Nat.16                                                             : Nat
Nat.17                                                             : Nat
Nat.18                                                             : Nat
Nat.19                                                             : Nat
Nat.2                                                              : Nat
Nat.20                                                             : Nat
Nat.21                                                             : Nat
Nat.22                                                             : Nat
Nat.23                                                             : Nat
Nat.24                                                             : Nat
Nat.25                                                             : Nat
Nat.26                                                             : Nat
Nat.27                                                             : Nat
Nat.28                                                             : Nat
Nat.29                                                             : Nat
Nat.3                                                              : Nat
Nat.30                                                             : Nat
Nat.31                                                             : Nat
Nat.32                                                             : Nat
Nat.33                                                             : Nat
Nat.34                                                             : Nat
Nat.35                                                             : Nat
Nat.36                                                             : Nat
Nat.37                                                             : Nat
Nat.38                                                             : Nat
Nat.39                                                             : Nat
Nat.4                                                              : Nat
Nat.40                                                             : Nat
Nat.41                                                             : Nat
Nat.42                                                             : Nat
Nat.43                                                             : Nat
Nat.44                                                             : Nat
Nat.45                                                             : Nat
Nat.46                                                             : Nat
Nat.47                                                             : Nat
Nat.48                                                             : Nat
Nat.49                                                             : Nat
Nat.5                                                              : Nat
Nat.50                                                             : Nat
Nat.51                                                             : Nat
Nat.52                                                             : Nat
Nat.53                                                             : Nat
Nat.54                                                             : Nat
Nat.55                                                             : Nat
Nat.56                                                             : Nat
Nat.57                                                             : Nat
Nat.58                                                             : Nat
Nat.59                                                             : Nat
Nat.6                                                              : Nat
Nat.60                                                             : Nat
Nat.61                                                             : Nat
Nat.62                                                             : Nat
Nat.63                                                             : Nat
Nat.64                                                             : Nat
Nat.7                                                              : Nat
Nat.8                                                              : Nat
Nat.9                                                              : Nat
Nat.add                                                            : Nat -> Nat -> Nat
Nat.apply                                                          : <A: Type> -> Nat -> A -> A -> A -> A
Nat.cmp                                                            : Nat -> Nat -> Cmp
Nat.div                                                            : Nat -> Nat -> Nat
Nat.div_mod.aux                                                    : Nat -> Nat -> Nat -> Pair(Nat)(Nat)
Nat.div_mod                                                        : Nat -> Nat -> Pair(Nat)(Nat)
Nat.double                                                         : Nat -> Nat
Nat.eql                                                            : Nat -> Nat -> Bool
Nat                                                                : Type
Nat.gte                                                            : Nat -> Nat -> Bool
Nat.gtn                                                            : Nat -> Nat -> Bool
Nat.induction                                                      : (n: Nat) -> <P: Nat -> Type> -> (z: P(Nat.zero)) -> (s: (m: Nat) -> P(m) -> P(Nat.succ(m))) -> P(n)
Nat.is_zero                                                        : Nat -> Bool
Nat.lte                                                            : Nat -> Nat -> Bool
Nat.ltn                                                            : Nat -> Nat -> Bool
Nat.mod                                                            : Nat -> Nat -> Nat
Nat.mul                                                            : Nat -> Nat -> Nat
Nat.parse_decimal                                                  : String -> Nat
Nat.parse_decimal.go                                               : String -> Nat -> Nat
Nat.pred                                                           : Nat -> Nat
Nat.show.aux                                                       : Nat -> Nat -> String -> String
Nat.show.digit                                                     : Nat -> Nat -> Char
Nat.show                                                           : Nat -> String
Nat.show_base                                                      : Nat -> Nat -> String
Nat.solve_for                                                      : (x: Nat) -> <E: (x: Nat) -> Type> -> <P: E(x)> -> Nat
Nat.sub                                                            : Nat -> Nat -> Nat
Nat.sub_rem                                                        : Nat -> Nat -> Either(Nat)(Nat)
Nat.succ                                                           : Nat -> Nat
Nat.sum                                                            : Nat -> Nat
Nat.sum.go                                                         : Nat -> Nat -> Nat
Nat.to_base                                                        : Nat -> Nat -> List(Nat)
Nat.to_base.go                                                     : Nat -> Nat -> List(Nat) -> List(Nat)
Nat.to_bits                                                        : Nat -> Bits
Nat.to_string                                                      : Nat -> String
Nat.to_string_base                                                 : Nat -> Nat -> String
Nat.to_string_decimal                                              : Nat -> String
Nat.zero                                                           : Nat
Newtype.elim                                                       : <A: Type> -> <tag: String> -> (n: Newtype(A)(tag)) -> A
Newtype                                                            : (A: Type) -> (tag: String) -> Type
Newtype.val                                                        : <A: Type> -> <tag: String> -> (x: A) -> Newtype(A)(tag)
NonEmpty.cons                                                      : <A: Type> -> (head: A) -> (tail: NonEmpty(A)) -> NonEmpty(A)
NonEmpty.end                                                       : <A: Type> -> (value: A) -> NonEmpty(A)
NonEmpty                                                           : (A: Type) -> Type
NonEmpty.to_list                                                   : <A: Type> -> NonEmpty(A) -> List(A)
Not                                                                : (P: Type) -> Type
Or                                                                 : (A: Type) -> (B: Type) -> Type
Pair                                                               : Type -> Type -> Type
Pair.fst                                                           : <A: Type> -> <B: Type> -> Pair(A)(B) -> A
Pair.new                                                           : <A: Type> -> <B: Type> -> A -> B -> Pair(A)(B)
Pair.snd                                                           : <A: Type> -> <B: Type> -> Pair(A)(B) -> B
Parsec.Error.Fancy.custom                                          : <E: Type> -> (e: E) -> Parsec.Error.Fancy(E)
Parsec.Error.Fancy.fail                                            : <E: Type> -> String -> Parsec.Error.Fancy(E)
Parsec.Error.Fancy                                                 : Type -> Type
Parsec.Error.Item.end_of_input                                     : Parsec.Error.Item
Parsec.Error.Item                                                  : Type
Parsec.Error.Item.label                                            : String -> Parsec.Error.Item
Parsec.Error.Item.show                                             : Parsec.Error.Item -> String
Parsec.Error.Item.tokens                                           : String -> Parsec.Error.Item
Parsec.Error                                                       : Type -> Type
Parsec.Error.index                                                 : <E: Type> -> Parsec.Error(E) -> Nat
Parsec.Error.make_fancy                                            : <E: Type> -> Nat -> List(Parsec.Error.Fancy(E)) -> Parsec.Error(E)
Parsec.Error.make_trivial                                          : <E: Type> -> Nat -> Maybe(Parsec.Error.Item) -> List(Parsec.Error.Item) -> Parsec.Error(E)
Parsec.Error.merge                                                 : <E: Type> -> Parsec.Error(E) -> Parsec.Error(E) -> Parsec.Error(E)
Parsec.Error.show                                                  : <E: Type> -> E -> String -> Parsec.Error(E) -> String
Parsec.Reply.eaten_error                                           : <S: Type> -> <E: Type> -> <A: Type> -> Parsec.State(S)(E) -> Parsec.Error(E) -> Parsec.Reply(S)(E)(A)
Parsec.Reply.eaten_value                                           : <S: Type> -> <E: Type> -> <A: Type> -> Parsec.State(S)(E) -> A -> Parsec.Reply(S)(E)(A)
Parsec.Reply.empty_error                                           : <S: Type> -> <E: Type> -> <A: Type> -> Parsec.State(S)(E) -> Parsec.Error(E) -> Parsec.Reply(S)(E)(A)
Parsec.Reply.empty_value                                           : <S: Type> -> <E: Type> -> <A: Type> -> Parsec.State(S)(E) -> A -> Parsec.Reply(S)(E)(A)
Parsec.Reply                                                       : Type -> Type -> Type -> Type
Parsec.Reply.to_either                                             : <S: Type> -> <E: Type> -> <A: Type> -> Parsec.Reply(S)(E)(A) -> Either(Parsec.Error(E))(A)
Parsec.State.default                                               : <S: Type> -> <E: Type> -> String -> S -> Parsec.State(S)(E)
Parsec.State                                                       : Type -> Type -> Type
Parsec.State.longest_match                                         : <S: Type> -> <E: Type> -> Parsec.State(S)(E) -> Parsec.State(S)(E) -> Parsec.State(S)(E)
Parsec.State.make                                                  : <S: Type> -> <E: Type> -> String -> Nat -> List(Parsec.Error(E)) -> S -> Parsec.State(S)(E)
Parsec.any_char                                                    : <S: Type> -> <E: Type> -> Parsec(S)(E)(Char)
Parsec.ap                                                          : <S: Type> -> <E: Type> -> <A: Type> -> <B: Type> -> Parsec(S)(E)(A -> B) -> Parsec(S)(E)(A) -> Parsec(S)(E)(B)
Parsec.bind                                                        : <S: Type> -> <E: Type> -> <A: Type> -> <B: Type> -> Parsec(S)(E)(A) -> A -> Parsec(S)(E)(B) -> Parsec(S)(E)(B)
Parsec.char                                                        : <S: Type> -> <E: Type> -> Char -> Parsec(S)(E)(Char)
Parsec.choice                                                      : <S: Type> -> <E: Type> -> <A: Type> -> List(Parsec(S)(E)(A)) -> Parsec(S)(E)(A)
Parsec.eof                                                         : <S: Type> -> <E: Type> -> Parsec(S)(E)(Unit)
Parsec.fail                                                        : <S: Type> -> <E: Type> -> <A: Type> -> String -> Parsec(S)(E)(A)
Parsec                                                             : (S: Type) -> (E: Type) -> (A: Type) -> Type
Parsec.get_state                                                   : <S: Type> -> <E: Type> -> Parsec(S)(E)(Parsec.State(S)(E))
Parsec.label                                                       : <S: Type> -> <E: Type> -> <A: Type> -> String -> Parsec(S)(E)(A) -> Parsec(S)(E)(A)
Parsec.make                                                        : <S: Type> -> <E: Type> -> <A: Type> -> Parsec.State(S)(E) -> Parsec.Reply(S)(E)(A) -> Parsec(S)(E)(A)
Parsec.many                                                        : <S: Type> -> <E: Type> -> <A: Type> -> Parsec(S)(E)(A) -> Parsec(S)(E)(List(A))
Parsec.many_till                                                   : <S: Type> -> <E: Type> -> <A: Type> -> <B: Type> -> Parsec(S)(E)(A) -> Parsec(S)(E)(B) -> Parsec(S)(E)(List(A))
Parsec.map                                                         : <S: Type> -> <E: Type> -> <A: Type> -> <B: Type> -> A -> B -> Parsec(S)(E)(A) -> Parsec(S)(E)(B)
Parsec.observing                                                   : <S: Type> -> <E: Type> -> <A: Type> -> Parsec(S)(E)(A) -> Parsec(S)(E)(Either(Parsec.Error(E))(A))
Parsec.optional                                                    : <S: Type> -> <E: Type> -> <A: Type> -> Parsec(S)(E)(A) -> Parsec(S)(E)(Maybe(A))
Parsec.parse                                                       : <S: Type> -> <E: Type> -> <A: Type> -> (p: Parsec(S)(E)(A)) -> (s: Parsec.State(S)(E)) -> Parsec.type(S)(E)(A)(Parsec.run<S><E><A>(p)(s))
Parsec.peek                                                        : <S: Type> -> <E: Type> -> <A: Type> -> Parsec(S)(E)(A) -> Parsec(S)(E)(A)
Parsec.plus                                                        : <S: Type> -> <E: Type> -> <A: Type> -> Parsec(S)(E)(A) -> Parsec(S)(E)(A) -> Parsec(S)(E)(A)
Parsec.pure                                                        : <S: Type> -> <E: Type> -> <A: Type> -> (a: A) -> Parsec(S)(E)(A)
Parsec.run                                                         : <S: Type> -> <E: Type> -> <A: Type> -> Parsec(S)(E)(A) -> Parsec.State(S)(E) -> Parsec.Reply(S)(E)(A)
Parsec.run_default                                                 : <S: Type> -> <E: Type> -> <A: Type> -> Parsec(S)(E)(A) -> String -> S -> Either(Parsec.Error(E))(A)
Parsec.skip_many                                                   : <S: Type> -> <E: Type> -> <A: Type> -> Parsec(S)(E)(A) -> Parsec(S)(E)(Unit)
Parsec.take                                                        : <S: Type> -> <E: Type> -> <A: Type> -> String -> Nat -> Parsec(S)(E)(String)
Parsec.take_while                                                  : <S: Type> -> <E: Type> -> Char -> Bool -> Parsec(S)(E)(String)
Parsec.take_while1                                                 : <S: Type> -> <E: Type> -> String -> Char -> Bool -> Parsec(S)(E)(String)
Parsec.test1                                                       : String
Parsec.then                                                        : <S: Type> -> <E: Type> -> <A: Type> -> <B: Type> -> Parsec(S)(E)(A) -> Parsec(S)(E)(B) -> Parsec(S)(E)(B)
Parsec.throw                                                       : <S: Type> -> <E: Type> -> <A: Type> -> Parsec.Error(E) -> Parsec(S)(E)(A)
Parsec.token                                                       : <S: Type> -> <E: Type> -> <A: Type> -> Char -> Maybe(A) -> List(Parsec.Error.Item) -> Parsec(S)(E)(A)
Parsec.tokens                                                      : <S: Type> -> <E: Type> -> String -> Parsec(S)(E)(String)
Parsec.try                                                         : <S: Type> -> <E: Type> -> <A: Type> -> Parsec(S)(E)(A) -> Parsec(S)(E)(A)
Parsec.type                                                        : (S: Type) -> (E: Type) -> (A: Type) -> Parsec.Reply(S)(E)(A) -> Type
Parsec.zero                                                        : <S: Type> -> <E: Type> -> <A: Type> -> Parsec(S)(E)(A)
Parser.Error                                                       : Type
Parser.Error.show                                                  : Parser.Error -> String
Parser.Reply                                                       : Type -> Type
Parser.State.default                                               : String -> Parser.State
Parser.State                                                       : Type
Parser.any_char                                                    : Parser(Char)
Parser.ap                                                          : <A: Type> -> <B: Type> -> Parser(A -> B) -> Parser(A) -> Parser(B)
Parser.bind                                                        : <A: Type> -> <B: Type> -> Parser(A) -> A -> Parser(B) -> Parser(B)
Parser.char                                                        : Char -> Parser(Char)
Parser.choice                                                      : <A: Type> -> List(Parser(A)) -> Parser(A)
Parser.eof                                                         : Parser(Unit)
Parser.fail                                                        : <A: Type> -> String -> Parser(A)
Parser                                                             : Type -> Type
Parser.label                                                       : <A: Type> -> String -> Parser(A) -> Parser(A)
Parser.many                                                        : <A: Type> -> Parser(A) -> Parser(List(A))
Parser.many_till                                                   : <A: Type> -> <B: Type> -> Parser(A) -> Parser(B) -> Parser(List(A))
Parser.observing                                                   : <A: Type> -> Parser(A) -> Parser(Either(Parser.Error)(A))
Parser.optional                                                    : <A: Type> -> Parser(A) -> Parser(Maybe(A))
Parser.parse                                                       : <A: Type> -> (p: Parser(A)) -> (s: String) -> Parser.type(A)(Parser.run<A>(p)(Parser.State.default(s)))
Parser.plus                                                        : <A: Type> -> Parser(A) -> Parser(A) -> Parser(A)
Parser.pure                                                        : <A: Type> -> (a: A) -> Parser(A)
Parser.run                                                         : <A: Type> -> Parser(A) -> Parser.State -> Parser.Reply(A)
Parser.run_default                                                 : <A: Type> -> Parser(A) -> String -> Parser.Reply(A)
Parser.run_either                                                  : <A: Type> -> Parser(A) -> String -> Either(Parser.Error)(A)
Parser.skip_many                                                   : <A: Type> -> Parser(A) -> Parser(Unit)
Parser.take                                                        : <A: Type> -> String -> Nat -> Parser(String)
Parser.take_while                                                  : Char -> Bool -> Parser(String)
Parser.take_while1                                                 : String -> Char -> Bool -> Parser(String)
Parser.then                                                        : <A: Type> -> <B: Type> -> Parser(A) -> Parser(B) -> Parser(B)
Parser.token                                                       : <A: Type> -> Char -> Maybe(A) -> List(Parsec.Error.Item) -> Parser(A)
Parser.tokens                                                      : String -> Parser(String)
Parser.try                                                         : <A: Type> -> Parser(A) -> Parser(A)
Parser.type                                                        : (A: Type) -> Parser.Reply(A) -> Type
Parser.zero                                                        : <A: Type> -> Parser(A)
Research.core_in_core                                              : String
Research.Var                                                       : Type
Research.Var.new                                                   : Char -> Nat -> Research.Var
Research.Ctx                                                       : Type
Research.Ctx.nil                                                   : Research.Ctx
Research.Ctx.ext                                                   : Char -> Nat -> Research.Ctx -> Research.Ctx
Research.Ctx.get                                                   : Char -> Research.Ctx -> Maybe(Nat)
Research.parse_fun.filt                                            : String -> String
Research.parse_fun.typ0                                            : String -> Research.Ctx -> Type
Research.parse_fun.typ1                                            : Char -> String -> Research.Ctx -> Type
Research.parse_fun.term                                            : (str: String) -> (ctx: Research.Ctx) -> Research.parse_fun.typ0(str)(ctx)
Research.fun                                                       : (str: String) -> Research.parse_fun.typ0(Research.parse_fun.filt(str))(Research.Ctx.nil)
Research.crazy                                                     : Nat -> Nat -> Nat -> Nat
Research.it_works                                                  : Equal(Nat)(Nat.1)(Research.crazy(Nat.0)(Nat.1)(Nat.2))
Research.equal_mul                                                 : Equal(Nat)(Nat.mul(Nat.mul(Nat.32)(Nat.16))(Nat.1))(Nat.mul(Nat.mul(Nat.16)(Nat.32))(Nat.1))
Research.floats                                                    : F64
Research.get_syntax                                                : Nat
Research.inference0                                                : Word(Nat.4)
Research.inference1                                                : Bool -> Bool
Research.nat_literals                                              : IO(Unit)
Research.solve                                                     : Nat
Research.synthesis0                                                : <A: Type> -> <B: Type> -> <C: Type> -> B -> C -> A -> B -> A -> C
Research.synthesis1                                                : <P: Nat -> Type> -> (f: <n: Nat> -> P(n) -> P(Nat.succ(n))) -> (x: P(Nat.zero)) -> P(Nat.3)
Set                                                                : Type
Set.get                                                            : Bits -> Set -> Bool
Set.new                                                            : Set
Set.set                                                            : Bits -> Set -> Set
Show                                                               : (x: String) -> Type
Show.msg                                                           : (x: String) -> Show(x)
Sigma                                                              : (A: Type) -> (B: A -> Type) -> Type
Sigma.fst                                                          : <A: Type> -> <B: A -> Type> -> (sig: Sigma(A)(B)) -> A
Sigma.new                                                          : <A: Type> -> <B: A -> Type> -> (a: A) -> B(a) -> Sigma(A)(B)
Sigma.snd                                                          : <A: Type> -> <B: A -> Type> -> (sig: Sigma(A)(B)) -> B(Sigma.fst<A><B>(sig))
String.chunk                                                       : Nat -> String -> Maybe(String)
String.concat                                                      : String -> String -> String
String.cons                                                        : Char -> String -> String
String.drop                                                        : Nat -> String -> String
String.drop_until                                                  : Char -> Bool -> String -> String
String.drop_while                                                  : Char -> Bool -> String -> String
String.eql                                                         : String -> String -> Bool
String.filter                                                      : Char -> Bool -> String -> String
String.flatten                                                     : List(String) -> String
String                                                             : Type
String.is_empty                                                    : String -> Bool
String.length                                                      : String -> Nat
String.nil                                                         : String
String.quote                                                       : String -> String
String.reverse                                                     : String -> String
String.reverse.go                                                  : String -> String -> String
String.single                                                      : (x: Char) -> String
String.tail                                                        : String -> String
String.take                                                        : Nat -> String -> String
String.take_n.aux                                                  : Nat -> String -> String -> Maybe(Pair(String)(String))
String.take_n                                                      : Nat -> String -> Maybe(Pair(String)(String))
String.take_while.aux                                              : Char -> Bool -> String -> String -> Pair(String)(String)
String.take_while                                                  : Char -> Bool -> String -> Pair(String)(String)
String.to_bits                                                     : String -> Bits
String.to_list                                                     : String -> List(Char)
String.to_set                                                      : String -> Set
String.to_stringifier                                              : String -> Stringifier
Stringifier.concat                                                 : Stringifier -> Stringifier -> Stringifier
Stringifier                                                        : Type
Stringifier.to_string                                              : Stringifier -> String
Subset                                                             : (A: Type) -> (B: A -> Type) -> Type
Subset.new                                                         : <A: Type> -> <B: A -> Type> -> (a: A) -> <b: B(a)> -> Subset(A)(B)
TaelinArena.Constants.ONE_SEC                                      : F64
TaelinArena.Constants.POS_X_KEY                                    : Bits
TaelinArena.Constants.POS_Y_KEY                                    : Bits
TaelinArena.Game.ActionId                                          : Type
TaelinArena.Game.Buff                                              : Type
TaelinArena.Game.Buff.hasted                                       : F64 -> F64 -> TaelinArena.Game.Buff
TaelinArena.Game.Buff.rooted                                       : F64 -> TaelinArena.Game.Buff
TaelinArena.Game.Buff.shielded                                     : F64 -> F64 -> TaelinArena.Game.Buff
TaelinArena.Game.Buff.silenced                                     : F64 -> TaelinArena.Game.Buff
TaelinArena.Game.Buff.slowed                                       : F64 -> F64 -> TaelinArena.Game.Buff
TaelinArena.Game.Buff.stuned                                       : F64 -> TaelinArena.Game.Buff
TaelinArena.Game.Command                                           : Type
TaelinArena.Game.Command.new                                       : TaelinArena.Game.PlayerId -> TaelinArena.Game.Input -> TaelinArena.Game.Command
TaelinArena.Game.Effect.damage                                     : F64 -> TaelinArena.Game.Effect
TaelinArena.Game.Effect                                            : Type
TaelinArena.Game.Effect.haste                                      : F64 -> F64 -> TaelinArena.Game.Effect
TaelinArena.Game.Effect.heal                                       : F64 -> TaelinArena.Game.Effect
TaelinArena.Game.Effect.impulse                                    : F64 -> F64.V3 -> TaelinArena.Game.Effect
TaelinArena.Game.Effect.repulse                                    : F64 -> TaelinArena.Game.Effect
TaelinArena.Game.Effect.root                                       : F64 -> TaelinArena.Game.Effect
TaelinArena.Game.Effect.shield                                     : F64 -> F64 -> TaelinArena.Game.Effect
TaelinArena.Game.Effect.silence                                    : F64 -> TaelinArena.Game.Effect
TaelinArena.Game.Effect.slow                                       : F64 -> F64 -> TaelinArena.Game.Effect
TaelinArena.Game.Effect.stun                                       : F64 -> TaelinArena.Game.Effect
TaelinArena.Game.Effect.teleport                                   : F64.V3 -> F64 -> TaelinArena.Game.Effect
TaelinArena.Game.Game                                              : Type
TaelinArena.Game.Game.new                                          : List(TaelinArena.Game.Thing) -> TaelinArena.Game.Game
TaelinArena.Game.Hit                                               : Type
TaelinArena.Game.Hit.new                                           : List(TaelinArena.Game.Effect) -> F64.V3 -> F64.V3 -> TaelinArena.Game.Hitbox -> TaelinArena.Game.Hit
TaelinArena.Game.Hitbox.cbox                                       : F64 -> TaelinArena.Game.Hitbox
TaelinArena.Game.Hitbox                                            : Type
TaelinArena.Game.Hitbox.nbox                                       : TaelinArena.Game.Hitbox
TaelinArena.Game.Hitbox.pbox                                       : List(F64.V3) -> TaelinArena.Game.Hitbox
TaelinArena.Game.Input.cmsg                                        : String -> TaelinArena.Game.Input
TaelinArena.Game.Input                                             : Type
TaelinArena.Game.Input.key0                                        : F64.V3 -> TaelinArena.Game.Input
TaelinArena.Game.Input.key1                                        : F64.V3 -> TaelinArena.Game.Input
TaelinArena.Game.Input.key2                                        : F64.V3 -> TaelinArena.Game.Input
TaelinArena.Game.Input.key3                                        : F64.V3 -> TaelinArena.Game.Input
TaelinArena.Game.Input.key4                                        : F64.V3 -> TaelinArena.Game.Input
TaelinArena.Game.Input.key5                                        : F64.V3 -> TaelinArena.Game.Input
TaelinArena.Game.Input.sdir                                        : F64.V3 -> TaelinArena.Game.Input
TaelinArena.Game.Light                                             : Type
TaelinArena.Game.Light.new                                         : F64.V3 -> F64 -> F64 -> F64.V3 -> F64.V3 -> TaelinArena.Game.Light
TaelinArena.Game.ModelId                                           : Type
F64.Ordering.EQ                                                    : F64.Ordering
F64.Ordering.GT                                                    : F64.Ordering
F64.Ordering.LT                                                    : F64.Ordering
F64.Ordering                                                       : Type
TaelinArena.Game.PlayerId                                          : Type
TaelinArena.Game.SideId                                            : Type
TaelinArena.Game.Thing                                             : Type
TaelinArena.Game.Thing.new                                         : TaelinArena.Game.TxFunction -> TaelinArena.Game.PlayerId -> TaelinArena.Game.ModelId -> TaelinArena.Game.ActionId -> TaelinArena.Game.SideId -> Map(F64) -> String -> List(TaelinArena.Game.Light) -> F64 -> F64.V3 -> F64 -> F64 -> F64.V3 -> F64.V3 -> F64.V3 -> F64.V3 -> TaelinArena.Game.Hitbox -> F64 -> F64 -> F64 -> F64.V3 -> List(TaelinArena.Game.Buff) -> List(TaelinArena.Game.Thing) -> List(TaelinArena.Game.Hit) -> Bool -> Bool -> TaelinArena.Game.Thing
TaelinArena.Game.TxFunction                                        : Type
TaelinArena.Game.animate                                           : (self: TaelinArena.Game.Thing) -> (boost: F64) -> (model: F64) -> (count: F64) -> (durat: F64) -> TaelinArena.Game.Thing
TaelinArena.Game.animate_between                                   : (self: TaelinArena.Game.Thing) -> (boost: F64) -> (model: F64) -> (count: F64) -> (from: F64) -> (til: F64) -> TaelinArena.Game.Thing
TaelinArena.Game.animate_die                                       : (self: TaelinArena.Game.Thing) -> (boost: F64) -> (model: F64) -> (count: F64) -> (durat: F64) -> TaelinArena.Game.Thing
TaelinArena.Game.animate_with_blink                                : (self: TaelinArena.Game.Thing) -> (boost: F64) -> (model_atk: F64) -> (model_idle: F64) -> (count: F64) -> (from: F64) -> (til: F64) -> TaelinArena.Game.Thing
TaelinArena.Game.at_dist                                           : TaelinArena.Game.Thing -> F64 -> F64.V3
TaelinArena.Game.at_max_dist                                       : TaelinArena.Game.Thing -> F64 -> F64.V3
TaelinArena.Game.at_min_dist                                       : TaelinArena.Game.Thing -> F64 -> F64.V3
TaelinArena.Game.between_dist                                      : TaelinArena.Game.Thing -> F64 -> F64 -> F64.V3
TaelinArena.Game.blink                                             : (self: TaelinArena.Game.Thing) -> (at_tik: F64) -> (to_pos: F64.V3) -> TaelinArena.Game.Thing
TaelinArena.Game.cast                                              : TaelinArena.Game.Thing -> F64 -> List(TaelinArena.Game.Hit) -> TaelinArena.Game.Thing
TaelinArena.Game.combine_mov_buffs                                 : TaelinArena.Game.Buff -> F64 -> F64
F64.compare_numbers                                                : F64 -> F64 -> F64.Ordering
TaelinArena.Game.create_at                                         : (self: TaelinArena.Game.Thing) -> (at_tik: F64) -> (new_thing: TaelinArena.Game.TxFunction) -> TaelinArena.Game.Thing
TaelinArena.Game.dash                                              : (self: TaelinArena.Game.Thing) -> (speed: F64) -> (from_tik: F64) -> (til_tik: F64) -> TaelinArena.Game.Thing
TaelinArena.Game.die                                               : TaelinArena.Game.Thing -> F64 -> TaelinArena.Game.Thing
TaelinArena.Game.end_thing                                         : (self: TaelinArena.Game.Thing) -> (tx: TaelinArena.Game.TxFunction) -> (after_tiks: F64) -> (stt_key: Bits) -> TaelinArena.Game.Thing
TaelinArena.Game.get_position_by_pid                               : TaelinArena.Game.PlayerId -> TaelinArena.Game.Game -> F64.V3
TaelinArena.Game.get_stt_value                                     : TaelinArena.Game.Thing -> Bits -> F64
TaelinArena.Game.get_stt_value_v3                                  : (self: TaelinArena.Game.Thing) -> F64.V3
TaelinArena.Game.get_thing_act                                     : (thi: TaelinArena.Game.Thing) -> TaelinArena.Game.ActionId
TaelinArena.Game.get_thing_box                                     : (thi: TaelinArena.Game.Thing) -> TaelinArena.Game.Hitbox
TaelinArena.Game.get_thing_bst                                     : (thi: TaelinArena.Game.Thing) -> F64
TaelinArena.Game.get_thing_buf                                     : (thi: TaelinArena.Game.Thing) -> List(TaelinArena.Game.Buff)
TaelinArena.Game.get_thing_by_pid.cond                             : TaelinArena.Game.PlayerId -> TaelinArena.Game.Thing -> Bool
TaelinArena.Game.get_thing_by_pid                                  : TaelinArena.Game.PlayerId -> TaelinArena.Game.Game -> Maybe(TaelinArena.Game.Thing)
TaelinArena.Game.get_thing_chi                                     : (thi: TaelinArena.Game.Thing) -> List(TaelinArena.Game.Thing)
TaelinArena.Game.get_thing_die                                     : (thi: TaelinArena.Game.Thing) -> Bool
TaelinArena.Game.get_thing_dir                                     : (thi: TaelinArena.Game.Thing) -> F64.V3
TaelinArena.Game.get_thing_dmg                                     : (thi: TaelinArena.Game.Thing) -> F64
TaelinArena.Game.get_thing_fun                                     : (thi: TaelinArena.Game.Thing) -> TaelinArena.Game.TxFunction
TaelinArena.Game.get_thing_hit                                     : (thi: TaelinArena.Game.Thing) -> List(TaelinArena.Game.Hit)
TaelinArena.Game.get_thing_knk                                     : (thi: TaelinArena.Game.Thing) -> F64.V3
TaelinArena.Game.get_thing_lit                                     : (thi: TaelinArena.Game.Thing) -> List(TaelinArena.Game.Light)
TaelinArena.Game.get_thing_mhp                                     : (thi: TaelinArena.Game.Thing) -> F64
TaelinArena.Game.get_thing_mid                                     : (thi: TaelinArena.Game.Thing) -> TaelinArena.Game.ModelId
TaelinArena.Game.get_thing_mov                                     : (thi: TaelinArena.Game.Thing) -> F64
TaelinArena.Game.get_thing_nam                                     : (thi: TaelinArena.Game.Thing) -> String
TaelinArena.Game.get_thing_pad                                     : (thi: TaelinArena.Game.Thing) -> F64.V3
TaelinArena.Game.get_thing_pid                                     : (thi: TaelinArena.Game.Thing) -> TaelinArena.Game.PlayerId
TaelinArena.Game.get_thing_pos                                     : (thi: TaelinArena.Game.Thing) -> F64.V3
TaelinArena.Game.get_thing_rst                                     : (thi: TaelinArena.Game.Thing) -> Bool
TaelinArena.Game.get_thing_sid                                     : (thi: TaelinArena.Game.Thing) -> TaelinArena.Game.SideId
TaelinArena.Game.get_thing_stt                                     : (thi: TaelinArena.Game.Thing) -> Map(F64)
TaelinArena.Game.get_thing_tik                                     : (thi: TaelinArena.Game.Thing) -> F64
TaelinArena.Game.get_thing_trg                                     : (thi: TaelinArena.Game.Thing) -> F64.V3
TaelinArena.Game.get_thing_vel                                     : (thi: TaelinArena.Game.Thing) -> F64.V3
TaelinArena.Game.get_thing_wei                                     : (thi: TaelinArena.Game.Thing) -> F64
TaelinArena.Game.handle_shields                                    : (hit_dmg: F64) -> (self: TaelinArena.Game.Thing) -> TaelinArena.Game.Thing
TaelinArena.Game.has_shields                                       : TaelinArena.Game.Thing -> Bool
TaelinArena.Game.illumine                                          : TaelinArena.Game.Thing -> F64 -> F64 -> List(TaelinArena.Game.Light) -> TaelinArena.Game.Thing
TaelinArena.Game.init_act                                          : (self: TaelinArena.Game.Thing) -> (new_act: F64) -> (new_trg: F64.V3) -> TaelinArena.Game.Thing
TaelinArena.Game.is_rooted                                         : (self: TaelinArena.Game.Thing) -> Bool
TaelinArena.Game.is_silenced                                       : TaelinArena.Game.Thing -> Bool
TaelinArena.Game.is_stunned                                        : TaelinArena.Game.Thing -> Bool
TaelinArena.Game.is_using_buff                                     : TaelinArena.Game.Thing -> Bits -> Bool
TaelinArena.Game.is_walking                                        : TaelinArena.Game.Thing -> F64
TaelinArena.Game.map_stage                                         : TaelinArena.Game.Thing -> TaelinArena.Game.Thing -> TaelinArena.Game.Game -> TaelinArena.Game.Game
TaelinArena.Game.map_stt_key                                       : TaelinArena.Game.Thing -> Bits -> F64 -> F64 -> TaelinArena.Game.Thing
TaelinArena.Game.move.fmc                                          : TaelinArena.Game.Thing -> F64.V3 -> TaelinArena.Game.Thing
TaelinArena.Game.reset                                             : TaelinArena.Game.Thing -> F64 -> TaelinArena.Game.Thing
TaelinArena.Game.set_stt_value_v3                                  : (self: TaelinArena.Game.Thing) -> (v3: F64.V3) -> TaelinArena.Game.Thing
TaelinArena.Game.set_thing_act                                     : (thi: TaelinArena.Game.Thing) -> (new_act: TaelinArena.Game.ActionId) -> TaelinArena.Game.Thing
TaelinArena.Game.set_thing_box                                     : (thi: TaelinArena.Game.Thing) -> (new_box: TaelinArena.Game.Hitbox) -> TaelinArena.Game.Thing
TaelinArena.Game.set_thing_bst                                     : (thi: TaelinArena.Game.Thing) -> (new_bst: F64) -> TaelinArena.Game.Thing
TaelinArena.Game.set_thing_buf                                     : (thi: TaelinArena.Game.Thing) -> (new_buf: List(TaelinArena.Game.Buff)) -> TaelinArena.Game.Thing
TaelinArena.Game.set_thing_chi                                     : (thi: TaelinArena.Game.Thing) -> (new_chi: List(TaelinArena.Game.Thing)) -> TaelinArena.Game.Thing
TaelinArena.Game.set_thing_die                                     : (thi: TaelinArena.Game.Thing) -> (new_die: Bool) -> TaelinArena.Game.Thing
TaelinArena.Game.set_thing_dir                                     : (thi: TaelinArena.Game.Thing) -> (new_dir: F64.V3) -> TaelinArena.Game.Thing
TaelinArena.Game.set_thing_dmg                                     : (thi: TaelinArena.Game.Thing) -> (new_dmg: F64) -> TaelinArena.Game.Thing
TaelinArena.Game.set_thing_fun                                     : (thi: TaelinArena.Game.Thing) -> (new_fun: TaelinArena.Game.TxFunction) -> TaelinArena.Game.Thing
TaelinArena.Game.set_thing_hit                                     : (thi: TaelinArena.Game.Thing) -> (new_hit: List(TaelinArena.Game.Hit)) -> TaelinArena.Game.Thing
TaelinArena.Game.set_thing_knk                                     : (thi: TaelinArena.Game.Thing) -> (new_knk: F64.V3) -> TaelinArena.Game.Thing
TaelinArena.Game.set_thing_lit                                     : (thi: TaelinArena.Game.Thing) -> (new_lit: List(TaelinArena.Game.Light)) -> TaelinArena.Game.Thing
TaelinArena.Game.set_thing_mhp                                     : (thi: TaelinArena.Game.Thing) -> (new_mhp: F64) -> TaelinArena.Game.Thing
TaelinArena.Game.set_thing_mid                                     : (thi: TaelinArena.Game.Thing) -> (new_mid: TaelinArena.Game.ModelId) -> TaelinArena.Game.Thing
TaelinArena.Game.set_thing_mov                                     : (thi: TaelinArena.Game.Thing) -> (new_mov: F64) -> TaelinArena.Game.Thing
TaelinArena.Game.set_thing_nam                                     : (thi: TaelinArena.Game.Thing) -> (new_nam: String) -> TaelinArena.Game.Thing
TaelinArena.Game.set_thing_pad                                     : (thi: TaelinArena.Game.Thing) -> (new_pad: F64.V3) -> TaelinArena.Game.Thing
TaelinArena.Game.set_thing_pid                                     : (thi: TaelinArena.Game.Thing) -> (new_pid: TaelinArena.Game.PlayerId) -> TaelinArena.Game.Thing
TaelinArena.Game.set_thing_pos                                     : (thi: TaelinArena.Game.Thing) -> (new_pos: F64.V3) -> TaelinArena.Game.Thing
TaelinArena.Game.set_thing_rst                                     : (thi: TaelinArena.Game.Thing) -> (new_rst: Bool) -> TaelinArena.Game.Thing
TaelinArena.Game.set_thing_sid                                     : (thi: TaelinArena.Game.Thing) -> (new_sid: TaelinArena.Game.SideId) -> TaelinArena.Game.Thing
TaelinArena.Game.set_thing_stt                                     : (thi: TaelinArena.Game.Thing) -> (new_stt: Map(F64)) -> TaelinArena.Game.Thing
TaelinArena.Game.set_thing_tik                                     : (thi: TaelinArena.Game.Thing) -> (new_tik: F64) -> TaelinArena.Game.Thing
TaelinArena.Game.set_thing_trg                                     : (thi: TaelinArena.Game.Thing) -> (new_trg: F64.V3) -> TaelinArena.Game.Thing
TaelinArena.Game.set_thing_vel                                     : (thi: TaelinArena.Game.Thing) -> (new_vel: F64.V3) -> TaelinArena.Game.Thing
TaelinArena.Game.set_thing_wei                                     : (thi: TaelinArena.Game.Thing) -> (new_wei: F64) -> TaelinArena.Game.Thing
TaelinArena.Game.spawn                                             : TaelinArena.Game.Thing -> F64 -> List(TaelinArena.Game.Thing) -> TaelinArena.Game.Thing
TaelinArena.Game.speed_multiplier_of                               : TaelinArena.Game.Thing -> F64
TaelinArena.Game.targ_dir                                          : TaelinArena.Game.Thing -> F64.V3
TaelinArena.Game.update_buff                                       : TaelinArena.Game.Thing -> Bits -> TaelinArena.Game.Thing
TaelinArena.Game.update_buff_dur                                   : (self: TaelinArena.Game.Thing) -> TaelinArena.Game.Thing
TaelinArena.Game.use_shields                                       : (buff: TaelinArena.Game.Buff) -> (acc: Pair(F64)(List(TaelinArena.Game.Buff))) -> Pair(F64)(List(TaelinArena.Game.Buff))
TaelinArena.Game.with_thing.effect                                 : TaelinArena.Game.PlayerId -> TaelinArena.Game.Thing -> TaelinArena.Game.Thing -> TaelinArena.Game.Thing -> TaelinArena.Game.Thing
TaelinArena.Game.with_thing                                        : TaelinArena.Game.PlayerId -> TaelinArena.Game.Thing -> TaelinArena.Game.Thing -> TaelinArena.Game.Game -> TaelinArena.Game.Game
BENFIX_BLOCK_000                                                   : F64
BENFIX_DASH_000                                                    : F64
BENFIX_DASH_001                                                    : F64
BENFIX_DASH_002                                                    : F64
BENFIX_DASH_003                                                    : F64
BENFIX_DASH_004                                                    : F64
BENFIX_DASH_005                                                    : F64
BENFIX_DASH_006                                                    : F64
BENFIX_DASH_007                                                    : F64
BENFIX_DASH_008                                                    : F64
BENFIX_GIGA_DASH_000                                               : F64
BENFIX_GIGA_DASH_001                                               : F64
BENFIX_GIGA_DASH_002                                               : F64
BENFIX_GIGA_DASH_003                                               : F64
BENFIX_GIGA_DASH_004                                               : F64
BENFIX_GIGA_DASH_005                                               : F64
BENFIX_GIGA_DASH_006                                               : F64
BENFIX_GIGA_DASH_007                                               : F64
BENFIX_GIGA_DASH_008                                               : F64
BENFIX_GIGA_DASH_009                                               : F64
BENFIX_GIGA_DASH_010                                               : F64
BENFIX_GIGA_DASH_011                                               : F64
BENFIX_GIGA_DASH_012                                               : F64
BENFIX_GIGA_DASH_013                                               : F64
BENFIX_GIGA_DASH_014                                               : F64
BENFIX_GIGA_DASH_015                                               : F64
BENFIX_GIGA_DASH_016                                               : F64
BENFIX_GIGA_DASH_017                                               : F64
BENFIX_GIGA_DASH_018                                               : F64
BENFIX_GIGA_DASH_019                                               : F64
BENFIX_GIGA_DASH_020                                               : F64
BENFIX_GIGA_DASH_021                                               : F64
BENFIX_HURT_000                                                    : F64
BENFIX_IDLE_000                                                    : F64
BENFIX_IDLE_001                                                    : F64
BENFIX_IDLE_002                                                    : F64
BENFIX_IDLE_003                                                    : F64
BENFIX_IDLE_004                                                    : F64
BENFIX_IDLE_005                                                    : F64
BENFIX_IDLE_006                                                    : F64
BENFIX_IDLE_007                                                    : F64
BENFIX_IDLE_008                                                    : F64
BENFIX_IDLE_009                                                    : F64
BENFIX_IDLE_010                                                    : F64
BENFIX_IDLE_011                                                    : F64
BENFIX_SEISMIC_JUMP_CASTING_000                                    : F64
BENFIX_SEISMIC_JUMP_CASTING_001                                    : F64
BENFIX_SEISMIC_JUMP_000                                            : F64
BENFIX_SEISMIC_JUMP_001                                            : F64
BENFIX_SEISMIC_JUMP_002                                            : F64
BENFIX_SEISMIC_JUMP_003                                            : F64
BENFIX_SEISMIC_JUMP_004                                            : F64
BENFIX_SEISMIC_JUMP_005                                            : F64
BENFIX_SEISMIC_JUMP_006                                            : F64
BENFIX_SEISMIC_JUMP_007                                            : F64
BENFIX_SEISMIC_JUMP_008                                            : F64
BENFIX_SEISMIC_JUMP_009                                            : F64
BENFIX_STEEL_TORNADO_000                                           : F64
BENFIX_STEEL_TORNADO_001                                           : F64
BENFIX_STEEL_TORNADO_002                                           : F64
BENFIX_STEEL_TORNADO_003                                           : F64
BENFIX_TAUNT_000                                                   : F64
BENFIX_TAUNT_001                                                   : F64
BENFIX_TAUNT_002                                                   : F64
BENFIX_TAUNT_003                                                   : F64
BENFIX_TAUNT_004                                                   : F64
BENFIX_TAUNT_005                                                   : F64
BENFIX_TAUNT_006                                                   : F64
BENFIX_TAUNT_007                                                   : F64
BENFIX_TAUNT_008                                                   : F64
BENFIX_TAUNT_009                                                   : F64
BENFIX_TAUNT_010                                                   : F64
BENFIX_TAUNT_011                                                   : F64
BENFIX_TAUNT_012                                                   : F64
BENFIX_TAUNT_013                                                   : F64
BENFIX_TAUNT_014                                                   : F64
BENFIX_TAUNT_015                                                   : F64
BENFIX_TRIPLE_ATTACK_1_000                                         : F64
BENFIX_TRIPLE_ATTACK_1_001                                         : F64
BENFIX_TRIPLE_ATTACK_1_002                                         : F64
BENFIX_TRIPLE_ATTACK_1_003                                         : F64
BENFIX_TRIPLE_ATTACK_1_004                                         : F64
BENFIX_TRIPLE_ATTACK_1_005                                         : F64
BENFIX_TRIPLE_ATTACK_1_006                                         : F64
BENFIX_TRIPLE_ATTACK_1_007                                         : F64
BENFIX_TRIPLE_ATTACK_1_008                                         : F64
BENFIX_TRIPLE_ATTACK_1_009                                         : F64
BENFIX_TRIPLE_ATTACK_1_010                                         : F64
BENFIX_TRIPLE_ATTACK_1_011                                         : F64
BENFIX_TRIPLE_ATTACK_1_012                                         : F64
BENFIX_TRIPLE_ATTACK_1_013                                         : F64
BENFIX_TRIPLE_ATTACK_1_014                                         : F64
BENFIX_TRIPLE_ATTACK_1_015                                         : F64
BENFIX_TRIPLE_ATTACK_2_000                                         : F64
BENFIX_TRIPLE_ATTACK_2_001                                         : F64
BENFIX_TRIPLE_ATTACK_2_002                                         : F64
BENFIX_TRIPLE_ATTACK_2_003                                         : F64
BENFIX_TRIPLE_ATTACK_2_004                                         : F64
BENFIX_TRIPLE_ATTACK_2_005                                         : F64
BENFIX_TRIPLE_ATTACK_2_006                                         : F64
BENFIX_TRIPLE_ATTACK_2_007                                         : F64
BENFIX_TRIPLE_ATTACK_2_008                                         : F64
BENFIX_TRIPLE_ATTACK_2_009                                         : F64
BENFIX_TRIPLE_ATTACK_2_010                                         : F64
BENFIX_WALK_000                                                    : F64
BENFIX_WALK_001                                                    : F64
BENFIX_WALK_002                                                    : F64
BENFIX_WALK_003                                                    : F64
BENFIX_WALK_004                                                    : F64
BENFIX_WALK_005                                                    : F64
BENFIX_WALK_006                                                    : F64
BLESKAPE_BASE_ATTACK_1_000                                         : F64
BLESKAPE_BASE_ATTACK_1_001                                         : F64
BLESKAPE_BASE_ATTACK_1_002                                         : F64
BLESKAPE_BASE_ATTACK_1_003                                         : F64
BLESKAPE_BASE_ATTACK_1_004                                         : F64
BLESKAPE_BASE_ATTACK_1_005                                         : F64
BLESKAPE_BASE_ATTACK_2_000                                         : F64
BLESKAPE_BASE_ATTACK_2_001                                         : F64
BLESKAPE_BASE_ATTACK_2_002                                         : F64
BLESKAPE_BASE_ATTACK_2_003                                         : F64
BLESKAPE_BASE_ATTACK_2_004                                         : F64
BLESKAPE_BASE_ATTACK_2_005                                         : F64
BLESKAPE_BASE_ATTACK_2_006                                         : F64
BLESKAPE_DASH_000                                                  : F64
BLESKAPE_DASH_001                                                  : F64
BLESKAPE_DASH_002                                                  : F64
BLESKAPE_DASH_003                                                  : F64
BLESKAPE_DASH_004                                                  : F64
BLESKAPE_DASH_005                                                  : F64
BLESKAPE_DASH_006                                                  : F64
BLESKAPE_DASH_007                                                  : F64
BLESKAPE_DASH_008                                                  : F64
BLESKAPE_DASH_009                                                  : F64
BLESKAPE_DASH_010                                                  : F64
BLESKAPE_DASH_011                                                  : F64
BLESKAPE_DASH_012                                                  : F64
BLESKAPE_DASH_013                                                  : F64
BLESKAPE_DASH_014                                                  : F64
BLESKAPE_DEFENSE_MODE_000                                          : F64
BLESKAPE_DEFENSE_MODE_001                                          : F64
BLESKAPE_DEFENSE_MODE_002                                          : F64
BLESKAPE_HURT_000                                                  : F64
BLESKAPE_IDLE_000                                                  : F64
BLESKAPE_IDLE_001                                                  : F64
BLESKAPE_IDLE_002                                                  : F64
BLESKAPE_IDLE_003                                                  : F64
BLESKAPE_SHOCK_BALL_000                                            : F64
BLESKAPE_SHOCK_BALL_001                                            : F64
BLESKAPE_SHOCK_BALL_002                                            : F64
BLESKAPE_SHOCK_BALL_003                                            : F64
BLESKAPE_SHOCK_BALL_004                                            : F64
BLESKAPE_SHOCK_BALL_005                                            : F64
BLESKAPE_SHOCK_BALL_006                                            : F64
BLESKAPE_SHOCK_BALL_007                                            : F64
BLESKAPE_SHOCK_BALL_008                                            : F64
BLESKAPE_SHOCK_BALL_009                                            : F64
BLESKAPE_SHOCK_BALL_010                                            : F64
BLESKAPE_SHOCK_BALL_011                                            : F64
BLESKAPE_SHOCK_BALL_012                                            : F64
BLESKAPE_SHOCK_BALL_013                                            : F64
BLESKAPE_SHOCK_BALL_014                                            : F64
BLESKAPE_SHOCK_GROUND_WAVE_000                                     : F64
BLESKAPE_SHOCK_GROUND_WAVE_001                                     : F64
BLESKAPE_SHOCK_GROUND_WAVE_002                                     : F64
BLESKAPE_SHOCK_GROUND_WAVE_003                                     : F64
BLESKAPE_SHOCK_GROUND_WAVE_004                                     : F64
BLESKAPE_SHOCK_GROUND_WAVE_005                                     : F64
BLESKAPE_SHOCK_GROUND_WAVE_006                                     : F64
BLESKAPE_SHOCK_GROUND_WAVE_007                                     : F64
BLESKAPE_SHOCK_GROUND_WAVE_008                                     : F64
BLESKAPE_SHOCK_GROUND_WAVE_009                                     : F64
BLESKAPE_SHOCK_GROUND_WAVE_010                                     : F64
BLESKAPE_SHOCK_GROUND_WAVE_011                                     : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_000                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_001                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_002                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_003                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_004                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_005                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_006                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_007                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_008                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_009                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_010                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_011                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_012                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_013                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_014                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_015                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_016                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_017                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_018                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_019                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_020                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_021                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_022                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_023                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_024                                : F64
BLESKAPE_TAUNT_000                                                 : F64
BLESKAPE_TAUNT_001                                                 : F64
BLESKAPE_TAUNT_002                                                 : F64
BLESKAPE_TAUNT_003                                                 : F64
BLESKAPE_TAUNT_004                                                 : F64
BLESKAPE_TAUNT_005                                                 : F64
BLESKAPE_TAUNT_006                                                 : F64
BLESKAPE_TAUNT_007                                                 : F64
BLESKAPE_TAUNT_008                                                 : F64
BLESKAPE_TAUNT_009                                                 : F64
BLESKAPE_WALK_000                                                  : F64
BLESKAPE_WALK_001                                                  : F64
BLESKAPE_WALK_002                                                  : F64
BLESKAPE_WALK_003                                                  : F64
DARTH_VADER_HURT_WITHOUT_SABER_000                                 : F64
DARTH_VADER_HURT_000                                               : F64
DARTH_VADER_IDLE_WITHOUT_SABER_000                                 : F64
DARTH_VADER_IDLE_WITHOUT_SABER_001                                 : F64
DARTH_VADER_IDLE_WITHOUT_SABER_002                                 : F64
DARTH_VADER_IDLE_WITHOUT_SABER_003                                 : F64
DARTH_VADER_IDLE_WITHOUT_SABER_004                                 : F64
DARTH_VADER_IDLE_000                                               : F64
DARTH_VADER_IDLE_001                                               : F64
DARTH_VADER_IDLE_002                                               : F64
DARTH_VADER_IDLE_003                                               : F64
DARTH_VADER_IDLE_004                                               : F64
DARTH_VADER_ROGUE_ONE_000                                          : F64
DARTH_VADER_ROGUE_ONE_001                                          : F64
DARTH_VADER_ROGUE_ONE_002                                          : F64
DARTH_VADER_ROGUE_ONE_003                                          : F64
DARTH_VADER_ROGUE_ONE_004                                          : F64
DARTH_VADER_ROGUE_ONE_005                                          : F64
DARTH_VADER_ROGUE_ONE_006                                          : F64
DARTH_VADER_ROGUE_ONE_007                                          : F64
DARTH_VADER_ROGUE_ONE_008                                          : F64
DARTH_VADER_ROGUE_ONE_009                                          : F64
DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_000             : F64
DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_001             : F64
DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_002             : F64
DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_003             : F64
DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_004             : F64
DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_005             : F64
DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_006             : F64
DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_007             : F64
DARTH_VADER_THE_EMPIRE_STRICKES_BACK_000                           : F64
DARTH_VADER_THE_EMPIRE_STRICKES_BACK_001                           : F64
DARTH_VADER_THE_EMPIRE_STRICKES_BACK_002                           : F64
DARTH_VADER_THE_EMPIRE_STRICKES_BACK_003                           : F64
DARTH_VADER_THE_EMPIRE_STRICKES_BACK_004                           : F64
DARTH_VADER_THE_EMPIRE_STRICKES_BACK_005                           : F64
DARTH_VADER_THE_EMPIRE_STRICKES_BACK_006                           : F64
DARTH_VADER_THE_EMPIRE_STRICKES_BACK_007                           : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_000                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_001                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_002                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_003                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_004                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_005                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_006                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_007                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_000                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_001                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_002                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_003                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_004                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_005                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_006                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_007                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_000                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_001                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_002                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_003                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_004                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_005                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_006                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_007                            : F64
DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_000                  : F64
DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_001                  : F64
DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_002                  : F64
DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_003                  : F64
DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_004                  : F64
DARTH_VADER_THE_PHANTOM_MENACE_RETURN_000                          : F64
DARTH_VADER_THE_PHANTOM_MENACE_RETURN_001                          : F64
DARTH_VADER_THE_PHANTOM_MENACE_RETURN_002                          : F64
DARTH_VADER_THE_PHANTOM_MENACE_RETURN_003                          : F64
DARTH_VADER_THE_PHANTOM_MENACE_RETURN_004                          : F64
DARTH_VADER_THE_PHANTOM_MENACE_RETURN_005                          : F64
DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_000                  : F64
DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_001                  : F64
DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_002                  : F64
DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_003                  : F64
DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_004                  : F64
DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_WITHOUT_SABER_000 : F64
DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_WITHOUT_SABER_001 : F64
DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_WITHOUT_SABER_002 : F64
DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_000               : F64
DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_001               : F64
DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_002               : F64
DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_000             : F64
DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_001             : F64
DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_002             : F64
DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_003             : F64
DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_000                           : F64
DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_001                           : F64
DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_002                           : F64
DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_003                           : F64
DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_004                           : F64
DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_005                           : F64
DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_006                           : F64
DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_007                           : F64
DARTH_VADER_WALK_CYCLE_000                                         : F64
DARTH_VADER_WALK_CYCLE_001                                         : F64
DARTH_VADER_WALK_CYCLE_002                                         : F64
DARTH_VADER_WALK_CYCLE_003                                         : F64
DARTH_VADER_WALK_CYCLE_004                                         : F64
DARTH_VADER_WALK_CYCLE_005                                         : F64
DARTH_VADER_WALK_CYCLE_006                                         : F64
DARTH_VADER_WALK_CYCLE_007                                         : F64
DORIME_BLESS_CASTANIMATION_000                                     : F64
DORIME_BLESS_CASTANIMATION_001                                     : F64
DORIME_BLESS_CASTANIMATION_002                                     : F64
DORIME_BLESS_CASTANIMATION_003                                     : F64
DORIME_BLESS_CASTANIMATION_004                                     : F64
DORIME_BLESS_CASTANIMATION_005                                     : F64
DORIME_BLESS_HALO_000                                              : F64
DORIME_BLESSING_FOR_WHO_DESERVE_PROJECTILE_000                     : F64
DORIME_BLESSING_FOR_WHO_DESERVE_000                                : F64
DORIME_BLESSING_FOR_WHO_DESERVE_001                                : F64
DORIME_BLESSING_FOR_WHO_DESERVE_002                                : F64
DORIME_BLESSING_FOR_WHO_DESERVE_003                                : F64
DORIME_BLESSING_FOR_WHO_DESERVE_004                                : F64
DORIME_BLESSING_FOR_WHO_DESERVE_005                                : F64
DORIME_BLESSING_FOR_WHO_DESERVE_006                                : F64
DORIME_BLESSING_FOR_WHO_DESERVE_007                                : F64
DORIME_BLESSING_FOR_WHO_DESERVE_008                                : F64
DORIME_BLESSING_FOR_WHO_DESERVE_009                                : F64
DORIME_BLESSING_FOR_WHO_DESERVE_010                                : F64
DORIME_BLESSING_FOR_WHO_DESERVE_011                                : F64
DORIME_BLESSING_FOR_WHO_DESERVE_012                                : F64
DORIME_BLESSING_FOR_WHO_DESERVE_013                                : F64
DORIME_GODS_CHAMBER_CAST_ANIMATION_000                             : F64
DORIME_GODS_CHAMBER_CAST_ANIMATION_001                             : F64
DORIME_GODS_CHAMBER_CAST_ANIMATION_002                             : F64
DORIME_GODS_CHAMBER_CAST_ANIMATION_003                             : F64
DORIME_GODS_CHAMBER_CAST_ANIMATION_004                             : F64
DORIME_GODS_CHAMBER_CAST_ANIMATION_005                             : F64
DORIME_GODS_CHAMBER_CAST_ANIMATION_006                             : F64
DORIME_GODS_CHAMBER_CAST_ANIMATION_007                             : F64
DORIME_GODS_CHAMBER_CAST_ANIMATION_008                             : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_000                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_001                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_002                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_003                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_004                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_005                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_006                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_007                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_008                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_009                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_010                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_011                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_012                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_013                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_014                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_015                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_016                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_017                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_018                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_019                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_020                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_021                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_022                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_023                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_024                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_025                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_026                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_027                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_028                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_000                                : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_001                                : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_002                                : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_003                                : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_004                                : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_005                                : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_006                                : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_007                                : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_008                                : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_009                                : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_010                                : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_011                                : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_012                                : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_013                                : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_014                                : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_015                                : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_016                                : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_017                                : F64
DORIME_HOLY_FLAME_CAST_ANIMATION_000                               : F64
DORIME_HOLY_FLAME_CAST_ANIMATION_001                               : F64
DORIME_HOLY_FLAME_CAST_ANIMATION_002                               : F64
DORIME_HOLY_FLAME_CAST_ANIMATION_003                               : F64
DORIME_HOLY_FLAME_CAST_ANIMATION_004                               : F64
DORIME_HOLY_FLAME_CAST_ANIMATION_005                               : F64
DORIME_HOLY_FLAME_CAST_ANIMATION_006                               : F64
DORIME_HOLY_FLAME_CAST_ANIMATION_007                               : F64
DORIME_HOLY_FLAME_PILLAR_000                                       : F64
DORIME_HOLY_FLAME_PILLAR_001                                       : F64
DORIME_HOLY_FLAME_PILLAR_002                                       : F64
DORIME_HOLY_FLAME_PILLAR_003                                       : F64
DORIME_HOLY_FLAME_PILLAR_004                                       : F64
DORIME_HURT_000                                                    : F64
DORIME_IDLE_000                                                    : F64
DORIME_IDLE_001                                                    : F64
DORIME_IDLE_002                                                    : F64
DORIME_IDLE_003                                                    : F64
DORIME_IDLE_004                                                    : F64
DORIME_JESUS_POWER_000                                             : F64
DORIME_JESUS_POWER_001                                             : F64
DORIME_JESUS_POWER_002                                             : F64
DORIME_JESUS_POWER_003                                             : F64
DORIME_JESUS_POWER_004                                             : F64
DORIME_JESUS_POWER_005                                             : F64
DORIME_JESUS_POWER_006                                             : F64
DORIME_JESUS_POWER_007                                             : F64
DORIME_JESUS_POWER_008                                             : F64
DORIME_JESUS_POWER_009                                             : F64
DORIME_JESUS_POWER_010                                             : F64
DORIME_JESUS_POWER_011                                             : F64
DORIME_JESUS_POWER_012                                             : F64
DORIME_JESUS_POWER_013                                             : F64
DORIME_JESUS_POWER_014                                             : F64
DORIME_JESUS_POWER_015                                             : F64
DORIME_JESUS_POWER_016                                             : F64
DORIME_JESUS_POWER_017                                             : F64
DORIME_JESUS_POWER_018                                             : F64
DORIME_JESUS_POWER_019                                             : F64
DORIME_JESUS_POWER_020                                             : F64
DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_000                       : F64
DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_001                       : F64
DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_002                       : F64
DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_003                       : F64
DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_004                       : F64
DORIME_LEPTOSPIROSE_CURSE_POT_000                                  : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_000                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_001                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_002                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_003                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_004                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_005                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_006                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_007                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_008                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_009                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_010                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_011                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_012                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_013                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_014                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_015                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_016                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_017                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_018                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_019                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_020                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_021                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_022                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_023                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_024                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_025                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_026                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_027                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_028                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_000                               : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_001                               : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_002                               : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_003                               : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_004                               : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_005                               : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_006                               : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_007                               : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_008                               : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_009                               : F64
DORIME_POSED_BACKUP                                                : F64
DORIME_TAUNT_IDLE_000                                              : F64
DORIME_TAUNT_IDLE_001                                              : F64
DORIME_TAUNT_IDLE_002                                              : F64
DORIME_TAUNT_000                                                   : F64
DORIME_TAUNT_001                                                   : F64
DORIME_TAUNT_002                                                   : F64
DORIME_WALK_CYCLE_000                                              : F64
DORIME_WALK_CYCLE_001                                              : F64
DORIME_WALK_CYCLE_002                                              : F64
DORIME_WALK_CYCLE_003                                              : F64
DORIME_WALK_CYCLE_004                                              : F64
DORIME_WALK_CYCLE_005                                              : F64
DORIME_WALK_CYCLE_006                                              : F64
DORIME_WALK_CYCLE_007                                              : F64
POSTE_IDLE_000                                                     : F64
PUNCHINGBAG_IDLE_000                                               : F64
PUNCHINGBAG_IDLE_001                                               : F64
PUNCHINGBAG_IDLE_002                                               : F64
PUNCHINGBAG_IDLE_003                                               : F64
PUNCHINGBAG_IDLE_004                                               : F64
PUNCHINGBAG_IDLE_005                                               : F64
PUNCHINGBAG_IDLE_006                                               : F64
PUNCHINGBAG_IDLE_007                                               : F64
PUNCHINGBAG_IDLE_008                                               : F64
PUNCHINGBAG_IDLE_009                                               : F64
PUNCHINGBAG_IDLE_010                                               : F64
PUNCHINGBAG_IDLE_011                                               : F64
PUNCHINGBAG_IDLE_012                                               : F64
PUNCHINGBAG_IDLE_013                                               : F64
PUNCHINGBAG_IDLE_014                                               : F64
PUNCHINGBAG_IDLE_015                                               : F64
PUNCHINGBAG_IDLE_016                                               : F64
PUNCHINGBAG_IDLE_017                                               : F64
PUNCHINGBAG_IDLE_018                                               : F64
PUNCHINGBAG_IDLE_019                                               : F64
PUNCHINGBAG_IDLE_020                                               : F64
PUNCHINGBAG_IDLE_021                                               : F64
PUNCHINGBAG_IDLE_022                                               : F64
PUNCHINGBAG_IDLE_023                                               : F64
WALL_IDLE_000                                                      : F64
TaelinArena.Thing.bleskape_fun                                     : (self: TaelinArena.Game.Thing) -> TaelinArena.Game.Thing
TaelinArena.Thing.poste_fun                                        : TaelinArena.Game.Thing -> TaelinArena.Game.Thing
TaelinArena.Thing.puddledmg_fun                                    : TaelinArena.Game.Thing -> TaelinArena.Game.Thing
TaelinArena.Thing.puddleheal_fun                                   : TaelinArena.Game.Thing -> TaelinArena.Game.Thing
TaelinArena.Thing.punchingbag_fun                                  : TaelinArena.Game.Thing -> TaelinArena.Game.Thing
TaelinArena.Thing.wall_fun                                         : TaelinArena.Game.Thing -> TaelinArena.Game.Thing
TaelinArena.collide_with                                           : (a_pos: F64.V3) -> (a_dir: F64.V3) -> (a_box: TaelinArena.Game.Hitbox) -> (b_pos: F64.V3) -> (b_dir: F64.V3) -> (b_box: TaelinArena.Game.Hitbox) -> Maybe(F64.V3)
TaelinArena.exec_command                                           : TaelinArena.Game.Command -> TaelinArena.Game.Game -> TaelinArena.Game.Game
TaelinArena.exec_turn                                              : TaelinArena.Game.Game -> TaelinArena.Game.Game
TaelinArena.fold_with_context                                      : <A: Type> -> <B: Type> -> (i: B) -> (f: A -> List(A) -> B -> B) -> (xs: List(A)) -> (ys: List(A) -> List(A)) -> B
TaelinArena.interact_with                                          : (this: TaelinArena.Game.Thing) -> (that: TaelinArena.Game.Thing) -> TaelinArena.Game.Thing
Text                                                               : Type
The                                                                : (A: Type) -> (x: A) -> Type
The.term                                                           : <A: Type> -> (x: A) -> The(A)(x)
U16.add                                                            : U16 -> U16 -> U16
U16.and                                                            : U16 -> U16 -> U16
U16.div                                                            : U16 -> U16 -> U16
U16.eql                                                            : U16 -> U16 -> Bool
U16                                                                : Type
U16.gte                                                            : U16 -> U16 -> Bool
U16.gtn                                                            : U16 -> U16 -> Bool
U16.inc                                                            : U16 -> U16
U16.lte                                                            : U16 -> U16 -> Bool
U16.ltn                                                            : U16 -> U16 -> Bool
U16.mod                                                            : U16 -> U16 -> U16
U16.mul                                                            : U16 -> U16 -> U16
U16.new                                                            : Word(Nat.16) -> U16
U16.or                                                             : U16 -> U16 -> U16
U16.parse_hex                                                      : String -> U16
U16.pow                                                            : U16 -> U16 -> U16
U16.shl                                                            : Nat -> U16 -> U16
U16.shr                                                            : Nat -> U16 -> U16
U16.sub                                                            : U16 -> U16 -> U16
U16.to_bits                                                        : U16 -> Bits
U16.to_nat                                                         : U16 -> Nat
U16.xor                                                            : U16 -> U16 -> U16
U32.0                                                              : U32
U32.add                                                            : U32 -> U32 -> U32
U32.and                                                            : U32 -> U32 -> U32
U32.concat                                                         : U32 -> U32 -> U64
U32.div                                                            : U32 -> U32 -> U32
U32.eql                                                            : U32 -> U32 -> Bool
U32                                                                : Type
U32.gte                                                            : U32 -> U32 -> Bool
U32.gtn                                                            : U32 -> U32 -> Bool
U32.hash2                                                          : U32 -> U32 -> U32
U32.inc                                                            : U32 -> U32
U32.lte                                                            : U32 -> U32 -> Bool
U32.ltn                                                            : U32 -> U32 -> Bool
U32.mod                                                            : U32 -> U32 -> U32
U32.mul                                                            : U32 -> U32 -> U32
U32.new                                                            : Word(Nat.32) -> U32
U32.or                                                             : U32 -> U32 -> U32
U32.parse_hex                                                      : String -> U32
U32.pow                                                            : U32 -> U32 -> U32
U32.shl                                                            : Nat -> U32 -> U32
U32.shr                                                            : Nat -> U32 -> U32
U32.sub                                                            : U32 -> U32 -> U32
U32.to_bits                                                        : U32 -> Bits
U32.to_nat                                                         : U32 -> Nat
U32.xor                                                            : U32 -> U32 -> U32
U64.0                                                              : U64
U64.add                                                            : U64 -> U64 -> U64
U64.and                                                            : U64 -> U64 -> U64
U64.div                                                            : U64 -> U64 -> U64
U64.eql                                                            : U64 -> U64 -> Bool
U64                                                                : Type
U64.gte                                                            : U64 -> U64 -> Bool
U64.gtn                                                            : U64 -> U64 -> Bool
U64.inc                                                            : U64 -> U64
U64.lte                                                            : U64 -> U64 -> Bool
U64.ltn                                                            : U64 -> U64 -> Bool
U64.mix.const0                                                     : U64
U64.mix.const1                                                     : U64
U64.mix                                                            : U64 -> U64
U64.mod                                                            : U64 -> U64 -> U64
U64.mul                                                            : U64 -> U64 -> U64
U64.new                                                            : Word(Nat.64) -> U64
U64.or                                                             : U64 -> U64 -> U64
U64.parse_hex                                                      : String -> U64
U64.pow                                                            : U64 -> U64 -> U64
U64.shl                                                            : Nat -> U64 -> U64
U64.shr                                                            : Nat -> U64 -> U64
U64.sub                                                            : U64 -> U64 -> U64
U64.to_bits                                                        : U64 -> Bits
U64.to_nat                                                         : U64 -> Nat
U64.xor                                                            : U64 -> U64 -> U64
UFind.new                                                          : UFind
UFind.equivalent                                                   : UFind -> Bits -> Bits -> Bool
UFind.find                                                         : <B: Type> -> UFind -> Bits -> UFind -> Bits -> Nat -> B -> B
UFind                                                              : Type
UFind.new_node                                                     : UFind -> Bits -> UFind
UFind.union                                                        : UFind -> Bits -> Bits -> UFind
UNode                                                              : Type
UNode.link                                                         : Bits -> UNode
UNode.root                                                         : Nat -> UNode
Unit                                                               : Type
Unit.new                                                           : Unit
Unit.show                                                          : Unit -> String
Word.0                                                             : <size: Nat> -> Word(size) -> Word(Nat.succ(size))
Word.1                                                             : <size: Nat> -> Word(size) -> Word(Nat.succ(size))
Word.add.aux                                                       : <size: Nat> -> Word(size) -> Word(size) -> Bool -> Word(size)
Word.add                                                           : <size: Nat> -> Word(size) -> Word(size) -> Word(size)
Word.and                                                           : <size: Nat> -> Word(size) -> Word(size) -> Word(size)
Word.cmp.aux                                                       : <size: Nat> -> Word(size) -> Word(size) -> Cmp -> Cmp
Word.cmp                                                           : <size: Nat> -> Word(size) -> Word(size) -> Cmp
Word.concat                                                        : <a_size: Nat> -> <b_size: Nat> -> Word(a_size) -> Word(b_size) -> Word(Nat.add(a_size)(b_size))
Word.div                                                           : <size: Nat> -> Word(size) -> Word(size) -> Word(size)
Word.drop                                                          : <size: Nat> -> (n: Nat) -> Word(Nat.add(n)(size)) -> Word(size)
Word.eql                                                           : <size: Nat> -> Word(size) -> Word(size) -> Bool
Word                                                               : Nat -> Type
Word.from_bits                                                     : (size: Nat) -> Bits -> Word(size)
Word.gte                                                           : <size: Nat> -> Word(size) -> Word(size) -> Bool
Word.gtn                                                           : <size: Nat> -> Word(size) -> Word(size) -> Bool
Word.inc                                                           : <size: Nat> -> Word(size) -> Word(size)
Word.lte                                                           : <size: Nat> -> Word(size) -> Word(size) -> Bool
Word.ltn                                                           : <size: Nat> -> Word(size) -> Word(size) -> Bool
Word.mod                                                           : <size: Nat> -> Word(size) -> Word(size) -> Word(size)
Word.mul                                                           : <size: Nat> -> Word(size) -> Word(size) -> Word(size)
Word.nil                                                           : Word(Nat.zero)
Word.or                                                            : <size: Nat> -> Word(size) -> Word(size) -> Word(size)
Word.parse_hex                                                     : (size: Nat) -> String -> Word(size)
Word.pow                                                           : <size: Nat> -> Word(size) -> Word(size) -> Word(size)
Word.pred                                                          : <size: Nat> -> Word(Nat.succ(size)) -> Word(size)
Word.shift_left                                                    : <size: Nat> -> Nat -> Word(size) -> Word(size)
Word.shift_right                                                   : <size: Nat> -> Nat -> Word(size) -> Word(size)
Word.sub                                                           : <size: Nat> -> Word(size) -> Word(size) -> Word(size)
Word.to_bits                                                       : <size: Nat> -> Word(size) -> Bits
Word.to_nat                                                        : <size: Nat> -> Word(size) -> Nat
Word.to_nat.go                                                     : <size: Nat> -> Word(size) -> Nat -> Nat
Word.xor                                                           : <size: Nat> -> Word(size) -> Word(size) -> Word(size)
hello                                                              : IO(Unit)

All terms check.
➜  Moonad git:(183-TaelinArena) ✗ fmc -v
Type-checking:
Bit.0                                                              : Bit
Bit.1                                                              : Bit
Bit                                                                : *
Bits.0                                                             : ∀(bs:Bits) Bits
Bits.1                                                             : ∀(bs:Bits) Bits
Bits.concat                                                        : ∀(:Bits) ∀(:Bits) Bits
Bits.eql                                                           : ∀(:Bits) ∀(:Bits) Bool
Bits                                                               : *
Bits.from_string                                                   : ∀(:String) Bits
Bits.inc                                                           : ∀(:Bits) Bits
Bits.nil                                                           : Bits
Bits.parse_hex                                                     : ∀(:String) Bits
Bits.parse_hex.go                                                  : ∀(:String) ∀(:Bits) Bits
Bits.reverse                                                       : ∀(:Bits) Bits
Bits.reverse.go                                                    : ∀(:Bits) ∀(:Bits) Bits
Bool.and                                                           : ∀(:Bool) ∀(:Bool) Bool
Bool.elim                                                          : ∀(b:Bool) Π(P:∀(:Bool) *) ∀(:(P Bool.true)) ∀(:(P Bool.false)) (P b)
Bool.eql                                                           : ∀(:Bool) ∀(:Bool) Bool
Bool.false                                                         : Bool
Bool.false_isnt_true                                               : (Not (((Equal Bool) Bool.false) Bool.true))
Bool                                                               : *
Bool.if                                                            : Π(A:*) ∀(x:Bool) ∀(ct:A) ∀(cf:A) A
Bool.not                                                           : ∀(:Bool) Bool
Bool.notf                                                          : ∀(:Bool) Bool
Bool.or                                                            : ∀(:Bool) ∀(:Bool) Bool
Bool.test.different_elem                                           : ∀(a:Bool) ((Subset Bool) λb (Not (((Equal Bool) a) b)))
Bool.true                                                          : Bool
Bool.true_isnt_false                                               : (Not (((Equal Bool) Bool.true) Bool.false))
Char                                                               : *
Char.hex_value                                                     : ∀(:Char) (Maybe Nat)
Char.new                                                           : ∀(:Bit) ∀(:Bit) ∀(:Bit) ∀(:Bit) ∀(:Bit) ∀(:Bit) ∀(:Bit) ∀(:Bit) ∀(:Bit) ∀(:Bit) ∀(:Bit) ∀(:Bit) ∀(:Bit) ∀(:Bit) ∀(:Bit) ∀(:Bit) Char
Char.newline                                                       : Char
Char.parse                                                         : ∀(str:String) (Char.parse.type str)
Char.parse.type                                                    : ∀(:String) *
Char.quote                                                         : Char
Char.tab                                                           : Char
Cmp.eql                                                            : Cmp
Cmp                                                                : *
Cmp.gtn                                                            : Cmp
Cmp.ltn                                                            : Cmp
Comp.app                                                           : ∀(:Comp) ∀(:Comp) Comp
Comp.fal                                                           : Comp
Comp                                                               : *
Comp.lam                                                           : ∀(:String) ∀(:Comp) Comp
Comp.let                                                           : ∀(:String) ∀(:Comp) ∀(:Comp) Comp
Comp.stringify                                                     : ∀(:Comp) Stringifier
Comp.tru                                                           : Comp
Comp.var                                                           : ∀(:String) Comp
Concat                                                             : ∀(A:*) *
Concat.push                                                        : Π(A:*) ∀(:A) ∀(:(Concat A)) (Concat A)
Concat.to_list                                                     : Π(A:*) ∀(xs:(Concat A)) (List A)
Core.Bind                                                          : *
Core.Comp.check                                                    : ∀(:Core) ∀(:Core) ∀(:Core.Defs) ∀(:Nat) (Maybe ((Pair Comp) Core))
Core.Comp.infer                                                    : ∀(:Core) ∀(:Core.Defs) ∀(:Nat) (Maybe ((Pair Comp) Core))
Core.Ctx.ext                                                       : ∀(:String) ∀(:Core) ∀(:Core.Ctx) Core.Ctx
Core.Ctx                                                           : *
Core.Ctx.nil                                                       : Core.Ctx
Core.Def                                                           : *
Core.Defs                                                          : *
Core.Defs.get                                                      : ∀(:Core.Defs) ∀(:String) (Maybe Core.Def)
Core.Defs.get_term                                                 : ∀(:Core.Defs) ∀(:String) (Maybe Core)
Core.Defs.get_type                                                 : ∀(:Core.Defs) ∀(:String) (Maybe Core)
Core.Defs.new                                                      : (Map ((Pair Core) Core))
Core.Defs.set                                                      : ∀(:String) ∀(:Core.Def) ∀(:Core.Defs) Core.Defs
Core.Defs.term                                                     : ∀(:Core.Defs) ∀(:String) Core
Core.Defs.type                                                     : ∀(:Core.Defs) ∀(:String) Core
Core.Read.Reply                                                    : ∀(A:*) *
Core.Read.all                                                      : (Core.Read Core.Bind)
Core.Read.ann                                                      : ∀(:Core.Bind) (Core.Read Core.Bind)
Core.Read.app                                                      : ∀(:Core.Bind) (Core.Read Core.Bind)
Core.Read.arr                                                      : ∀(:Core.Bind) (Core.Read Core.Bind)
Core.Read.bind                                                     : Π(A:*) Π(B:*) ∀(:(Core.Read A)) ∀(:∀(:A) (Core.Read B)) (Core.Read B)
Core.Read.def                                                      : (Core.Read ((Pair String) Core.Def))
Core.Read.defs                                                     : (Core.Read Core.Defs)
Core.Read.defs.go                                                  : ∀(:Core.Defs) (Core.Read Core.Defs)
Core.Read.done                                                     : Π(A:*) ∀(:A) ∀(:String) (Core.Read.Reply A)
Core.Read.fail                                                     : Π(A:*) (Core.Read.Reply A)
Core.Read.first_of                                                 : Π(A:*) ∀(:(List (Core.Read A))) (Core.Read A)
Core.Read                                                          : ∀(:*) *
Core.Read.fst                                                      : ∀(:(List String)) (Core.Read Nat)
Core.Read.is_name                                                  : ∀(:Char) Bool
Core.Read.is_name.set                                              : (Map Unit)
Core.Read.is_space                                                 : ∀(:Char) Bool
Core.Read.lam                                                      : (Core.Read Core.Bind)
Core.Read.let                                                      : (Core.Read Core.Bind)
Core.Read.nam                                                      : (Core.Read String)
Core.Read.next                                                     : ∀(:String) String
Core.Read.one                                                      : ∀(:String) ∀(:String) (Core.Read Bool)
Core.Read.opt                                                      : ∀(:String) (Core.Read Bool)
Core.Read.par                                                      : (Core.Read Core.Bind)
Core.Read.pip                                                      : ∀(:Core.Bind) (Core.Read Core.Bind)
Core.Read.seek                                                     : Π(A:*) Π(B:*) ∀(:(Core.Read A)) ∀(:∀(:A) (Core.Read B)) (Core.Read B)
Core.Read.trm.base                                                 : (Core.Read Core.Bind)
Core.Read.trm                                                      : (Core.Read Core.Bind)
Core.Read.trm.post                                                 : ∀(:Core.Bind) (Core.Read Core.Bind)
Core.Read.txt                                                      : ∀(:String) (Core.Read Unit)
Core.Read.typ                                                      : (Core.Read Core.Bind)
Core.Read.var                                                      : (Core.Read Core.Bind)
Core.Read.wrd                                                      : (Core.Read String)
Core.all.Tuple                                                     : *
Core.all                                                           : ∀(:Bool) ∀(:String) ∀(:String) ∀(:Core) ∀(:∀(:Core) ∀(:Core) Core) Core
Core.ann                                                           : ∀(:Bool) ∀(:Core) ∀(:Core) Core
Core.app                                                           : ∀(:Bool) ∀(:Core) ∀(:Core) Core
Core.eql                                                           : ∀(:Core) ∀(:Core) ∀(:Core.Defs) Bool
Core.eql.go                                                        : ∀(:Core) ∀(:Core) ∀(:Core.Defs) ∀(:Set) ∀(:Nat) Bool
Core                                                               : *
Core.if_all                                                        : ∀(:Core) (Maybe Core.all.Tuple)
Core.is_all                                                        : ∀(:Core) Bool
Core.is_lam                                                        : ∀(:Core) Bool
Core.lam                                                           : ∀(:Bool) ∀(:String) ∀(:∀(:Core) Core) Core
Core.let                                                           : ∀(:String) ∀(:Core) ∀(:∀(:Core) Core) Core
Core.normalize                                                     : ∀(:Core) ∀(:Core.Defs) Core
Core.parse                                                         : ∀(:String) Core
Core.parse_defs                                                    : ∀(:String) Core.Defs
Core.reduce                                                        : ∀(:Core) ∀(:Core.Defs) Core
Core.ref                                                           : ∀(:String) Core
Core.stringify                                                     : ∀(:Core) String
Core.stringify.go                                                  : ∀(:Core) Stringifier
Core.to_bits                                                       : ∀(:Core) Bits
Core.to_bits.go                                                    : ∀(:Core) ∀(:Nat) ∀(:Bool) ∀(:Bits) Bits
Core.to_uid                                                        : ∀(:Core) Bits
Core.typ                                                           : Core
Core.typecheck                                                     : ∀(:Core) ∀(:Core) ∀(:Core.Defs) ∀(:Nat) ((Either String) Core)
Core.typecomp                                                      : ∀(:Core) ∀(:Core) ∀(:Core.Defs) ∀(:Nat) ((Either String) Core)
Core.typeinfer                                                     : ∀(:Core) ∀(:Core.Defs) ∀(:Nat) ((Either Text) Core)
Core.var                                                           : ∀(:String) ∀(:Nat) ∀(:Bool) Core
Debug.log                                                          : Π(A:*) ∀(s:String) ∀(x:∀(:Unit) A) A
Either.bind                                                        : Π(A:*) Π(B:*) Π(C:*) ∀(:((Either A) B)) ∀(:∀(:B) ((Either A) C)) ((Either A) C)
Either                                                             : ∀(A:*) ∀(B:*) *
Either.left                                                        : Π(A:*) Π(B:*) ∀(x:A) ((Either A) B)
Either.right                                                       : Π(A:*) Π(B:*) ∀(x:B) ((Either A) B)
Empty.absurd                                                       : ∀(x:Empty) ∀(P:*) P
Empty                                                              : *
Equal.apply                                                        : Π(A:*) Π(B:∀(:A) *) ∀(a:A) ∀(b:A) ∀(f:∀(x:A) (B x)) ∀(e:(((Equal A) a) b)) (((Equal (B a)) (f a)) ((<<<<Equal.rewrite A> b> a> B> (<<<Equal.mirror A> a> b> e)) (f b)))
Equal.apply_ind                                                    : Π(A:*) Π(B:*) ∀(a:A) ∀(b:A) ∀(f:∀(x:A) B) ∀(e:(((Equal A) a) b)) (((Equal B) (f a)) (f b))
Equal.chain                                                        : Π(A:*) Π(a:A) Π(b:A) Π(c:A) ∀(d:(((Equal A) a) b)) ∀(e:(((Equal A) b) c)) (((Equal A) a) c)
Equal                                                              : ∀(A:*) ∀(:A) ∀(:A) *
Equal.mirror                                                       : Π(A:*) Π(a:A) Π(b:A) ∀(e:(((Equal A) a) b)) (((Equal A) b) a)
Equal.rewrite                                                      : Π(A:*) Π(a:A) Π(b:A) Π(P:∀(:A) *) ∀(e:(((Equal A) a) b)) ∀(x:(P a)) (P b)
Equal.to                                                           : Π(A:*) Π(a:A) (((Equal A) a) a)
Example.nat                                                        : Nat
Example.tco                                                        : Nat
Example.u32_add                                                    : U32
Exports.TaelinArena                                                : Exports
Exports.add                                                        : Π(A:*) ∀(x:A) ∀(xs:Exports) Exports
Exports.example                                                    : Exports
Exports                                                            : *
Exports.new                                                        : Exports
F64.0                                                              : F64
F64.1                                                              : F64
F64.180                                                            : F64
F64.2                                                              : F64
F64.256                                                            : F64
F64.Boundary                                                       : *
F64.Boundary.new                                                   : ∀(:(List F64.V3)) F64.Boundary
F64.Circle                                                         : *
F64.Circle.new                                                     : ∀(:F64.V3) ∀(:F64) F64.Circle
F64.Line                                                           : *
F64.Line.new                                                       : ∀(:F64.V3) ∀(:F64.V3) F64.Line
F64.Segment                                                        : *
F64.Segment.new                                                    : ∀(:F64.V3) ∀(:F64.V3) F64.Segment
F64.V3.add                                                         : ∀(:F64.V3) ∀(:F64.V3) F64.V3
F64.V3.circle_boundary_intersects                                  : ∀(:F64.Circle) ∀(:F64.Boundary) F64
F64.V3.circle_line_intersection                                    : ∀(:F64.Circle) ∀(:F64.Line) (Maybe ((Pair F64.V3) F64.V3))
F64.V3.circle_to_circle_hit_dist                                   : ∀(:F64.Circle) ∀(:F64.V3) ∀(:F64.Circle) (Maybe F64)
F64.V3.dist                                                        : ∀(:F64.V3) ∀(:F64.V3) F64
F64.V3.dot                                                         : ∀(:F64.V3) ∀(:F64.V3) F64
F64.V3.eql                                                         : ∀(:F64.V3) ∀(:F64.V3) Bool
F64.V3                                                             : *
F64.V3.get_x                                                       : ∀(:F64.V3) F64
F64.V3.get_y                                                       : ∀(:F64.V3) F64
F64.V3.get_z                                                       : ∀(:F64.V3) F64
F64.V3.len                                                         : ∀(:F64.V3) F64
F64.V3.look_at                                                     : ∀(:F64.V3) ∀(:F64.V3) ∀(:F64.V3) F64.V3
F64.V3.ltn                                                         : ∀(:F64.V3) ∀(:F64.V3) Bool
F64.V3.map                                                         : ∀(:∀(:F64) F64) ∀(:F64.V3) F64.V3
F64.V3.map_x                                                       : ∀(:∀(:F64) F64) ∀(:F64.V3) F64.V3
F64.V3.map_y                                                       : ∀(:∀(:F64) F64) ∀(:F64.V3) F64.V3
F64.V3.map_z                                                       : ∀(:∀(:F64) F64) ∀(:F64.V3) F64.V3
F64.V3.mul                                                         : ∀(:F64.V3) ∀(:F64.V3) F64.V3
F64.V3.new                                                         : ∀(:F64) ∀(:F64) ∀(:F64) F64.V3
F64.V3.norm                                                        : ∀(:F64.V3) F64.V3
F64.V3.point_segment_dist                                          : ∀(:F64.V3) ∀(:F64.Segment) F64
F64.V3.point_segment_sqrdist                                       : ∀(:F64.V3) ∀(:F64.Segment) F64
F64.V3.polygon_to_segments.cons                                    : ∀(:F64.V3) ∀(:F64.V3) ∀(:F64.V3) ∀(:∀(:(Maybe F64.V3)) ∀(:(Maybe F64.V3)) (List F64.Segment)) ∀(:(Maybe F64.V3)) ∀(:(Maybe F64.V3)) (List F64.Segment)
F64.V3.polygon_to_segments                                         : ∀(:F64.V3) ∀(:F64.V3) ∀(:(List F64.V3)) (List F64.Segment)
F64.V3.polygon_to_segments.nil                                     : ∀(:F64.V3) ∀(:F64.V3) ∀(:(Maybe F64.V3)) ∀(:(Maybe F64.V3)) (List F64.Segment)
F64.V3.polygon_to_segments.transform                               : ∀(:F64.V3) ∀(:F64.V3) ∀(:F64.V3) F64.V3
F64.V3.rot_90                                                      : ∀(:F64.V3) F64.V3
F64.V3.rotate                                                      : ∀(:F64) ∀(:F64.V3) ∀(:F64.V3) F64.V3
F64.V3.scale                                                       : ∀(:F64) ∀(:F64.V3) F64.V3
F64.V3.sqr_dist                                                    : ∀(:F64.V3) ∀(:F64.V3) F64
F64.V3.sub                                                         : ∀(:F64.V3) ∀(:F64.V3) F64.V3
F64._1                                                             : F64
F64.acos                                                           : ∀(:F64) F64
F64.add                                                            : ∀(:F64) ∀(:F64) F64
F64.asin                                                           : ∀(:F64) F64
F64.atan                                                           : ∀(:F64) ∀(:F64) F64
F64.cmp                                                            : ∀(:F64) ∀(:F64) Cmp
F64.cos                                                            : ∀(:F64) F64
F64.div                                                            : ∀(:F64) ∀(:F64) F64
F64.eql                                                            : ∀(:F64) ∀(:F64) Bool
F64.exp                                                            : ∀(:F64) ∀(:F64) F64
F64.floor                                                          : ∀(:F64) F64
F64                                                                : *
F64.from_bool                                                      : ∀(:Bool) F64
F64.gte                                                            : ∀(:F64) ∀(:F64) Bool
F64.gtn                                                            : ∀(:F64) ∀(:F64) Bool
F64.if                                                             : Π(A:*) ∀(x:F64) ∀(ct:A) ∀(cf:A) A
F64.is_between                                                     : ∀(:F64) ∀(:F64) ∀(:F64) Bool
F64.log                                                            : ∀(:F64) F64
F64.lte                                                            : ∀(:F64) ∀(:F64) Bool
F64.ltn                                                            : ∀(:F64) ∀(:F64) Bool
F64.max                                                            : ∀(:F64) ∀(:F64) F64
F64.min                                                            : ∀(:F64) ∀(:F64) F64
F64.mod                                                            : ∀(:F64) ∀(:F64) F64
F64.mul                                                            : ∀(:F64) ∀(:F64) F64
F64.new                                                            : ∀(:(Word Nat.64)) F64
F64.parse                                                          : ∀(:String) F64
F64.parse_binary                                                   : ∀(:String) F64
F64.pi                                                             : F64
F64.pow                                                            : ∀(:F64) ∀(:F64) F64
F64.sin                                                            : ∀(:F64) F64
F64.sqrt                                                           : ∀(:F64) F64
F64.sub                                                            : ∀(:F64) ∀(:F64) F64
F64.tan                                                            : ∀(:F64) F64
Function.call                                                      : Π(A:*) Π(B:*) ∀(x:A) ∀(f:∀(:A) B) B
Function.comp                                                      : Π(A:*) Π(B:*) Π(C:∀(:B) *) ∀(g:∀(b:B) (C b)) ∀(f:∀(:A) B) ∀(x:A) (C (f x))
Function.const                                                     : Π(A:*) ∀(x:A) ∀(y:A) A
Function.curry                                                     : Π(A:*) Π(B:*) Π(C:*) ∀(f:∀(:((Pair A) B)) C) ∀(x:A) ∀(y:B) C
Function.flip                                                      : Π(A:*) Π(B:*) Π(C:*) ∀(f:∀(:A) ∀(:B) C) ∀(y:B) ∀(x:A) C
Function                                                           : ∀(A:*) ∀(B:∀(:A) *) *
Function.id                                                        : Π(A:*) ∀(x:A) A
Function.pipe                                                      : Π(A:*) Π(B:*) ∀(x:A) ∀(f:∀(:A) B) B
Function.uncurry                                                   : Π(A:*) Π(B:*) Π(C:*) ∀(f:∀(:A) ∀(:B) C) ∀(p:((Pair A) B)) C
IO.end                                                             : Π(A:*) ∀(:A) (IO A)
IO                                                                 : ∀(:*) *
IO.inp                                                             : Π(A:*) ∀(:∀(:String) (IO A)) (IO A)
IO.log                                                             : Π(A:*) ∀(:String) ∀(:∀(:Unit) (IO A)) (IO A)
JSON.array                                                         : ∀(:(List JSON)) JSON
JSON.bool                                                          : ∀(:Bool) JSON
JSON                                                               : *
JSON.null                                                          : JSON
JSON.number                                                        : ∀(:F64) JSON
JSON.object                                                        : ∀(:(List ((Pair String) JSON))) JSON
JSON.string                                                        : ∀(:String) JSON
Lang.Cont                                                          : *
Lang.all                                                           : (Parser ∀(:Core.Ctx) Core)
Lang.ann                                                           : ∀(:∀(:Core.Ctx) Core) (Parser ∀(:Core.Ctx) Core)
Lang.app                                                           : ∀(:∀(:Core.Ctx) Core) (Parser ∀(:Core.Ctx) Core)
Lang.arr                                                           : ∀(:∀(:Core.Ctx) Core) (Parser ∀(:Core.Ctx) Core)
Lang.block_comment                                                 : (Parser Unit)
Lang.core                                                          : (Parser Core)
Lang.enclose                                                       : Π(A:*) ∀(:(Parser A)) (Parser ((Pair Bool) A))
Lang.is_name                                                       : ∀(:Char) Bool
Lang.is_space                                                      : ∀(:Char) Bool
Lang.lam                                                           : (Parser ∀(:Core.Ctx) Core)
Lang.let                                                           : (Parser ∀(:Core.Ctx) Core)
Lang.line_comment                                                  : (Parser Unit)
Lang.nam                                                           : ∀(:Bool) (Parser String)
Lang.open                                                          : (Parser Bool)
Lang.par                                                           : (Parser ∀(:Core.Ctx) Core)
Lang.parse                                                         : ∀(s:String) ((Parser.type Core) ((<Parser.run_default Core> Lang.core) s))
Lang.pip                                                           : ∀(:∀(:Core.Ctx) Core) (Parser ∀(:Core.Ctx) Core)
Lang.pst                                                           : ∀(:∀(:Core.Ctx) Core) (Parser ∀(:Core.Ctx) Core)
Lang.space                                                         : (Parser Unit)
Lang.symbol                                                        : ∀(:String) (Parser String)
Lang.test                                                          : String
Lang.trm                                                           : (Parser ∀(:Core.Ctx) Core)
Lang.typ                                                           : (Parser ∀(:Core.Ctx) Core)
Lang.var                                                           : (Parser ∀(:Core.Ctx) Core)
Lang.whitespace                                                    : (Parser Unit)
List.all                                                           : Π(A:*) ∀(:∀(:A) Bool) ∀(:(List A)) Bool
List.all_true                                                      : ∀(:(List Bool)) Bool
List.any                                                           : Π(A:*) ∀(:∀(:A) Bool) ∀(:(List A)) Bool
List.any_true                                                      : ∀(:(List Bool)) Bool
List.append                                                        : Π(A:*) ∀(:(List A)) ∀(:A) (List A)
List.at                                                            : Π(A:*) ∀(:(List A)) ∀(:Nat) (Maybe A)
List.bind                                                          : Π(A:*) Π(B:*) ∀(:(List A)) ∀(:∀(:A) (List B)) (List B)
List.chunk                                                         : Π(A:*) ∀(:Nat) ∀(:(List A)) (Maybe (List A))
List.concat                                                        : Π(A:*) ∀(:(List A)) ∀(:(List A)) (List A)
List.cons                                                          : Π(A:*) ∀(head:A) ∀(tail:(List A)) (List A)
List.drop                                                          : Π(A:*) ∀(:Nat) ∀(:(List A)) (List A)
List.filter                                                        : Π(A:*) ∀(:∀(:A) Bool) ∀(:(List A)) (List A)
List.find                                                          : Π(A:*) ∀(:∀(:A) Bool) ∀(:(List A)) (Maybe A)
List.find_last.aux                                                 : Π(A:*) ∀(:(List A)) ∀(:∀(:A) ∀(:Nat) Bool) ∀(:Nat) ∀(:(Maybe ((Pair A) Nat))) (Maybe ((Pair A) Nat))
List.find_last                                                     : Π(A:*) ∀(:(List A)) ∀(:∀(:A) ∀(:Nat) Bool) (Maybe ((Pair A) Nat))
List.flatten                                                       : Π(A:*) ∀(:(List (List A))) (List A)
List                                                               : ∀(A:*) *
List.fold                                                          : Π(A:*) Π(B:*) ∀(:B) ∀(:∀(:A) ∀(:B) B) ∀(:(List A)) B
List.ifind.aux                                                     : Π(A:*) ∀(:(List A)) ∀(:∀(:A) ∀(:Nat) Bool) ∀(:Nat) (Maybe ((Pair A) Nat))
List.ifind                                                         : Π(A:*) ∀(:(List A)) ∀(:∀(:A) ∀(:Nat) Bool) (Maybe ((Pair A) Nat))
List.imap                                                          : Π(A:*) Π(B:*) ∀(:∀(:Nat) ∀(:A) B) ∀(:(List A)) (List B)
List.intercalate                                                   : Π(A:*) ∀(sep:A) ∀(xs:(List A)) (List A)
List.is_empty                                                      : Π(A:*) ∀(:(List A)) Bool
List.length                                                        : Π(A:*) ∀(:(List A)) Nat
List.map                                                           : Π(A:*) Π(B:*) ∀(:∀(:A) B) ∀(:(List A)) (List B)
List.nil                                                           : Π(A:*) (List A)
List.push                                                          : Π(A:*) ∀(:A) ∀(:(List A)) (List A)
List.reverse.aux                                                   : Π(A:*) ∀(:(List A)) ∀(:(List A)) (List A)
List.reverse                                                       : Π(A:*) ∀(:(List A)) (List A)
List.show                                                          : Π(A:*) ∀(f:∀(:A) String) ∀(xs:(List A)) String
List.single                                                        : Π(A:*) ∀(x:A) (List A)
List.take                                                          : Π(A:*) ∀(:Nat) ∀(:(List A)) (List A)
List.to_concat                                                     : Π(A:*) ∀(xs:(List A)) (Concat A)
List.zip_with                                                      : Π(A:*) Π(B:*) Π(C:*) ∀(:∀(:A) ∀(:B) C) ∀(:(List A)) ∀(:(List B)) (List C)
Map                                                                : ∀(A:*) *
Map.get                                                            : Π(A:*) ∀(:Bits) ∀(:(Map A)) (Maybe A)
Map.lookup                                                         : Π(A:*) ∀(:Bits) ∀(:A) ∀(:(Map A)) ((Pair A) (Map A))
Map.mix                                                            : Π(A:*) ∀(:(Maybe A)) ∀(:(Map A)) ∀(:(Map A)) (Map A)
Map.new                                                            : Π(A:*) (Map A)
query                                                              : Π(A:*) ∀(:∀(:A) ((Pair A) A)) ∀(:Bits) ∀(:(Map A)) ((Pair (Map A)) (Maybe A))
Map.set                                                            : Π(A:*) ∀(:Bits) ∀(:A) ∀(:(Map A)) (Map A)
Map.tie                                                            : Π(A:*) ∀(:(Maybe A)) ∀(:(Map A)) ∀(:(Map A)) (Map A)
Maybe.bind                                                         : Π(A:*) Π(B:*) ∀(:(Maybe A)) ∀(:∀(:A) (Maybe B)) (Maybe B)
Maybe.extract                                                      : Π(A:*) ∀(:(Maybe A)) ∀(:A) A
Maybe                                                              : ∀(:*) *
Maybe.join                                                         : Π(A:*) ∀(:(Maybe (Maybe A))) (Maybe A)
Maybe.map                                                          : Π(A:*) Π(B:*) ∀(:∀(:A) B) ∀(:(Maybe A)) (Maybe B)
Maybe.none                                                         : Π(A:*) (Maybe A)
Maybe.some                                                         : Π(A:*) ∀(:A) (Maybe A)
Nat.0                                                              : Nat
Nat.1                                                              : Nat
Nat.10                                                             : Nat
Nat.11                                                             : Nat
Nat.12                                                             : Nat
Nat.13                                                             : Nat
Nat.14                                                             : Nat
Nat.15                                                             : Nat
Nat.16                                                             : Nat
Nat.17                                                             : Nat
Nat.18                                                             : Nat
Nat.19                                                             : Nat
Nat.2                                                              : Nat
Nat.20                                                             : Nat
Nat.21                                                             : Nat
Nat.22                                                             : Nat
Nat.23                                                             : Nat
Nat.24                                                             : Nat
Nat.25                                                             : Nat
Nat.26                                                             : Nat
Nat.27                                                             : Nat
Nat.28                                                             : Nat
Nat.29                                                             : Nat
Nat.3                                                              : Nat
Nat.30                                                             : Nat
Nat.31                                                             : Nat
Nat.32                                                             : Nat
Nat.33                                                             : Nat
Nat.34                                                             : Nat
Nat.35                                                             : Nat
Nat.36                                                             : Nat
Nat.37                                                             : Nat
Nat.38                                                             : Nat
Nat.39                                                             : Nat
Nat.4                                                              : Nat
Nat.40                                                             : Nat
Nat.41                                                             : Nat
Nat.42                                                             : Nat
Nat.43                                                             : Nat
Nat.44                                                             : Nat
Nat.45                                                             : Nat
Nat.46                                                             : Nat
Nat.47                                                             : Nat
Nat.48                                                             : Nat
Nat.49                                                             : Nat
Nat.5                                                              : Nat
Nat.50                                                             : Nat
Nat.51                                                             : Nat
Nat.52                                                             : Nat
Nat.53                                                             : Nat
Nat.54                                                             : Nat
Nat.55                                                             : Nat
Nat.56                                                             : Nat
Nat.57                                                             : Nat
Nat.58                                                             : Nat
Nat.59                                                             : Nat
Nat.6                                                              : Nat
Nat.60                                                             : Nat
Nat.61                                                             : Nat
Nat.62                                                             : Nat
Nat.63                                                             : Nat
Nat.64                                                             : Nat
Nat.7                                                              : Nat
Nat.8                                                              : Nat
Nat.9                                                              : Nat
Nat.add                                                            : ∀(:Nat) ∀(:Nat) Nat
Nat.apply                                                          : Π(A:*) ∀(:Nat) ∀(:∀(:A) A) ∀(:A) A
Nat.cmp                                                            : ∀(:Nat) ∀(:Nat) Cmp
Nat.div                                                            : ∀(:Nat) ∀(:Nat) Nat
Nat.div_mod.aux                                                    : ∀(:Nat) ∀(:Nat) ∀(:Nat) ((Pair Nat) Nat)
Nat.div_mod                                                        : ∀(:Nat) ∀(:Nat) ((Pair Nat) Nat)
Nat.double                                                         : ∀(:Nat) Nat
Nat.eql                                                            : ∀(:Nat) ∀(:Nat) Bool
Nat                                                                : *
Nat.gte                                                            : ∀(:Nat) ∀(:Nat) Bool
Nat.gtn                                                            : ∀(:Nat) ∀(:Nat) Bool
Nat.induction                                                      : ∀(n:Nat) Π(P:∀(:Nat) *) ∀(z:(P Nat.zero)) ∀(s:∀(m:Nat) ∀(:(P m)) (P (Nat.succ m))) (P n)
Nat.is_zero                                                        : ∀(:Nat) Bool
Nat.lte                                                            : ∀(:Nat) ∀(:Nat) Bool
Nat.ltn                                                            : ∀(:Nat) ∀(:Nat) Bool
Nat.mod                                                            : ∀(:Nat) ∀(:Nat) Nat
Nat.mul                                                            : ∀(:Nat) ∀(:Nat) Nat
Nat.parse_decimal                                                  : ∀(:String) Nat
Nat.parse_decimal.go                                               : ∀(:String) ∀(:Nat) Nat
Nat.pred                                                           : ∀(:Nat) Nat
Nat.show.aux                                                       : ∀(:Nat) ∀(:Nat) ∀(:String) String
Nat.show.digit                                                     : ∀(:Nat) ∀(:Nat) Char
Nat.show                                                           : ∀(:Nat) String
Nat.show_base                                                      : ∀(:Nat) ∀(:Nat) String
Nat.solve_for                                                      : ∀(x:Nat) Π(E:∀(x:Nat) *) Π(P:(E x)) Nat
Nat.sub                                                            : ∀(:Nat) ∀(:Nat) Nat
Nat.sub_rem                                                        : ∀(:Nat) ∀(:Nat) ((Either Nat) Nat)
Nat.succ                                                           : ∀(:Nat) Nat
Nat.sum                                                            : ∀(:Nat) Nat
Nat.sum.go                                                         : ∀(:Nat) ∀(:Nat) Nat
Nat.to_base                                                        : ∀(:Nat) ∀(:Nat) (List Nat)
Nat.to_base.go                                                     : ∀(:Nat) ∀(:Nat) ∀(:(List Nat)) (List Nat)
Nat.to_bits                                                        : ∀(:Nat) Bits
Nat.to_string                                                      : ∀(:Nat) String
Nat.to_string_base                                                 : ∀(:Nat) ∀(:Nat) String
Nat.to_string_decimal                                              : ∀(:Nat) String
Nat.zero                                                           : Nat
Newtype.elim                                                       : Π(A:*) Π(tag:String) ∀(n:((Newtype A) tag)) A
Newtype                                                            : ∀(A:*) ∀(tag:String) *
Newtype.val                                                        : Π(A:*) Π(tag:String) ∀(x:A) ((Newtype A) tag)
NonEmpty.cons                                                      : Π(A:*) ∀(head:A) ∀(tail:(NonEmpty A)) (NonEmpty A)
NonEmpty.end                                                       : Π(A:*) ∀(value:A) (NonEmpty A)
NonEmpty                                                           : ∀(A:*) *
NonEmpty.to_list                                                   : Π(A:*) ∀(:(NonEmpty A)) (List A)
Not                                                                : ∀(P:*) *
Or                                                                 : ∀(A:*) ∀(B:*) *
Pair                                                               : ∀(:*) ∀(:*) *
Pair.fst                                                           : Π(A:*) Π(B:*) ∀(:((Pair A) B)) A
Pair.new                                                           : Π(A:*) Π(B:*) ∀(:A) ∀(:B) ((Pair A) B)
Pair.snd                                                           : Π(A:*) Π(B:*) ∀(:((Pair A) B)) B
Parsec.Error.Fancy.custom                                          : Π(E:*) ∀(e:E) (Parsec.Error.Fancy E)
Parsec.Error.Fancy.fail                                            : Π(E:*) ∀(:String) (Parsec.Error.Fancy E)
Parsec.Error.Fancy                                                 : ∀(:*) *
Parsec.Error.Item.end_of_input                                     : Parsec.Error.Item
Parsec.Error.Item                                                  : *
Parsec.Error.Item.label                                            : ∀(:String) Parsec.Error.Item
Parsec.Error.Item.show                                             : ∀(:Parsec.Error.Item) String
Parsec.Error.Item.tokens                                           : ∀(:String) Parsec.Error.Item
Parsec.Error                                                       : ∀(:*) *
Parsec.Error.index                                                 : Π(E:*) ∀(:(Parsec.Error E)) Nat
Parsec.Error.make_fancy                                            : Π(E:*) ∀(:Nat) ∀(:(List (Parsec.Error.Fancy E))) (Parsec.Error E)
Parsec.Error.make_trivial                                          : Π(E:*) ∀(:Nat) ∀(:(Maybe Parsec.Error.Item)) ∀(:(List Parsec.Error.Item)) (Parsec.Error E)
Parsec.Error.merge                                                 : Π(E:*) ∀(:(Parsec.Error E)) ∀(:(Parsec.Error E)) (Parsec.Error E)
Parsec.Error.show                                                  : Π(E:*) ∀(:∀(:E) String) ∀(:(Parsec.Error E)) String
Parsec.Reply.eaten_error                                           : Π(S:*) Π(E:*) Π(A:*) ∀(:((Parsec.State S) E)) ∀(:(Parsec.Error E)) (((Parsec.Reply S) E) A)
Parsec.Reply.eaten_value                                           : Π(S:*) Π(E:*) Π(A:*) ∀(:((Parsec.State S) E)) ∀(:A) (((Parsec.Reply S) E) A)
Parsec.Reply.empty_error                                           : Π(S:*) Π(E:*) Π(A:*) ∀(:((Parsec.State S) E)) ∀(:(Parsec.Error E)) (((Parsec.Reply S) E) A)
Parsec.Reply.empty_value                                           : Π(S:*) Π(E:*) Π(A:*) ∀(:((Parsec.State S) E)) ∀(:A) (((Parsec.Reply S) E) A)
Parsec.Reply                                                       : ∀(:*) ∀(:*) ∀(:*) *
Parsec.Reply.to_either                                             : Π(S:*) Π(E:*) Π(A:*) ∀(:(((Parsec.Reply S) E) A)) ((Either (Parsec.Error E)) A)
Parsec.State.default                                               : Π(S:*) Π(E:*) ∀(:String) ∀(:S) ((Parsec.State S) E)
Parsec.State                                                       : ∀(:*) ∀(:*) *
Parsec.State.longest_match                                         : Π(S:*) Π(E:*) ∀(:((Parsec.State S) E)) ∀(:((Parsec.State S) E)) ((Parsec.State S) E)
Parsec.State.make                                                  : Π(S:*) Π(E:*) ∀(:String) ∀(:Nat) ∀(:(List (Parsec.Error E))) ∀(:S) ((Parsec.State S) E)
Parsec.any_char                                                    : Π(S:*) Π(E:*) (((Parsec S) E) Char)
Parsec.ap                                                          : Π(S:*) Π(E:*) Π(A:*) Π(B:*) ∀(:(((Parsec S) E) ∀(:A) B)) ∀(:(((Parsec S) E) A)) (((Parsec S) E) B)
Parsec.bind                                                        : Π(S:*) Π(E:*) Π(A:*) Π(B:*) ∀(:(((Parsec S) E) A)) ∀(:∀(:A) (((Parsec S) E) B)) (((Parsec S) E) B)
Parsec.char                                                        : Π(S:*) Π(E:*) ∀(:Char) (((Parsec S) E) Char)
Parsec.choice                                                      : Π(S:*) Π(E:*) Π(A:*) ∀(:(List (((Parsec S) E) A))) (((Parsec S) E) A)
Parsec.eof                                                         : Π(S:*) Π(E:*) (((Parsec S) E) Unit)
Parsec.fail                                                        : Π(S:*) Π(E:*) Π(A:*) ∀(:String) (((Parsec S) E) A)
Parsec                                                             : ∀(S:*) ∀(E:*) ∀(A:*) *
Parsec.get_state                                                   : Π(S:*) Π(E:*) (((Parsec S) E) ((Parsec.State S) E))
Parsec.label                                                       : Π(S:*) Π(E:*) Π(A:*) ∀(:String) ∀(:(((Parsec S) E) A)) (((Parsec S) E) A)
Parsec.make                                                        : Π(S:*) Π(E:*) Π(A:*) ∀(:∀(:((Parsec.State S) E)) (((Parsec.Reply S) E) A)) (((Parsec S) E) A)
Parsec.many                                                        : Π(S:*) Π(E:*) Π(A:*) ∀(:(((Parsec S) E) A)) (((Parsec S) E) (List A))
Parsec.many_till                                                   : Π(S:*) Π(E:*) Π(A:*) Π(B:*) ∀(:(((Parsec S) E) A)) ∀(:(((Parsec S) E) B)) (((Parsec S) E) (List A))
Parsec.map                                                         : Π(S:*) Π(E:*) Π(A:*) Π(B:*) ∀(:∀(:A) B) ∀(:(((Parsec S) E) A)) (((Parsec S) E) B)
Parsec.observing                                                   : Π(S:*) Π(E:*) Π(A:*) ∀(:(((Parsec S) E) A)) (((Parsec S) E) ((Either (Parsec.Error E)) A))
Parsec.optional                                                    : Π(S:*) Π(E:*) Π(A:*) ∀(:(((Parsec S) E) A)) (((Parsec S) E) (Maybe A))
Parsec.parse                                                       : Π(S:*) Π(E:*) Π(A:*) ∀(p:(((Parsec S) E) A)) ∀(s:((Parsec.State S) E)) ((((Parsec.type S) E) A) ((<<<Parsec.run S> E> A> p) s))
Parsec.peek                                                        : Π(S:*) Π(E:*) Π(A:*) ∀(:(((Parsec S) E) A)) (((Parsec S) E) A)
Parsec.plus                                                        : Π(S:*) Π(E:*) Π(A:*) ∀(:(((Parsec S) E) A)) ∀(:(((Parsec S) E) A)) (((Parsec S) E) A)
Parsec.pure                                                        : Π(S:*) Π(E:*) Π(A:*) ∀(a:A) (((Parsec S) E) A)
Parsec.run                                                         : Π(S:*) Π(E:*) Π(A:*) ∀(:(((Parsec S) E) A)) ∀(:((Parsec.State S) E)) (((Parsec.Reply S) E) A)
Parsec.run_default                                                 : Π(S:*) Π(E:*) Π(A:*) ∀(:(((Parsec S) E) A)) ∀(:String) ∀(:S) ((Either (Parsec.Error E)) A)
Parsec.skip_many                                                   : Π(S:*) Π(E:*) Π(A:*) ∀(:(((Parsec S) E) A)) (((Parsec S) E) Unit)
Parsec.take                                                        : Π(S:*) Π(E:*) Π(A:*) ∀(:String) ∀(:Nat) (((Parsec S) E) String)
Parsec.take_while                                                  : Π(S:*) Π(E:*) ∀(:∀(:Char) Bool) (((Parsec S) E) String)
Parsec.take_while1                                                 : Π(S:*) Π(E:*) ∀(:String) ∀(:∀(:Char) Bool) (((Parsec S) E) String)
Parsec.test1                                                       : String
Parsec.then                                                        : Π(S:*) Π(E:*) Π(A:*) Π(B:*) ∀(:(((Parsec S) E) A)) ∀(:(((Parsec S) E) B)) (((Parsec S) E) B)
Parsec.throw                                                       : Π(S:*) Π(E:*) Π(A:*) ∀(:(Parsec.Error E)) (((Parsec S) E) A)
Parsec.token                                                       : Π(S:*) Π(E:*) Π(A:*) ∀(:∀(:Char) (Maybe A)) ∀(:(List Parsec.Error.Item)) (((Parsec S) E) A)
Parsec.tokens                                                      : Π(S:*) Π(E:*) ∀(:String) (((Parsec S) E) String)
Parsec.try                                                         : Π(S:*) Π(E:*) Π(A:*) ∀(:(((Parsec S) E) A)) (((Parsec S) E) A)
Parsec.type                                                        : ∀(S:*) ∀(E:*) ∀(A:*) ∀(:(((Parsec.Reply S) E) A)) *
Parsec.zero                                                        : Π(S:*) Π(E:*) Π(A:*) (((Parsec S) E) A)
Parser.Error                                                       : *
Parser.Error.show                                                  : ∀(:Parser.Error) String
Parser.Reply                                                       : ∀(:*) *
Parser.State.default                                               : ∀(:String) Parser.State
Parser.State                                                       : *
Parser.any_char                                                    : (Parser Char)
Parser.ap                                                          : Π(A:*) Π(B:*) ∀(:(Parser ∀(:A) B)) ∀(:(Parser A)) (Parser B)
Parser.bind                                                        : Π(A:*) Π(B:*) ∀(:(Parser A)) ∀(:∀(:A) (Parser B)) (Parser B)
Parser.char                                                        : ∀(:Char) (Parser Char)
Parser.choice                                                      : Π(A:*) ∀(:(List (Parser A))) (Parser A)
Parser.eof                                                         : (Parser Unit)
Parser.fail                                                        : Π(A:*) ∀(:String) (Parser A)
Parser                                                             : ∀(:*) *
Parser.label                                                       : Π(A:*) ∀(:String) ∀(:(Parser A)) (Parser A)
Parser.many                                                        : Π(A:*) ∀(:(Parser A)) (Parser (List A))
Parser.many_till                                                   : Π(A:*) Π(B:*) ∀(:(Parser A)) ∀(:(Parser B)) (Parser (List A))
Parser.observing                                                   : Π(A:*) ∀(:(Parser A)) (Parser ((Either Parser.Error) A))
Parser.optional                                                    : Π(A:*) ∀(:(Parser A)) (Parser (Maybe A))
Parser.parse                                                       : Π(A:*) ∀(p:(Parser A)) ∀(s:String) ((Parser.type A) ((<Parser.run A> p) (Parser.State.default s)))
Parser.plus                                                        : Π(A:*) ∀(:(Parser A)) ∀(:(Parser A)) (Parser A)
Parser.pure                                                        : Π(A:*) ∀(a:A) (Parser A)
Parser.run                                                         : Π(A:*) ∀(:(Parser A)) ∀(:Parser.State) (Parser.Reply A)
Parser.run_default                                                 : Π(A:*) ∀(:(Parser A)) ∀(:String) (Parser.Reply A)
Parser.run_either                                                  : Π(A:*) ∀(:(Parser A)) ∀(:String) ((Either Parser.Error) A)
Parser.skip_many                                                   : Π(A:*) ∀(:(Parser A)) (Parser Unit)
Parser.take                                                        : Π(A:*) ∀(:String) ∀(:Nat) (Parser String)
Parser.take_while                                                  : ∀(:∀(:Char) Bool) (Parser String)
Parser.take_while1                                                 : ∀(:String) ∀(:∀(:Char) Bool) (Parser String)
Parser.then                                                        : Π(A:*) Π(B:*) ∀(:(Parser A)) ∀(:(Parser B)) (Parser B)
Parser.token                                                       : Π(A:*) ∀(:∀(:Char) (Maybe A)) ∀(:(List Parsec.Error.Item)) (Parser A)
Parser.tokens                                                      : ∀(:String) (Parser String)
Parser.try                                                         : Π(A:*) ∀(:(Parser A)) (Parser A)
Parser.type                                                        : ∀(A:*) ∀(:(Parser.Reply A)) *
Parser.zero                                                        : Π(A:*) (Parser A)
Research.core_in_core                                              : String
Research.Var                                                       : *
Research.Var.new                                                   : ∀(:Char) ∀(:Nat) Research.Var
Research.Ctx                                                       : *
Research.Ctx.nil                                                   : Research.Ctx
Research.Ctx.ext                                                   : ∀(:Char) ∀(:Nat) ∀(:Research.Ctx) Research.Ctx
Research.Ctx.get                                                   : ∀(:Char) ∀(:Research.Ctx) (Maybe Nat)
Research.parse_fun.filt                                            : ∀(:String) String
Research.parse_fun.typ0                                            : ∀(:String) ∀(:Research.Ctx) *
Research.parse_fun.typ1                                            : ∀(:Char) ∀(:String) ∀(:Research.Ctx) *
Research.parse_fun.term                                            : ∀(str:String) ∀(ctx:Research.Ctx) ((Research.parse_fun.typ0 str) ctx)
Research.fun                                                       : ∀(str:String) ((Research.parse_fun.typ0 (Research.parse_fun.filt str)) Research.Ctx.nil)
Research.crazy                                                     : ∀(:Nat) ∀(:Nat) ∀(:Nat) Nat
Research.it_works                                                  : (((Equal Nat) Nat.1) (((Research.crazy Nat.0) Nat.1) Nat.2))
Research.equal_mul                                                 : (((Equal Nat) ((Nat.mul ((Nat.mul Nat.32) Nat.16)) Nat.1)) ((Nat.mul ((Nat.mul Nat.16) Nat.32)) Nat.1))
Research.floats                                                    : F64
Research.get_syntax                                                : Nat
Research.inference0                                                : (Word Nat.4)
Research.inference1                                                : ∀(:Bool) Bool
Research.nat_literals                                              : (IO Unit)
Research.solve                                                     : Nat
Research.synthesis0                                                : Π(A:*) Π(B:*) Π(C:*) ∀(:∀(:B) C) ∀(:∀(:A) B) ∀(:A) C
Research.synthesis1                                                : Π(P:∀(:Nat) *) ∀(f:Π(n:Nat) ∀(:(P n)) (P (Nat.succ n))) ∀(x:(P Nat.zero)) (P Nat.3)
Set                                                                : *
Set.get                                                            : ∀(:Bits) ∀(:Set) Bool
Set.new                                                            : Set
Set.set                                                            : ∀(:Bits) ∀(:Set) Set
Show                                                               : ∀(x:String) *
Show.msg                                                           : ∀(x:String) (Show x)
Sigma                                                              : ∀(A:*) ∀(B:∀(:A) *) *
Sigma.fst                                                          : Π(A:*) Π(B:∀(:A) *) ∀(sig:((Sigma A) B)) A
Sigma.new                                                          : Π(A:*) Π(B:∀(:A) *) ∀(a:A) ∀(:(B a)) ((Sigma A) B)
Sigma.snd                                                          : Π(A:*) Π(B:∀(:A) *) ∀(sig:((Sigma A) B)) (B (<<Sigma.fst A> B> sig))
String.chunk                                                       : ∀(:Nat) ∀(:String) (Maybe String)
String.concat                                                      : ∀(:String) ∀(:String) String
String.cons                                                        : ∀(:Char) ∀(:String) String
String.drop                                                        : ∀(:Nat) ∀(:String) String
String.drop_until                                                  : ∀(:∀(:Char) Bool) ∀(:String) String
String.drop_while                                                  : ∀(:∀(:Char) Bool) ∀(:String) String
String.eql                                                         : ∀(:String) ∀(:String) Bool
String.filter                                                      : ∀(:∀(:Char) Bool) ∀(:String) String
String.flatten                                                     : ∀(:(List String)) String
String                                                             : *
String.is_empty                                                    : ∀(:String) Bool
String.length                                                      : ∀(:String) Nat
String.nil                                                         : String
String.quote                                                       : ∀(:String) String
String.reverse                                                     : ∀(:String) String
String.reverse.go                                                  : ∀(:String) ∀(:String) String
String.single                                                      : ∀(x:Char) String
String.tail                                                        : ∀(:String) String
String.take                                                        : ∀(:Nat) ∀(:String) String
String.take_n.aux                                                  : ∀(:Nat) ∀(:String) ∀(:String) (Maybe ((Pair String) String))
String.take_n                                                      : ∀(:Nat) ∀(:String) (Maybe ((Pair String) String))
String.take_while.aux                                              : ∀(:∀(:Char) Bool) ∀(:String) ∀(:String) ((Pair String) String)
String.take_while                                                  : ∀(:∀(:Char) Bool) ∀(:String) ((Pair String) String)
String.to_bits                                                     : ∀(:String) Bits
String.to_list                                                     : ∀(:String) (List Char)
String.to_set                                                      : ∀(:String) Set
String.to_stringifier                                              : ∀(:String) Stringifier
Stringifier.concat                                                 : ∀(:Stringifier) ∀(:Stringifier) Stringifier
Stringifier                                                        : *
Stringifier.to_string                                              : ∀(:Stringifier) String
Subset                                                             : ∀(A:*) ∀(B:∀(:A) *) *
Subset.new                                                         : Π(A:*) Π(B:∀(:A) *) ∀(a:A) Π(b:(B a)) ((Subset A) B)
TaelinArena.Constants.ONE_SEC                                      : F64
TaelinArena.Constants.POS_X_KEY                                    : Bits
TaelinArena.Constants.POS_Y_KEY                                    : Bits
TaelinArena.Game.ActionId                                          : *
TaelinArena.Game.Buff                                              : *
TaelinArena.Game.Buff.hasted                                       : ∀(:F64) ∀(:F64) TaelinArena.Game.Buff
TaelinArena.Game.Buff.rooted                                       : ∀(:F64) TaelinArena.Game.Buff
TaelinArena.Game.Buff.shielded                                     : ∀(:F64) ∀(:F64) TaelinArena.Game.Buff
TaelinArena.Game.Buff.silenced                                     : ∀(:F64) TaelinArena.Game.Buff
TaelinArena.Game.Buff.slowed                                       : ∀(:F64) ∀(:F64) TaelinArena.Game.Buff
TaelinArena.Game.Buff.stuned                                       : ∀(:F64) TaelinArena.Game.Buff
TaelinArena.Game.Command                                           : *
TaelinArena.Game.Command.new                                       : ∀(:TaelinArena.Game.PlayerId) ∀(:TaelinArena.Game.Input) TaelinArena.Game.Command
TaelinArena.Game.Effect.damage                                     : ∀(:F64) TaelinArena.Game.Effect
TaelinArena.Game.Effect                                            : *
TaelinArena.Game.Effect.haste                                      : ∀(:F64) ∀(:F64) TaelinArena.Game.Effect
TaelinArena.Game.Effect.heal                                       : ∀(:F64) TaelinArena.Game.Effect
TaelinArena.Game.Effect.impulse                                    : ∀(:F64) ∀(:F64.V3) TaelinArena.Game.Effect
TaelinArena.Game.Effect.repulse                                    : ∀(:F64) TaelinArena.Game.Effect
TaelinArena.Game.Effect.root                                       : ∀(:F64) TaelinArena.Game.Effect
TaelinArena.Game.Effect.shield                                     : ∀(:F64) ∀(:F64) TaelinArena.Game.Effect
TaelinArena.Game.Effect.silence                                    : ∀(:F64) TaelinArena.Game.Effect
TaelinArena.Game.Effect.slow                                       : ∀(:F64) ∀(:F64) TaelinArena.Game.Effect
TaelinArena.Game.Effect.stun                                       : ∀(:F64) TaelinArena.Game.Effect
TaelinArena.Game.Effect.teleport                                   : ∀(:F64.V3) ∀(:F64) TaelinArena.Game.Effect
TaelinArena.Game.Game                                              : *
TaelinArena.Game.Game.new                                          : ∀(:(List TaelinArena.Game.Thing)) TaelinArena.Game.Game
TaelinArena.Game.Hit                                               : *
TaelinArena.Game.Hit.new                                           : ∀(:(List TaelinArena.Game.Effect)) ∀(:F64.V3) ∀(:F64.V3) ∀(:TaelinArena.Game.Hitbox) TaelinArena.Game.Hit
TaelinArena.Game.Hitbox.cbox                                       : ∀(:F64) TaelinArena.Game.Hitbox
TaelinArena.Game.Hitbox                                            : *
TaelinArena.Game.Hitbox.nbox                                       : TaelinArena.Game.Hitbox
TaelinArena.Game.Hitbox.pbox                                       : ∀(:(List F64.V3)) TaelinArena.Game.Hitbox
TaelinArena.Game.Input.cmsg                                        : ∀(:String) TaelinArena.Game.Input
TaelinArena.Game.Input                                             : *
TaelinArena.Game.Input.key0                                        : ∀(:F64.V3) TaelinArena.Game.Input
TaelinArena.Game.Input.key1                                        : ∀(:F64.V3) TaelinArena.Game.Input
TaelinArena.Game.Input.key2                                        : ∀(:F64.V3) TaelinArena.Game.Input
TaelinArena.Game.Input.key3                                        : ∀(:F64.V3) TaelinArena.Game.Input
TaelinArena.Game.Input.key4                                        : ∀(:F64.V3) TaelinArena.Game.Input
TaelinArena.Game.Input.key5                                        : ∀(:F64.V3) TaelinArena.Game.Input
TaelinArena.Game.Input.sdir                                        : ∀(:F64.V3) TaelinArena.Game.Input
TaelinArena.Game.Light                                             : *
TaelinArena.Game.Light.new                                         : ∀(:F64.V3) ∀(:F64) ∀(:F64) ∀(:F64.V3) ∀(:F64.V3) TaelinArena.Game.Light
TaelinArena.Game.ModelId                                           : *
F64.Ordering.EQ                                                    : F64.Ordering
F64.Ordering.GT                                                    : F64.Ordering
F64.Ordering.LT                                                    : F64.Ordering
F64.Ordering                                                       : *
TaelinArena.Game.PlayerId                                          : *
TaelinArena.Game.SideId                                            : *
TaelinArena.Game.Thing                                             : *
TaelinArena.Game.Thing.new                                         : ∀(:TaelinArena.Game.TxFunction) ∀(:TaelinArena.Game.PlayerId) ∀(:TaelinArena.Game.ModelId) ∀(:TaelinArena.Game.ActionId) ∀(:TaelinArena.Game.SideId) ∀(:(Map F64)) ∀(:String) ∀(:(List TaelinArena.Game.Light)) ∀(:F64) ∀(:F64.V3) ∀(:F64) ∀(:F64) ∀(:F64.V3) ∀(:F64.V3) ∀(:F64.V3) ∀(:F64.V3) ∀(:TaelinArena.Game.Hitbox) ∀(:F64) ∀(:F64) ∀(:F64) ∀(:F64.V3) ∀(:(List TaelinArena.Game.Buff)) ∀(:(List TaelinArena.Game.Thing)) ∀(:(List TaelinArena.Game.Hit)) ∀(:Bool) ∀(:Bool) TaelinArena.Game.Thing
TaelinArena.Game.TxFunction                                        : *
TaelinArena.Game.animate                                           : ∀(self:TaelinArena.Game.Thing) ∀(boost:F64) ∀(model:F64) ∀(count:F64) ∀(durat:F64) TaelinArena.Game.Thing
TaelinArena.Game.animate_between                                   : ∀(self:TaelinArena.Game.Thing) ∀(boost:F64) ∀(model:F64) ∀(count:F64) ∀(from:F64) ∀(til:F64) TaelinArena.Game.Thing
TaelinArena.Game.animate_die                                       : ∀(self:TaelinArena.Game.Thing) ∀(boost:F64) ∀(model:F64) ∀(count:F64) ∀(durat:F64) TaelinArena.Game.Thing
TaelinArena.Game.animate_with_blink                                : ∀(self:TaelinArena.Game.Thing) ∀(boost:F64) ∀(model_atk:F64) ∀(model_idle:F64) ∀(count:F64) ∀(from:F64) ∀(til:F64) TaelinArena.Game.Thing
TaelinArena.Game.at_dist                                           : ∀(:TaelinArena.Game.Thing) ∀(:F64) F64.V3
TaelinArena.Game.at_max_dist                                       : ∀(:TaelinArena.Game.Thing) ∀(:F64) F64.V3
TaelinArena.Game.at_min_dist                                       : ∀(:TaelinArena.Game.Thing) ∀(:F64) F64.V3
TaelinArena.Game.between_dist                                      : ∀(:TaelinArena.Game.Thing) ∀(:F64) ∀(:F64) F64.V3
TaelinArena.Game.blink                                             : ∀(self:TaelinArena.Game.Thing) ∀(at_tik:F64) ∀(to_pos:F64.V3) TaelinArena.Game.Thing
TaelinArena.Game.cast                                              : ∀(:TaelinArena.Game.Thing) ∀(:F64) ∀(:(List TaelinArena.Game.Hit)) TaelinArena.Game.Thing
TaelinArena.Game.combine_mov_buffs                                 : ∀(:TaelinArena.Game.Buff) ∀(:F64) F64
F64.compare_numbers                                                : ∀(:F64) ∀(:F64) F64.Ordering
TaelinArena.Game.create_at                                         : ∀(self:TaelinArena.Game.Thing) ∀(at_tik:F64) ∀(new_thing:TaelinArena.Game.TxFunction) TaelinArena.Game.Thing
TaelinArena.Game.dash                                              : ∀(self:TaelinArena.Game.Thing) ∀(speed:F64) ∀(from_tik:F64) ∀(til_tik:F64) TaelinArena.Game.Thing
TaelinArena.Game.die                                               : ∀(:TaelinArena.Game.Thing) ∀(:F64) TaelinArena.Game.Thing
TaelinArena.Game.end_thing                                         : ∀(self:TaelinArena.Game.Thing) ∀(tx:TaelinArena.Game.TxFunction) ∀(after_tiks:F64) ∀(stt_key:Bits) TaelinArena.Game.Thing
TaelinArena.Game.get_position_by_pid                               : ∀(:TaelinArena.Game.PlayerId) ∀(:TaelinArena.Game.Game) F64.V3
TaelinArena.Game.get_stt_value                                     : ∀(:TaelinArena.Game.Thing) ∀(:Bits) F64
TaelinArena.Game.get_stt_value_v3                                  : ∀(self:TaelinArena.Game.Thing) F64.V3
TaelinArena.Game.get_thing_act                                     : ∀(thi:TaelinArena.Game.Thing) TaelinArena.Game.ActionId
TaelinArena.Game.get_thing_box                                     : ∀(thi:TaelinArena.Game.Thing) TaelinArena.Game.Hitbox
TaelinArena.Game.get_thing_bst                                     : ∀(thi:TaelinArena.Game.Thing) F64
TaelinArena.Game.get_thing_buf                                     : ∀(thi:TaelinArena.Game.Thing) (List TaelinArena.Game.Buff)
TaelinArena.Game.get_thing_by_pid.cond                             : ∀(:TaelinArena.Game.PlayerId) ∀(:TaelinArena.Game.Thing) Bool
TaelinArena.Game.get_thing_by_pid                                  : ∀(:TaelinArena.Game.PlayerId) ∀(:TaelinArena.Game.Game) (Maybe TaelinArena.Game.Thing)
TaelinArena.Game.get_thing_chi                                     : ∀(thi:TaelinArena.Game.Thing) (List TaelinArena.Game.Thing)
TaelinArena.Game.get_thing_die                                     : ∀(thi:TaelinArena.Game.Thing) Bool
TaelinArena.Game.get_thing_dir                                     : ∀(thi:TaelinArena.Game.Thing) F64.V3
TaelinArena.Game.get_thing_dmg                                     : ∀(thi:TaelinArena.Game.Thing) F64
TaelinArena.Game.get_thing_fun                                     : ∀(thi:TaelinArena.Game.Thing) TaelinArena.Game.TxFunction
TaelinArena.Game.get_thing_hit                                     : ∀(thi:TaelinArena.Game.Thing) (List TaelinArena.Game.Hit)
TaelinArena.Game.get_thing_knk                                     : ∀(thi:TaelinArena.Game.Thing) F64.V3
TaelinArena.Game.get_thing_lit                                     : ∀(thi:TaelinArena.Game.Thing) (List TaelinArena.Game.Light)
TaelinArena.Game.get_thing_mhp                                     : ∀(thi:TaelinArena.Game.Thing) F64
TaelinArena.Game.get_thing_mid                                     : ∀(thi:TaelinArena.Game.Thing) TaelinArena.Game.ModelId
TaelinArena.Game.get_thing_mov                                     : ∀(thi:TaelinArena.Game.Thing) F64
TaelinArena.Game.get_thing_nam                                     : ∀(thi:TaelinArena.Game.Thing) String
TaelinArena.Game.get_thing_pad                                     : ∀(thi:TaelinArena.Game.Thing) F64.V3
TaelinArena.Game.get_thing_pid                                     : ∀(thi:TaelinArena.Game.Thing) TaelinArena.Game.PlayerId
TaelinArena.Game.get_thing_pos                                     : ∀(thi:TaelinArena.Game.Thing) F64.V3
TaelinArena.Game.get_thing_rst                                     : ∀(thi:TaelinArena.Game.Thing) Bool
TaelinArena.Game.get_thing_sid                                     : ∀(thi:TaelinArena.Game.Thing) TaelinArena.Game.SideId
TaelinArena.Game.get_thing_stt                                     : ∀(thi:TaelinArena.Game.Thing) (Map F64)
TaelinArena.Game.get_thing_tik                                     : ∀(thi:TaelinArena.Game.Thing) F64
TaelinArena.Game.get_thing_trg                                     : ∀(thi:TaelinArena.Game.Thing) F64.V3
TaelinArena.Game.get_thing_vel                                     : ∀(thi:TaelinArena.Game.Thing) F64.V3
TaelinArena.Game.get_thing_wei                                     : ∀(thi:TaelinArena.Game.Thing) F64
TaelinArena.Game.handle_shields                                    : ∀(hit_dmg:F64) ∀(self:TaelinArena.Game.Thing) TaelinArena.Game.Thing
TaelinArena.Game.has_shields                                       : ∀(:TaelinArena.Game.Thing) Bool
TaelinArena.Game.illumine                                          : ∀(:TaelinArena.Game.Thing) ∀(:F64) ∀(:F64) ∀(:(List TaelinArena.Game.Light)) TaelinArena.Game.Thing
TaelinArena.Game.init_act                                          : ∀(self:TaelinArena.Game.Thing) ∀(new_act:F64) ∀(new_trg:F64.V3) TaelinArena.Game.Thing
TaelinArena.Game.is_rooted                                         : ∀(self:TaelinArena.Game.Thing) Bool
TaelinArena.Game.is_silenced                                       : ∀(:TaelinArena.Game.Thing) Bool
TaelinArena.Game.is_stunned                                        : ∀(:TaelinArena.Game.Thing) Bool
TaelinArena.Game.is_using_buff                                     : ∀(:TaelinArena.Game.Thing) ∀(:Bits) Bool
TaelinArena.Game.is_walking                                        : ∀(:TaelinArena.Game.Thing) F64
TaelinArena.Game.map_stage                                         : ∀(:∀(:TaelinArena.Game.Thing) TaelinArena.Game.Thing) ∀(:TaelinArena.Game.Game) TaelinArena.Game.Game
TaelinArena.Game.map_stt_key                                       : ∀(:TaelinArena.Game.Thing) ∀(:Bits) ∀(:∀(:F64) F64) TaelinArena.Game.Thing
TaelinArena.Game.move.fmc                                          : ∀(:TaelinArena.Game.Thing) ∀(:F64.V3) TaelinArena.Game.Thing
TaelinArena.Game.reset                                             : ∀(:TaelinArena.Game.Thing) ∀(:F64) TaelinArena.Game.Thing
TaelinArena.Game.set_stt_value_v3                                  : ∀(self:TaelinArena.Game.Thing) ∀(v3:F64.V3) TaelinArena.Game.Thing
TaelinArena.Game.set_thing_act                                     : ∀(thi:TaelinArena.Game.Thing) ∀(new_act:TaelinArena.Game.ActionId) TaelinArena.Game.Thing
TaelinArena.Game.set_thing_box                                     : ∀(thi:TaelinArena.Game.Thing) ∀(new_box:TaelinArena.Game.Hitbox) TaelinArena.Game.Thing
TaelinArena.Game.set_thing_bst                                     : ∀(thi:TaelinArena.Game.Thing) ∀(new_bst:F64) TaelinArena.Game.Thing
TaelinArena.Game.set_thing_buf                                     : ∀(thi:TaelinArena.Game.Thing) ∀(new_buf:(List TaelinArena.Game.Buff)) TaelinArena.Game.Thing
TaelinArena.Game.set_thing_chi                                     : ∀(thi:TaelinArena.Game.Thing) ∀(new_chi:(List TaelinArena.Game.Thing)) TaelinArena.Game.Thing
TaelinArena.Game.set_thing_die                                     : ∀(thi:TaelinArena.Game.Thing) ∀(new_die:Bool) TaelinArena.Game.Thing
TaelinArena.Game.set_thing_dir                                     : ∀(thi:TaelinArena.Game.Thing) ∀(new_dir:F64.V3) TaelinArena.Game.Thing
TaelinArena.Game.set_thing_dmg                                     : ∀(thi:TaelinArena.Game.Thing) ∀(new_dmg:F64) TaelinArena.Game.Thing
TaelinArena.Game.set_thing_fun                                     : ∀(thi:TaelinArena.Game.Thing) ∀(new_fun:TaelinArena.Game.TxFunction) TaelinArena.Game.Thing
TaelinArena.Game.set_thing_hit                                     : ∀(thi:TaelinArena.Game.Thing) ∀(new_hit:(List TaelinArena.Game.Hit)) TaelinArena.Game.Thing
TaelinArena.Game.set_thing_knk                                     : ∀(thi:TaelinArena.Game.Thing) ∀(new_knk:F64.V3) TaelinArena.Game.Thing
TaelinArena.Game.set_thing_lit                                     : ∀(thi:TaelinArena.Game.Thing) ∀(new_lit:(List TaelinArena.Game.Light)) TaelinArena.Game.Thing
TaelinArena.Game.set_thing_mhp                                     : ∀(thi:TaelinArena.Game.Thing) ∀(new_mhp:F64) TaelinArena.Game.Thing
TaelinArena.Game.set_thing_mid                                     : ∀(thi:TaelinArena.Game.Thing) ∀(new_mid:TaelinArena.Game.ModelId) TaelinArena.Game.Thing
TaelinArena.Game.set_thing_mov                                     : ∀(thi:TaelinArena.Game.Thing) ∀(new_mov:F64) TaelinArena.Game.Thing
TaelinArena.Game.set_thing_nam                                     : ∀(thi:TaelinArena.Game.Thing) ∀(new_nam:String) TaelinArena.Game.Thing
TaelinArena.Game.set_thing_pad                                     : ∀(thi:TaelinArena.Game.Thing) ∀(new_pad:F64.V3) TaelinArena.Game.Thing
TaelinArena.Game.set_thing_pid                                     : ∀(thi:TaelinArena.Game.Thing) ∀(new_pid:TaelinArena.Game.PlayerId) TaelinArena.Game.Thing
TaelinArena.Game.set_thing_pos                                     : ∀(thi:TaelinArena.Game.Thing) ∀(new_pos:F64.V3) TaelinArena.Game.Thing
TaelinArena.Game.set_thing_rst                                     : ∀(thi:TaelinArena.Game.Thing) ∀(new_rst:Bool) TaelinArena.Game.Thing
TaelinArena.Game.set_thing_sid                                     : ∀(thi:TaelinArena.Game.Thing) ∀(new_sid:TaelinArena.Game.SideId) TaelinArena.Game.Thing
TaelinArena.Game.set_thing_stt                                     : ∀(thi:TaelinArena.Game.Thing) ∀(new_stt:(Map F64)) TaelinArena.Game.Thing
TaelinArena.Game.set_thing_tik                                     : ∀(thi:TaelinArena.Game.Thing) ∀(new_tik:F64) TaelinArena.Game.Thing
TaelinArena.Game.set_thing_trg                                     : ∀(thi:TaelinArena.Game.Thing) ∀(new_trg:F64.V3) TaelinArena.Game.Thing
TaelinArena.Game.set_thing_vel                                     : ∀(thi:TaelinArena.Game.Thing) ∀(new_vel:F64.V3) TaelinArena.Game.Thing
TaelinArena.Game.set_thing_wei                                     : ∀(thi:TaelinArena.Game.Thing) ∀(new_wei:F64) TaelinArena.Game.Thing
TaelinArena.Game.spawn                                             : ∀(:TaelinArena.Game.Thing) ∀(:F64) ∀(:(List TaelinArena.Game.Thing)) TaelinArena.Game.Thing
TaelinArena.Game.speed_multiplier_of                               : ∀(:TaelinArena.Game.Thing) F64
TaelinArena.Game.targ_dir                                          : ∀(:TaelinArena.Game.Thing) F64.V3
TaelinArena.Game.update_buff                                       : ∀(:TaelinArena.Game.Thing) ∀(:Bits) TaelinArena.Game.Thing
TaelinArena.Game.update_buff_dur                                   : ∀(self:TaelinArena.Game.Thing) TaelinArena.Game.Thing
TaelinArena.Game.use_shields                                       : ∀(buff:TaelinArena.Game.Buff) ∀(acc:((Pair F64) (List TaelinArena.Game.Buff))) ((Pair F64) (List TaelinArena.Game.Buff))
TaelinArena.Game.with_thing.effect                                 : ∀(:TaelinArena.Game.PlayerId) ∀(:∀(:TaelinArena.Game.Thing) TaelinArena.Game.Thing) ∀(:TaelinArena.Game.Thing) TaelinArena.Game.Thing
TaelinArena.Game.with_thing                                        : ∀(:TaelinArena.Game.PlayerId) ∀(:∀(:TaelinArena.Game.Thing) TaelinArena.Game.Thing) ∀(:TaelinArena.Game.Game) TaelinArena.Game.Game
BENFIX_BLOCK_000                                                   : F64
BENFIX_DASH_000                                                    : F64
BENFIX_DASH_001                                                    : F64
BENFIX_DASH_002                                                    : F64
BENFIX_DASH_003                                                    : F64
BENFIX_DASH_004                                                    : F64
BENFIX_DASH_005                                                    : F64
BENFIX_DASH_006                                                    : F64
BENFIX_DASH_007                                                    : F64
BENFIX_DASH_008                                                    : F64
BENFIX_GIGA_DASH_000                                               : F64
BENFIX_GIGA_DASH_001                                               : F64
BENFIX_GIGA_DASH_002                                               : F64
BENFIX_GIGA_DASH_003                                               : F64
BENFIX_GIGA_DASH_004                                               : F64
BENFIX_GIGA_DASH_005                                               : F64
BENFIX_GIGA_DASH_006                                               : F64
BENFIX_GIGA_DASH_007                                               : F64
BENFIX_GIGA_DASH_008                                               : F64
BENFIX_GIGA_DASH_009                                               : F64
BENFIX_GIGA_DASH_010                                               : F64
BENFIX_GIGA_DASH_011                                               : F64
BENFIX_GIGA_DASH_012                                               : F64
BENFIX_GIGA_DASH_013                                               : F64
BENFIX_GIGA_DASH_014                                               : F64
BENFIX_GIGA_DASH_015                                               : F64
BENFIX_GIGA_DASH_016                                               : F64
BENFIX_GIGA_DASH_017                                               : F64
BENFIX_GIGA_DASH_018                                               : F64
BENFIX_GIGA_DASH_019                                               : F64
BENFIX_GIGA_DASH_020                                               : F64
BENFIX_GIGA_DASH_021                                               : F64
BENFIX_HURT_000                                                    : F64
BENFIX_IDLE_000                                                    : F64
BENFIX_IDLE_001                                                    : F64
BENFIX_IDLE_002                                                    : F64
BENFIX_IDLE_003                                                    : F64
BENFIX_IDLE_004                                                    : F64
BENFIX_IDLE_005                                                    : F64
BENFIX_IDLE_006                                                    : F64
BENFIX_IDLE_007                                                    : F64
BENFIX_IDLE_008                                                    : F64
BENFIX_IDLE_009                                                    : F64
BENFIX_IDLE_010                                                    : F64
BENFIX_IDLE_011                                                    : F64
BENFIX_SEISMIC_JUMP_CASTING_000                                    : F64
BENFIX_SEISMIC_JUMP_CASTING_001                                    : F64
BENFIX_SEISMIC_JUMP_000                                            : F64
BENFIX_SEISMIC_JUMP_001                                            : F64
BENFIX_SEISMIC_JUMP_002                                            : F64
BENFIX_SEISMIC_JUMP_003                                            : F64
BENFIX_SEISMIC_JUMP_004                                            : F64
BENFIX_SEISMIC_JUMP_005                                            : F64
BENFIX_SEISMIC_JUMP_006                                            : F64
BENFIX_SEISMIC_JUMP_007                                            : F64
BENFIX_SEISMIC_JUMP_008                                            : F64
BENFIX_SEISMIC_JUMP_009                                            : F64
BENFIX_STEEL_TORNADO_000                                           : F64
BENFIX_STEEL_TORNADO_001                                           : F64
BENFIX_STEEL_TORNADO_002                                           : F64
BENFIX_STEEL_TORNADO_003                                           : F64
BENFIX_TAUNT_000                                                   : F64
BENFIX_TAUNT_001                                                   : F64
BENFIX_TAUNT_002                                                   : F64
BENFIX_TAUNT_003                                                   : F64
BENFIX_TAUNT_004                                                   : F64
BENFIX_TAUNT_005                                                   : F64
BENFIX_TAUNT_006                                                   : F64
BENFIX_TAUNT_007                                                   : F64
BENFIX_TAUNT_008                                                   : F64
BENFIX_TAUNT_009                                                   : F64
BENFIX_TAUNT_010                                                   : F64
BENFIX_TAUNT_011                                                   : F64
BENFIX_TAUNT_012                                                   : F64
BENFIX_TAUNT_013                                                   : F64
BENFIX_TAUNT_014                                                   : F64
BENFIX_TAUNT_015                                                   : F64
BENFIX_TRIPLE_ATTACK_1_000                                         : F64
BENFIX_TRIPLE_ATTACK_1_001                                         : F64
BENFIX_TRIPLE_ATTACK_1_002                                         : F64
BENFIX_TRIPLE_ATTACK_1_003                                         : F64
BENFIX_TRIPLE_ATTACK_1_004                                         : F64
BENFIX_TRIPLE_ATTACK_1_005                                         : F64
BENFIX_TRIPLE_ATTACK_1_006                                         : F64
BENFIX_TRIPLE_ATTACK_1_007                                         : F64
BENFIX_TRIPLE_ATTACK_1_008                                         : F64
BENFIX_TRIPLE_ATTACK_1_009                                         : F64
BENFIX_TRIPLE_ATTACK_1_010                                         : F64
BENFIX_TRIPLE_ATTACK_1_011                                         : F64
BENFIX_TRIPLE_ATTACK_1_012                                         : F64
BENFIX_TRIPLE_ATTACK_1_013                                         : F64
BENFIX_TRIPLE_ATTACK_1_014                                         : F64
BENFIX_TRIPLE_ATTACK_1_015                                         : F64
BENFIX_TRIPLE_ATTACK_2_000                                         : F64
BENFIX_TRIPLE_ATTACK_2_001                                         : F64
BENFIX_TRIPLE_ATTACK_2_002                                         : F64
BENFIX_TRIPLE_ATTACK_2_003                                         : F64
BENFIX_TRIPLE_ATTACK_2_004                                         : F64
BENFIX_TRIPLE_ATTACK_2_005                                         : F64
BENFIX_TRIPLE_ATTACK_2_006                                         : F64
BENFIX_TRIPLE_ATTACK_2_007                                         : F64
BENFIX_TRIPLE_ATTACK_2_008                                         : F64
BENFIX_TRIPLE_ATTACK_2_009                                         : F64
BENFIX_TRIPLE_ATTACK_2_010                                         : F64
BENFIX_WALK_000                                                    : F64
BENFIX_WALK_001                                                    : F64
BENFIX_WALK_002                                                    : F64
BENFIX_WALK_003                                                    : F64
BENFIX_WALK_004                                                    : F64
BENFIX_WALK_005                                                    : F64
BENFIX_WALK_006                                                    : F64
BLESKAPE_BASE_ATTACK_1_000                                         : F64
BLESKAPE_BASE_ATTACK_1_001                                         : F64
BLESKAPE_BASE_ATTACK_1_002                                         : F64
BLESKAPE_BASE_ATTACK_1_003                                         : F64
BLESKAPE_BASE_ATTACK_1_004                                         : F64
BLESKAPE_BASE_ATTACK_1_005                                         : F64
BLESKAPE_BASE_ATTACK_2_000                                         : F64
BLESKAPE_BASE_ATTACK_2_001                                         : F64
BLESKAPE_BASE_ATTACK_2_002                                         : F64
BLESKAPE_BASE_ATTACK_2_003                                         : F64
BLESKAPE_BASE_ATTACK_2_004                                         : F64
BLESKAPE_BASE_ATTACK_2_005                                         : F64
BLESKAPE_BASE_ATTACK_2_006                                         : F64
BLESKAPE_DASH_000                                                  : F64
BLESKAPE_DASH_001                                                  : F64
BLESKAPE_DASH_002                                                  : F64
BLESKAPE_DASH_003                                                  : F64
BLESKAPE_DASH_004                                                  : F64
BLESKAPE_DASH_005                                                  : F64
BLESKAPE_DASH_006                                                  : F64
BLESKAPE_DASH_007                                                  : F64
BLESKAPE_DASH_008                                                  : F64
BLESKAPE_DASH_009                                                  : F64
BLESKAPE_DASH_010                                                  : F64
BLESKAPE_DASH_011                                                  : F64
BLESKAPE_DASH_012                                                  : F64
BLESKAPE_DASH_013                                                  : F64
BLESKAPE_DASH_014                                                  : F64
BLESKAPE_DEFENSE_MODE_000                                          : F64
BLESKAPE_DEFENSE_MODE_001                                          : F64
BLESKAPE_DEFENSE_MODE_002                                          : F64
BLESKAPE_HURT_000                                                  : F64
BLESKAPE_IDLE_000                                                  : F64
BLESKAPE_IDLE_001                                                  : F64
BLESKAPE_IDLE_002                                                  : F64
BLESKAPE_IDLE_003                                                  : F64
BLESKAPE_SHOCK_BALL_000                                            : F64
BLESKAPE_SHOCK_BALL_001                                            : F64
BLESKAPE_SHOCK_BALL_002                                            : F64
BLESKAPE_SHOCK_BALL_003                                            : F64
BLESKAPE_SHOCK_BALL_004                                            : F64
BLESKAPE_SHOCK_BALL_005                                            : F64
BLESKAPE_SHOCK_BALL_006                                            : F64
BLESKAPE_SHOCK_BALL_007                                            : F64
BLESKAPE_SHOCK_BALL_008                                            : F64
BLESKAPE_SHOCK_BALL_009                                            : F64
BLESKAPE_SHOCK_BALL_010                                            : F64
BLESKAPE_SHOCK_BALL_011                                            : F64
BLESKAPE_SHOCK_BALL_012                                            : F64
BLESKAPE_SHOCK_BALL_013                                            : F64
BLESKAPE_SHOCK_BALL_014                                            : F64
BLESKAPE_SHOCK_GROUND_WAVE_000                                     : F64
BLESKAPE_SHOCK_GROUND_WAVE_001                                     : F64
BLESKAPE_SHOCK_GROUND_WAVE_002                                     : F64
BLESKAPE_SHOCK_GROUND_WAVE_003                                     : F64
BLESKAPE_SHOCK_GROUND_WAVE_004                                     : F64
BLESKAPE_SHOCK_GROUND_WAVE_005                                     : F64
BLESKAPE_SHOCK_GROUND_WAVE_006                                     : F64
BLESKAPE_SHOCK_GROUND_WAVE_007                                     : F64
BLESKAPE_SHOCK_GROUND_WAVE_008                                     : F64
BLESKAPE_SHOCK_GROUND_WAVE_009                                     : F64
BLESKAPE_SHOCK_GROUND_WAVE_010                                     : F64
BLESKAPE_SHOCK_GROUND_WAVE_011                                     : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_000                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_001                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_002                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_003                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_004                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_005                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_006                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_007                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_008                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_009                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_010                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_011                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_012                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_013                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_014                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_015                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_016                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_017                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_018                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_019                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_020                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_021                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_022                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_023                                : F64
BLESKAPE_SUPREME_PUNCH_SEQUENCE_024                                : F64
BLESKAPE_TAUNT_000                                                 : F64
BLESKAPE_TAUNT_001                                                 : F64
BLESKAPE_TAUNT_002                                                 : F64
BLESKAPE_TAUNT_003                                                 : F64
BLESKAPE_TAUNT_004                                                 : F64
BLESKAPE_TAUNT_005                                                 : F64
BLESKAPE_TAUNT_006                                                 : F64
BLESKAPE_TAUNT_007                                                 : F64
BLESKAPE_TAUNT_008                                                 : F64
BLESKAPE_TAUNT_009                                                 : F64
BLESKAPE_WALK_000                                                  : F64
BLESKAPE_WALK_001                                                  : F64
BLESKAPE_WALK_002                                                  : F64
BLESKAPE_WALK_003                                                  : F64
DARTH_VADER_HURT_WITHOUT_SABER_000                                 : F64
DARTH_VADER_HURT_000                                               : F64
DARTH_VADER_IDLE_WITHOUT_SABER_000                                 : F64
DARTH_VADER_IDLE_WITHOUT_SABER_001                                 : F64
DARTH_VADER_IDLE_WITHOUT_SABER_002                                 : F64
DARTH_VADER_IDLE_WITHOUT_SABER_003                                 : F64
DARTH_VADER_IDLE_WITHOUT_SABER_004                                 : F64
DARTH_VADER_IDLE_000                                               : F64
DARTH_VADER_IDLE_001                                               : F64
DARTH_VADER_IDLE_002                                               : F64
DARTH_VADER_IDLE_003                                               : F64
DARTH_VADER_IDLE_004                                               : F64
DARTH_VADER_ROGUE_ONE_000                                          : F64
DARTH_VADER_ROGUE_ONE_001                                          : F64
DARTH_VADER_ROGUE_ONE_002                                          : F64
DARTH_VADER_ROGUE_ONE_003                                          : F64
DARTH_VADER_ROGUE_ONE_004                                          : F64
DARTH_VADER_ROGUE_ONE_005                                          : F64
DARTH_VADER_ROGUE_ONE_006                                          : F64
DARTH_VADER_ROGUE_ONE_007                                          : F64
DARTH_VADER_ROGUE_ONE_008                                          : F64
DARTH_VADER_ROGUE_ONE_009                                          : F64
DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_000             : F64
DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_001             : F64
DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_002             : F64
DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_003             : F64
DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_004             : F64
DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_005             : F64
DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_006             : F64
DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_007             : F64
DARTH_VADER_THE_EMPIRE_STRICKES_BACK_000                           : F64
DARTH_VADER_THE_EMPIRE_STRICKES_BACK_001                           : F64
DARTH_VADER_THE_EMPIRE_STRICKES_BACK_002                           : F64
DARTH_VADER_THE_EMPIRE_STRICKES_BACK_003                           : F64
DARTH_VADER_THE_EMPIRE_STRICKES_BACK_004                           : F64
DARTH_VADER_THE_EMPIRE_STRICKES_BACK_005                           : F64
DARTH_VADER_THE_EMPIRE_STRICKES_BACK_006                           : F64
DARTH_VADER_THE_EMPIRE_STRICKES_BACK_007                           : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_000                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_001                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_002                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_003                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_004                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_005                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_006                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_007                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_000                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_001                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_002                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_003                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_004                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_005                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_006                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_007                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_000                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_001                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_002                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_003                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_004                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_005                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_006                            : F64
DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_007                            : F64
DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_000                  : F64
DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_001                  : F64
DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_002                  : F64
DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_003                  : F64
DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_004                  : F64
DARTH_VADER_THE_PHANTOM_MENACE_RETURN_000                          : F64
DARTH_VADER_THE_PHANTOM_MENACE_RETURN_001                          : F64
DARTH_VADER_THE_PHANTOM_MENACE_RETURN_002                          : F64
DARTH_VADER_THE_PHANTOM_MENACE_RETURN_003                          : F64
DARTH_VADER_THE_PHANTOM_MENACE_RETURN_004                          : F64
DARTH_VADER_THE_PHANTOM_MENACE_RETURN_005                          : F64
DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_000                  : F64
DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_001                  : F64
DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_002                  : F64
DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_003                  : F64
DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_004                  : F64
DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_WITHOUT_SABER_000 : F64
DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_WITHOUT_SABER_001 : F64
DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_WITHOUT_SABER_002 : F64
DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_000               : F64
DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_001               : F64
DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_002               : F64
DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_000             : F64
DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_001             : F64
DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_002             : F64
DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_003             : F64
DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_000                           : F64
DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_001                           : F64
DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_002                           : F64
DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_003                           : F64
DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_004                           : F64
DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_005                           : F64
DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_006                           : F64
DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_007                           : F64
DARTH_VADER_WALK_CYCLE_000                                         : F64
DARTH_VADER_WALK_CYCLE_001                                         : F64
DARTH_VADER_WALK_CYCLE_002                                         : F64
DARTH_VADER_WALK_CYCLE_003                                         : F64
DARTH_VADER_WALK_CYCLE_004                                         : F64
DARTH_VADER_WALK_CYCLE_005                                         : F64
DARTH_VADER_WALK_CYCLE_006                                         : F64
DARTH_VADER_WALK_CYCLE_007                                         : F64
DORIME_BLESS_CASTANIMATION_000                                     : F64
DORIME_BLESS_CASTANIMATION_001                                     : F64
DORIME_BLESS_CASTANIMATION_002                                     : F64
DORIME_BLESS_CASTANIMATION_003                                     : F64
DORIME_BLESS_CASTANIMATION_004                                     : F64
DORIME_BLESS_CASTANIMATION_005                                     : F64
DORIME_BLESS_HALO_000                                              : F64
DORIME_BLESSING_FOR_WHO_DESERVE_PROJECTILE_000                     : F64
DORIME_BLESSING_FOR_WHO_DESERVE_000                                : F64
DORIME_BLESSING_FOR_WHO_DESERVE_001                                : F64
DORIME_BLESSING_FOR_WHO_DESERVE_002                                : F64
DORIME_BLESSING_FOR_WHO_DESERVE_003                                : F64
DORIME_BLESSING_FOR_WHO_DESERVE_004                                : F64
DORIME_BLESSING_FOR_WHO_DESERVE_005                                : F64
DORIME_BLESSING_FOR_WHO_DESERVE_006                                : F64
DORIME_BLESSING_FOR_WHO_DESERVE_007                                : F64
DORIME_BLESSING_FOR_WHO_DESERVE_008                                : F64
DORIME_BLESSING_FOR_WHO_DESERVE_009                                : F64
DORIME_BLESSING_FOR_WHO_DESERVE_010                                : F64
DORIME_BLESSING_FOR_WHO_DESERVE_011                                : F64
DORIME_BLESSING_FOR_WHO_DESERVE_012                                : F64
DORIME_BLESSING_FOR_WHO_DESERVE_013                                : F64
DORIME_GODS_CHAMBER_CAST_ANIMATION_000                             : F64
DORIME_GODS_CHAMBER_CAST_ANIMATION_001                             : F64
DORIME_GODS_CHAMBER_CAST_ANIMATION_002                             : F64
DORIME_GODS_CHAMBER_CAST_ANIMATION_003                             : F64
DORIME_GODS_CHAMBER_CAST_ANIMATION_004                             : F64
DORIME_GODS_CHAMBER_CAST_ANIMATION_005                             : F64
DORIME_GODS_CHAMBER_CAST_ANIMATION_006                             : F64
DORIME_GODS_CHAMBER_CAST_ANIMATION_007                             : F64
DORIME_GODS_CHAMBER_CAST_ANIMATION_008                             : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_000                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_001                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_002                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_003                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_004                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_005                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_006                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_007                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_008                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_009                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_010                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_011                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_012                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_013                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_014                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_015                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_016                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_017                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_018                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_019                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_020                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_021                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_022                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_023                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_024                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_025                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_026                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_027                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_028                           : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_000                                : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_001                                : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_002                                : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_003                                : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_004                                : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_005                                : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_006                                : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_007                                : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_008                                : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_009                                : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_010                                : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_011                                : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_012                                : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_013                                : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_014                                : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_015                                : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_016                                : F64
DORIME_GODS_CHAMBER_HEAL_CIRCLE_017                                : F64
DORIME_HOLY_FLAME_CAST_ANIMATION_000                               : F64
DORIME_HOLY_FLAME_CAST_ANIMATION_001                               : F64
DORIME_HOLY_FLAME_CAST_ANIMATION_002                               : F64
DORIME_HOLY_FLAME_CAST_ANIMATION_003                               : F64
DORIME_HOLY_FLAME_CAST_ANIMATION_004                               : F64
DORIME_HOLY_FLAME_CAST_ANIMATION_005                               : F64
DORIME_HOLY_FLAME_CAST_ANIMATION_006                               : F64
DORIME_HOLY_FLAME_CAST_ANIMATION_007                               : F64
DORIME_HOLY_FLAME_PILLAR_000                                       : F64
DORIME_HOLY_FLAME_PILLAR_001                                       : F64
DORIME_HOLY_FLAME_PILLAR_002                                       : F64
DORIME_HOLY_FLAME_PILLAR_003                                       : F64
DORIME_HOLY_FLAME_PILLAR_004                                       : F64
DORIME_HURT_000                                                    : F64
DORIME_IDLE_000                                                    : F64
DORIME_IDLE_001                                                    : F64
DORIME_IDLE_002                                                    : F64
DORIME_IDLE_003                                                    : F64
DORIME_IDLE_004                                                    : F64
DORIME_JESUS_POWER_000                                             : F64
DORIME_JESUS_POWER_001                                             : F64
DORIME_JESUS_POWER_002                                             : F64
DORIME_JESUS_POWER_003                                             : F64
DORIME_JESUS_POWER_004                                             : F64
DORIME_JESUS_POWER_005                                             : F64
DORIME_JESUS_POWER_006                                             : F64
DORIME_JESUS_POWER_007                                             : F64
DORIME_JESUS_POWER_008                                             : F64
DORIME_JESUS_POWER_009                                             : F64
DORIME_JESUS_POWER_010                                             : F64
DORIME_JESUS_POWER_011                                             : F64
DORIME_JESUS_POWER_012                                             : F64
DORIME_JESUS_POWER_013                                             : F64
DORIME_JESUS_POWER_014                                             : F64
DORIME_JESUS_POWER_015                                             : F64
DORIME_JESUS_POWER_016                                             : F64
DORIME_JESUS_POWER_017                                             : F64
DORIME_JESUS_POWER_018                                             : F64
DORIME_JESUS_POWER_019                                             : F64
DORIME_JESUS_POWER_020                                             : F64
DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_000                       : F64
DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_001                       : F64
DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_002                       : F64
DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_003                       : F64
DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_004                       : F64
DORIME_LEPTOSPIROSE_CURSE_POT_000                                  : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_000                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_001                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_002                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_003                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_004                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_005                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_006                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_007                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_008                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_009                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_010                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_011                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_012                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_013                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_014                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_015                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_016                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_017                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_018                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_019                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_020                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_021                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_022                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_023                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_024                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_025                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_026                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_027                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_028                          : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_000                               : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_001                               : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_002                               : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_003                               : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_004                               : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_005                               : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_006                               : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_007                               : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_008                               : F64
DORIME_LEPTOSPIROSE_CURSE_PUDDLE_009                               : F64
DORIME_POSED_BACKUP                                                : F64
DORIME_TAUNT_IDLE_000                                              : F64
DORIME_TAUNT_IDLE_001                                              : F64
DORIME_TAUNT_IDLE_002                                              : F64
DORIME_TAUNT_000                                                   : F64
DORIME_TAUNT_001                                                   : F64
DORIME_TAUNT_002                                                   : F64
DORIME_WALK_CYCLE_000                                              : F64
DORIME_WALK_CYCLE_001                                              : F64
DORIME_WALK_CYCLE_002                                              : F64
DORIME_WALK_CYCLE_003                                              : F64
DORIME_WALK_CYCLE_004                                              : F64
DORIME_WALK_CYCLE_005                                              : F64
DORIME_WALK_CYCLE_006                                              : F64
DORIME_WALK_CYCLE_007                                              : F64
POSTE_IDLE_000                                                     : F64
PUNCHINGBAG_IDLE_000                                               : F64
PUNCHINGBAG_IDLE_001                                               : F64
PUNCHINGBAG_IDLE_002                                               : F64
PUNCHINGBAG_IDLE_003                                               : F64
PUNCHINGBAG_IDLE_004                                               : F64
PUNCHINGBAG_IDLE_005                                               : F64
PUNCHINGBAG_IDLE_006                                               : F64
PUNCHINGBAG_IDLE_007                                               : F64
PUNCHINGBAG_IDLE_008                                               : F64
PUNCHINGBAG_IDLE_009                                               : F64
PUNCHINGBAG_IDLE_010                                               : F64
PUNCHINGBAG_IDLE_011                                               : F64
PUNCHINGBAG_IDLE_012                                               : F64
PUNCHINGBAG_IDLE_013                                               : F64
PUNCHINGBAG_IDLE_014                                               : F64
PUNCHINGBAG_IDLE_015                                               : F64
PUNCHINGBAG_IDLE_016                                               : F64
PUNCHINGBAG_IDLE_017                                               : F64
PUNCHINGBAG_IDLE_018                                               : F64
PUNCHINGBAG_IDLE_019                                               : F64
PUNCHINGBAG_IDLE_020                                               : F64
PUNCHINGBAG_IDLE_021                                               : F64
PUNCHINGBAG_IDLE_022                                               : F64
PUNCHINGBAG_IDLE_023                                               : F64
WALL_IDLE_000                                                      : F64
TaelinArena.Thing.bleskape_fun                                     : ∀(self:TaelinArena.Game.Thing) TaelinArena.Game.Thing
TaelinArena.Thing.poste_fun                                        : ∀(:TaelinArena.Game.Thing) TaelinArena.Game.Thing
TaelinArena.Thing.puddledmg_fun                                    : ∀(:TaelinArena.Game.Thing) TaelinArena.Game.Thing
TaelinArena.Thing.puddleheal_fun                                   : ∀(:TaelinArena.Game.Thing) TaelinArena.Game.Thing
TaelinArena.Thing.punchingbag_fun                                  : ∀(:TaelinArena.Game.Thing) TaelinArena.Game.Thing
TaelinArena.Thing.wall_fun                                         : ∀(:TaelinArena.Game.Thing) TaelinArena.Game.Thing
TaelinArena.collide_with                                           : ∀(a_pos:F64.V3) ∀(a_dir:F64.V3) ∀(a_box:TaelinArena.Game.Hitbox) ∀(b_pos:F64.V3) ∀(b_dir:F64.V3) ∀(b_box:TaelinArena.Game.Hitbox) (Maybe F64.V3)
TaelinArena.exec_command                                           : ∀(:TaelinArena.Game.Command) ∀(:TaelinArena.Game.Game) TaelinArena.Game.Game
TaelinArena.exec_turn                                              : ∀(:TaelinArena.Game.Game) TaelinArena.Game.Game
TaelinArena.fold_with_context                                      : Π(A:*) Π(B:*) ∀(i:B) ∀(f:∀(:A) ∀(:(List A)) ∀(:B) B) ∀(xs:(List A)) ∀(ys:∀(:(List A)) (List A)) B
TaelinArena.interact_with                                          : ∀(this:TaelinArena.Game.Thing) ∀(that:TaelinArena.Game.Thing) TaelinArena.Game.Thing
Text                                                               : *
The                                                                : ∀(A:*) ∀(x:A) *
The.term                                                           : Π(A:*) ∀(x:A) ((The A) x)
U16.add                                                            : ∀(:U16) ∀(:U16) U16
U16.and                                                            : ∀(:U16) ∀(:U16) U16
U16.div                                                            : ∀(:U16) ∀(:U16) U16
U16.eql                                                            : ∀(:U16) ∀(:U16) Bool
U16                                                                : *
U16.gte                                                            : ∀(:U16) ∀(:U16) Bool
U16.gtn                                                            : ∀(:U16) ∀(:U16) Bool
U16.inc                                                            : ∀(:U16) U16
U16.lte                                                            : ∀(:U16) ∀(:U16) Bool
U16.ltn                                                            : ∀(:U16) ∀(:U16) Bool
U16.mod                                                            : ∀(:U16) ∀(:U16) U16
U16.mul                                                            : ∀(:U16) ∀(:U16) U16
U16.new                                                            : ∀(:(Word Nat.16)) U16
U16.or                                                             : ∀(:U16) ∀(:U16) U16
U16.parse_hex                                                      : ∀(:String) U16
U16.pow                                                            : ∀(:U16) ∀(:U16) U16
U16.shl                                                            : ∀(:Nat) ∀(:U16) U16
U16.shr                                                            : ∀(:Nat) ∀(:U16) U16
U16.sub                                                            : ∀(:U16) ∀(:U16) U16
U16.to_bits                                                        : ∀(:U16) Bits
U16.to_nat                                                         : ∀(:U16) Nat
U16.xor                                                            : ∀(:U16) ∀(:U16) U16
U32.0                                                              : U32
U32.add                                                            : ∀(:U32) ∀(:U32) U32
U32.and                                                            : ∀(:U32) ∀(:U32) U32
U32.concat                                                         : ∀(:U32) ∀(:U32) U64
U32.div                                                            : ∀(:U32) ∀(:U32) U32
U32.eql                                                            : ∀(:U32) ∀(:U32) Bool
U32                                                                : *
U32.gte                                                            : ∀(:U32) ∀(:U32) Bool
U32.gtn                                                            : ∀(:U32) ∀(:U32) Bool
U32.hash2                                                          : ∀(:U32) ∀(:U32) U32
U32.inc                                                            : ∀(:U32) U32
U32.lte                                                            : ∀(:U32) ∀(:U32) Bool
U32.ltn                                                            : ∀(:U32) ∀(:U32) Bool
U32.mod                                                            : ∀(:U32) ∀(:U32) U32
U32.mul                                                            : ∀(:U32) ∀(:U32) U32
U32.new                                                            : ∀(:(Word Nat.32)) U32
U32.or                                                             : ∀(:U32) ∀(:U32) U32
U32.parse_hex                                                      : ∀(:String) U32
U32.pow                                                            : ∀(:U32) ∀(:U32) U32
U32.shl                                                            : ∀(:Nat) ∀(:U32) U32
U32.shr                                                            : ∀(:Nat) ∀(:U32) U32
U32.sub                                                            : ∀(:U32) ∀(:U32) U32
U32.to_bits                                                        : ∀(:U32) Bits
U32.to_nat                                                         : ∀(:U32) Nat
U32.xor                                                            : ∀(:U32) ∀(:U32) U32
U64.0                                                              : U64
U64.add                                                            : ∀(:U64) ∀(:U64) U64
U64.and                                                            : ∀(:U64) ∀(:U64) U64
U64.div                                                            : ∀(:U64) ∀(:U64) U64
U64.eql                                                            : ∀(:U64) ∀(:U64) Bool
U64                                                                : *
U64.gte                                                            : ∀(:U64) ∀(:U64) Bool
U64.gtn                                                            : ∀(:U64) ∀(:U64) Bool
U64.inc                                                            : ∀(:U64) U64
U64.lte                                                            : ∀(:U64) ∀(:U64) Bool
U64.ltn                                                            : ∀(:U64) ∀(:U64) Bool
U64.mix.const0                                                     : U64
U64.mix.const1                                                     : U64
U64.mix                                                            : ∀(:U64) U64
U64.mod                                                            : ∀(:U64) ∀(:U64) U64
U64.mul                                                            : ∀(:U64) ∀(:U64) U64
U64.new                                                            : ∀(:(Word Nat.64)) U64
U64.or                                                             : ∀(:U64) ∀(:U64) U64
U64.parse_hex                                                      : ∀(:String) U64
U64.pow                                                            : ∀(:U64) ∀(:U64) U64
U64.shl                                                            : ∀(:Nat) ∀(:U64) U64
U64.shr                                                            : ∀(:Nat) ∀(:U64) U64
U64.sub                                                            : ∀(:U64) ∀(:U64) U64
U64.to_bits                                                        : ∀(:U64) Bits
U64.to_nat                                                         : ∀(:U64) Nat
U64.xor                                                            : ∀(:U64) ∀(:U64) U64
UFind.new                                                          : UFind
UFind.equivalent                                                   : ∀(:UFind) ∀(:Bits) ∀(:Bits) Bool
UFind.find                                                         : Π(B:*) ∀(:UFind) ∀(:Bits) ∀(:∀(:UFind) ∀(:Bits) ∀(:Nat) B) B
UFind                                                              : *
UFind.new_node                                                     : ∀(:UFind) ∀(:Bits) UFind
UFind.union                                                        : ∀(:UFind) ∀(:Bits) ∀(:Bits) UFind
UNode                                                              : *
UNode.link                                                         : ∀(:Bits) UNode
UNode.root                                                         : ∀(:Nat) UNode
Unit                                                               : *
Unit.new                                                           : Unit
Unit.show                                                          : ∀(:Unit) String
Word.0                                                             : Π(size:Nat) ∀(:(Word size)) (Word (Nat.succ size))
Word.1                                                             : Π(size:Nat) ∀(:(Word size)) (Word (Nat.succ size))
Word.add.aux                                                       : Π(size:Nat) ∀(:(Word size)) ∀(:(Word size)) ∀(:Bool) (Word size)
Word.add                                                           : Π(size:Nat) ∀(:(Word size)) ∀(:(Word size)) (Word size)
Word.and                                                           : Π(size:Nat) ∀(:(Word size)) ∀(:(Word size)) (Word size)
Word.cmp.aux                                                       : Π(size:Nat) ∀(:(Word size)) ∀(:(Word size)) ∀(:Cmp) Cmp
Word.cmp                                                           : Π(size:Nat) ∀(:(Word size)) ∀(:(Word size)) Cmp
Word.concat                                                        : Π(a_size:Nat) Π(b_size:Nat) ∀(:(Word a_size)) ∀(:(Word b_size)) (Word ((Nat.add a_size) b_size))
Word.div                                                           : Π(size:Nat) ∀(:(Word size)) ∀(:(Word size)) (Word size)
Word.drop                                                          : Π(size:Nat) ∀(n:Nat) ∀(:(Word ((Nat.add n) size))) (Word size)
Word.eql                                                           : Π(size:Nat) ∀(:(Word size)) ∀(:(Word size)) Bool
Word                                                               : ∀(:Nat) *
Word.from_bits                                                     : ∀(size:Nat) ∀(:Bits) (Word size)
Word.gte                                                           : Π(size:Nat) ∀(:(Word size)) ∀(:(Word size)) Bool
Word.gtn                                                           : Π(size:Nat) ∀(:(Word size)) ∀(:(Word size)) Bool
Word.inc                                                           : Π(size:Nat) ∀(:(Word size)) (Word size)
Word.lte                                                           : Π(size:Nat) ∀(:(Word size)) ∀(:(Word size)) Bool
Word.ltn                                                           : Π(size:Nat) ∀(:(Word size)) ∀(:(Word size)) Bool
Word.mod                                                           : Π(size:Nat) ∀(:(Word size)) ∀(:(Word size)) (Word size)
Word.mul                                                           : Π(size:Nat) ∀(:(Word size)) ∀(:(Word size)) (Word size)
Word.nil                                                           : (Word Nat.zero)
Word.or                                                            : Π(size:Nat) ∀(:(Word size)) ∀(:(Word size)) (Word size)
Word.parse_hex                                                     : ∀(size:Nat) ∀(:String) (Word size)
Word.pow                                                           : Π(size:Nat) ∀(:(Word size)) ∀(:(Word size)) (Word size)
Word.pred                                                          : Π(size:Nat) ∀(:(Word (Nat.succ size))) (Word size)
Word.shift_left                                                    : Π(size:Nat) ∀(:Nat) ∀(:(Word size)) (Word size)
Word.shift_right                                                   : Π(size:Nat) ∀(:Nat) ∀(:(Word size)) (Word size)
Word.sub                                                           : Π(size:Nat) ∀(:(Word size)) ∀(:(Word size)) (Word size)
Word.to_bits                                                       : Π(size:Nat) ∀(:(Word size)) Bits
Word.to_nat                                                        : Π(size:Nat) ∀(:(Word size)) Nat
Word.to_nat.go                                                     : Π(size:Nat) ∀(:(Word size)) ∀(:Nat) Nat
Word.xor                                                           : Π(size:Nat) ∀(:(Word size)) ∀(:(Word size)) (Word size)
hello                                                              : (IO Unit)

All terms check.
➜  Moonad git:(183-TaelinArena) ✗ npm i -g formality-core@0.2.84
npm ERR! code ETARGET
npm ERR! notarget No matching version found for formality-core@0.2.84.
npm ERR! notarget In most cases you or one of your dependencies are requesting
npm ERR! notarget a package version that doesn't exist.

npm ERR! A complete log of this run can be found in:
npm ERR!     /Users/maisa/.npm/_logs/2020-05-11T20_10_59_075Z-debug.log
➜  Moonad git:(183-TaelinArena) ✗ clear                         

➜  Moonad git:(183-TaelinArena) ✗ fmcjs Exports.TaelinArena.fm 
{
  'Bit.0': {
    type: { ctor: 'Ref', name: 'Bit' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Bit.1': {
    type: { ctor: 'Ref', name: 'Bit' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  Bit: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'bit',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Bits.0': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'bs',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bs', body: [Function] }
  },
  'Bits.1': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'bs',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bs', body: [Function] }
  },
  'Bits.concat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bits.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bs1', body: [Function] }
  },
  Bits: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'bits',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Bits.from_string': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Bits.inc': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bits', body: [Function] }
  },
  'Bits.nil': {
    type: { ctor: 'Ref', name: 'Bits' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Bits.parse_hex': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Bits.parse_hex.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Bits.reverse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'as', body: [Function] }
  },
  'Bits.reverse.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'as', body: [Function] }
  },
  'Bool.and': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.elim': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'b',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'b', body: [Function] }
  },
  'Bool.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.false': {
    type: { ctor: 'Ref', name: 'Bool' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Bool.false_isnt_true': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'P', expr: [Object], body: [Function] }
  },
  Bool: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'bool',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Bool.if': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Bool.not': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.notf': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.or': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.test.different_elem': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'a',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.true': {
    type: { ctor: 'Ref', name: 'Bool' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Bool.true_isnt_false': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Lam', eras: false, name: 'e', body: [Function] }
  },
  Char: { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'U16' } },
  'Char.hex_value': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'chr', body: [Function] }
  },
  'Char.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'b0', body: [Function] }
  },
  'Char.newline': {
    type: { ctor: 'Ref', name: 'Char' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Char.parse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'str',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Char.parse.type': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Char.quote': {
    type: { ctor: 'Ref', name: 'Char' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Char.tab': {
    type: { ctor: 'Ref', name: 'Char' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Cmp.eql': {
    type: { ctor: 'Ref', name: 'Cmp' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  Cmp: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'cmp',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Cmp.gtn': {
    type: { ctor: 'Ref', name: 'Cmp' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Cmp.ltn': {
    type: { ctor: 'Ref', name: 'Cmp' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Comp.app': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'func', body: [Function] }
  },
  'Comp.fal': {
    type: { ctor: 'Ref', name: 'Comp' },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  Comp: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'comp',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Comp.lam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Comp.let': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Comp.stringify': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'comp', body: [Function] }
  },
  'Comp.tru': {
    type: { ctor: 'Ref', name: 'Comp' },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Comp.var': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  Concat: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Concat.push': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Concat.to_list': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Bind': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    }
  },
  'Core.Comp.check': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.Comp.infer': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.Ctx.ext': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Core.Ctx': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Ctx.nil': {
    type: { ctor: 'Ref', name: 'Core.Ctx' },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Core.Def': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Defs': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Defs.get': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Defs.get_term': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Defs.get_type': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Defs.new': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Core.Defs.set': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Core.Defs.term': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Defs.type': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Read.Reply': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Core.Read.all': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.ann': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'expr', body: [Function] }
  },
  'Core.Read.app': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'func', body: [Function] }
  },
  'Core.Read.arr': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bind', body: [Function] }
  },
  'Core.Read.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Read.def': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.defs': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.defs.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Read.done': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Read.fail': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Read.first_of': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Read': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Core.Read.fst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'txts', body: [Function] }
  },
  'Core.Read.is_name': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'chr', body: [Function] }
  },
  'Core.Read.is_name.set': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.is_space': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'chr', body: [Function] }
  },
  'Core.Read.lam': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.let': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.nam': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Lam', eras: false, name: 'code', body: [Function] }
  },
  'Core.Read.next': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Core.Read.one': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'chr0', body: [Function] }
  },
  'Core.Read.opt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Core.Read.par': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.pip': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'func', body: [Function] }
  },
  'Core.Read.seek': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Read.trm.base': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'nil', expr: [Object], body: [Function] }
  },
  'Core.Read.trm': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.trm.post': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'base', body: [Function] }
  },
  'Core.Read.txt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Core.Read.typ': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.var': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.wrd': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.all.Tuple': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Core.all': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'eras', body: [Function] }
  },
  'Core.ann': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'done', body: [Function] }
  },
  'Core.app': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'eras', body: [Function] }
  },
  'Core.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Core.eql.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  Core: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'core',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Core.if_all': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.is_all': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.is_lam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.lam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'eras', body: [Function] }
  },
  'Core.let': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Core.normalize': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.parse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'code', body: [Function] }
  },
  'Core.parse_defs': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'code', body: [Function] }
  },
  'Core.reduce': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.ref': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Core.stringify': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.stringify.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.to_bits.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.to_uid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.typ': {
    type: { ctor: 'Ref', name: 'Core' },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Core.typecheck': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.typecomp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.typeinfer': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.var': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Debug.log': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Either.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Either: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Either.left': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Either.right': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Empty.absurd': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'x',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  Empty: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'empty',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Equal.apply': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Equal.apply_ind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Equal.chain': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Equal: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Equal.mirror': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Equal.rewrite': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Equal.to': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Example.nat': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Example.tco': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'Let', name: 'n10', expr: [Object], body: [Function] }
  },
  'Example.u32_add': {
    type: { ctor: 'Ref', name: 'U32' },
    term: { ctor: 'Let', name: 'num', expr: [Object], body: [Function] }
  },
  'Exports.TaelinArena': {
    type: { ctor: 'Ref', name: 'Exports' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Exports.add': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Exports.example': {
    type: { ctor: 'Ref', name: 'Exports' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  Exports: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Exports.new': {
    type: { ctor: 'Ref', name: 'Exports' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'F64.0': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.1': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.180': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.2': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.256': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.Boundary': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'boundary',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.Boundary.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pts', body: [Function] }
  },
  'F64.Circle': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'circle',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.Circle.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.Line': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'line',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.Line.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.Segment': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'segment',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.Segment.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.circle_boundary_intersects': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'c', body: [Function] }
  },
  'F64.V3.circle_line_intersection': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'c', body: [Function] }
  },
  'F64.V3.circle_to_circle_hit_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.dot': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'v3',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.V3.get_x': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.get_y': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.get_z': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.len': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.look_at': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.map': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fn', body: [Function] }
  },
  'F64.V3.map_x': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fn', body: [Function] }
  },
  'F64.V3.map_y': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fn', body: [Function] }
  },
  'F64.V3.map_z': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fn', body: [Function] }
  },
  'F64.V3.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'F64.V3.norm': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.point_segment_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'p', body: [Function] }
  },
  'F64.V3.point_segment_sqrdist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'p', body: [Function] }
  },
  'F64.V3.polygon_to_segments.cons': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.V3.polygon_to_segments': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.V3.polygon_to_segments.nil': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.V3.polygon_to_segments.transform': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.V3.rot_90': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.rotate': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.scale': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'k', body: [Function] }
  },
  'F64.V3.sqr_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64._1': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.acos': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.acos' }
  },
  'F64.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.add' }
  },
  'F64.asin': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.asin' }
  },
  'F64.atan': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.atan' }
  },
  'F64.cmp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.cos': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.cos' }
  },
  'F64.div': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.div' }
  },
  'F64.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'F64.exp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.exp' }
  },
  'F64.floor': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  F64: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'f64',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.from_bool': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'b', body: [Function] }
  },
  'F64.gte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.gtn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.if': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'F64.is_between': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.log': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.log' }
  },
  'F64.lte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.max': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.max' }
  },
  'F64.min': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.min' }
  },
  'F64.mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.mod' }
  },
  'F64.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.mul' }
  },
  'F64.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.parse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.parse' }
  },
  'F64.parse_binary': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'F64.pi': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.pow': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.pow' }
  },
  'F64.sin': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.sin' }
  },
  'F64.sqrt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'F64.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.sub' }
  },
  'F64.tan': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.tan' }
  },
  'Function.call': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.comp': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.const': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.curry': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.flip': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Function: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Function.id': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.pipe': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.uncurry': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'IO.end': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  IO: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'IO.inp': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'IO.log': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'JSON.array': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'JSON.bool': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  JSON: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'json',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'JSON.null': {
    type: { ctor: 'Ref', name: 'JSON' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'JSON.number': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'JSON.object': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'JSON.string': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'Lang.Cont': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    }
  },
  'Lang.all': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'Bnd', expr: [Object], body: [Function] }
  },
  'Lang.ann': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.app': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.arr': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.block_comment': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.core': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.enclose': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Lang.is_name': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'c', body: [Function] }
  },
  'Lang.is_space': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'c', body: [Function] }
  },
  'Lang.lam': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.let': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.line_comment': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: {
      ctor: 'Let',
      name: 'not_newline',
      expr: [Object],
      body: [Function]
    }
  },
  'Lang.nam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'allow_empty', body: [Function] }
  },
  'Lang.open': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.par': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.parse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 's',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 's', body: [Function] }
  },
  'Lang.pip': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.pst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.space': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.symbol': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Lang.test': {
    type: { ctor: 'Ref', name: 'String' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.trm': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.typ': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.var': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.whitespace': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'List.all': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.all_true': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'list', body: [Function] }
  },
  'List.any': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.any_true': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'list', body: [Function] }
  },
  'List.append': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.at': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.chunk': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.concat': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.cons': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.drop': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.filter': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.find': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.find_last.aux': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.find_last': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.flatten': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  List: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'List.fold': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.ifind.aux': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.ifind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.imap': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.intercalate': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.is_empty': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.length': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.map': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.nil': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.push': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.reverse.aux': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.reverse': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.show': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.single': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.take': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.to_concat': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.zip_with': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Map: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Map.get': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Map.lookup': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Map.mix': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Map.new': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  query: {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Map.set': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Map.tie': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Maybe.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Maybe.extract': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Maybe: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Maybe.join': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Maybe.map': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Maybe.none': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Maybe.some': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Nat.0': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'Ref', name: 'Nat.zero' }
  },
  'Nat.1': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.10': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.11': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.12': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.13': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.14': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.15': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.16': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.17': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.18': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.19': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.2': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.20': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.21': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.22': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.23': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.24': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.25': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.26': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.27': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.28': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.29': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.3': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.30': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.31': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.32': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.33': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.34': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.35': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.36': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.37': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.38': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.39': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.4': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.40': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.41': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.42': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.43': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.44': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.45': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.46': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.47': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.48': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.49': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.5': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.50': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.51': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.52': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.53': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.54': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.55': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.56': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.57': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.58': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.59': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.6': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.60': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.61': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.62': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.63': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.64': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.7': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.8': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.9': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.apply': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Nat.cmp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Nat.div': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.div_mod.aux': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.div_mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.double': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  Nat: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'nat',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Nat.gte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Nat.gtn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Nat.induction': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'n',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'k', body: [Function] }
  },
  'Nat.is_zero': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.lte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Nat.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Nat.mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.parse_decimal': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Nat.parse_decimal.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Nat.pred': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.show.aux': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.show.digit': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.show': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.show_base': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.solve_for': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'x',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'Nat.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.sub_rem': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.succ': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.sum': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.sum.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.to_base': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'base', body: [Function] }
  },
  'Nat.to_base.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'base', body: [Function] }
  },
  'Nat.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.to_string': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.to_string_base': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'base', body: [Function] }
  },
  'Nat.to_string_decimal': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.zero': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Newtype.elim': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Newtype: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Newtype.val': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'NonEmpty.cons': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'NonEmpty.end': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  NonEmpty: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'NonEmpty.to_list': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Not: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'P',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'P', body: [Function] }
  },
  Or: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  Pair: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Pair.fst': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Pair.new': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Pair.snd': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parsec.Error.Fancy.custom': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.Fancy.fail': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.Fancy': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'E', body: [Function] }
  },
  'Parsec.Error.Item.end_of_input': {
    type: { ctor: 'Ref', name: 'Parsec.Error.Item' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Parsec.Error.Item': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'parser.error.tokens',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Parsec.Error.Item.label': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'xs', body: [Function] }
  },
  'Parsec.Error.Item.show': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'e', body: [Function] }
  },
  'Parsec.Error.Item.tokens': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'xs', body: [Function] }
  },
  'Parsec.Error': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'E', body: [Function] }
  },
  'Parsec.Error.index': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.make_fancy': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.make_trivial': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.merge': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.show': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Reply.eaten_error': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.Reply.eaten_value': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.Reply.empty_error': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.Reply.empty_value': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.Reply': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'S', body: [Function] }
  },
  'Parsec.Reply.to_either': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.State.default': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.State': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'S', body: [Function] }
  },
  'Parsec.State.longest_match': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.State.make': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.any_char': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.ap': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.char': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.choice': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.eof': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.fail': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  Parsec: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'S', body: [Function] }
  },
  'Parsec.get_state': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.label': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.make': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.many': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.many_till': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.map': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.observing': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.optional': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.parse': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.peek': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.plus': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.pure': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.run': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.run_default': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.skip_many': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.take': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.take_while': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.take_while1': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.test1': {
    type: { ctor: 'Ref', name: 'String' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Parsec.then': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.throw': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.token': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.tokens': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.try': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.type': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'S', body: [Function] }
  },
  'Parsec.zero': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parser.Error': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Parser.Error.show': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'e', body: [Function] }
  },
  'Parser.Reply': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Parser.State.default': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'input', body: [Function] }
  },
  'Parser.State': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Parser.any_char': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Parser.ap': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.char': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'c', body: [Function] }
  },
  'Parser.choice': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.eof': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Parser.fail': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Parser: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Parser.label': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.many': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.many_till': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.observing': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.optional': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.parse': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.plus': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.pure': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.run': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.run_default': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.run_either': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.skip_many': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.take': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.take_while': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'f', body: [Function] }
  },
  'Parser.take_while1': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'err', body: [Function] }
  },
  'Parser.then': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.token': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.tokens': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Parser.try': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.type': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Parser.zero': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Research.core_in_core': {
    type: { ctor: 'Ref', name: 'String' },
    term: { ctor: 'Let', name: 'defs', expr: [Object], body: [Function] }
  },
  'Research.Var': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Research.Var.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Research.Ctx': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Research.Ctx.nil': {
    type: { ctor: 'Ref', name: 'Research.Ctx' },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Research.Ctx.ext': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'nam', body: [Function] }
  },
  'Research.Ctx.get': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'chr', body: [Function] }
  },
  'Research.parse_fun.filt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Research.parse_fun.typ0': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Research.parse_fun.typ1': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'nam', body: [Function] }
  },
  'Research.parse_fun.term': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'str',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Research.fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'str',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Research.crazy': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Research.it_works': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Research.equal_mul': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Research.floats': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'Let', name: 'f2', expr: [Object], body: [Function] }
  },
  'Research.get_syntax': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'Let', name: 'pair', expr: [Object], body: [Function] }
  },
  'Research.inference0': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Research.inference1': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'b', body: [Function] }
  },
  'Research.nat_literals': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'a', expr: [Object], body: [Function] }
  },
  'Research.solve': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Research.synthesis0': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Research.synthesis1': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'P',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  Set: {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Set.get': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bits', body: [Function] }
  },
  'Set.new': {
    type: { ctor: 'Ref', name: 'Set' },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Set.set': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bits', body: [Function] }
  },
  Show: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'x',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'Show.msg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'x',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  Sigma: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Sigma.fst': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Sigma.new': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Sigma.snd': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'String.chunk': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'String.concat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'as', body: [Function] }
  },
  'String.cons': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'head', body: [Function] }
  },
  'String.drop': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'String.drop_until': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'cond', body: [Function] }
  },
  'String.drop_while': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'cond', body: [Function] }
  },
  'String.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'String.filter': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'cond', body: [Function] }
  },
  'String.flatten': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'as', body: [Function] }
  },
  String: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'string',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'String.is_empty': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.length': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.nil': {
    type: { ctor: 'Ref', name: 'String' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'String.quote': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.reverse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.reverse.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.single': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'x',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'String.tail': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.take': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'String.take_n.aux': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'String.take_n': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'String.take_while.aux': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'f', body: [Function] }
  },
  'String.take_while': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'f', body: [Function] }
  },
  'String.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.to_list': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.to_set': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.to_stringifier': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Stringifier.concat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  Stringifier: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    }
  },
  'Stringifier.to_string': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  Subset: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Subset.new': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'TaelinArena.Constants.ONE_SEC': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'TaelinArena.Constants.POS_X_KEY': {
    type: { ctor: 'Ref', name: 'Bits' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'TaelinArena.Constants.POS_Y_KEY': {
    type: { ctor: 'Ref', name: 'Bits' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'TaelinArena.Game.ActionId': { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'F64' } },
  'TaelinArena.Game.Buff': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'buff',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Buff.hasted': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Buff.rooted': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Buff.shielded': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Buff.silenced': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Buff.slowed': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Buff.stuned': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Command': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'command',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Command.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  'TaelinArena.Game.Effect.damage': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dmg', body: [Function] }
  },
  'TaelinArena.Game.Effect': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'effect',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Effect.haste': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.heal': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'lif', body: [Function] }
  },
  'TaelinArena.Game.Effect.impulse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'mag', body: [Function] }
  },
  'TaelinArena.Game.Effect.repulse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'mag', body: [Function] }
  },
  'TaelinArena.Game.Effect.root': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.shield': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.silence': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.slow': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.stun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.teleport': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'to_pos', body: [Function] }
  },
  'TaelinArena.Game.Game': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'game',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Game.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'stage', body: [Function] }
  },
  'TaelinArena.Game.Hit': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'hit',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Hit.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'eff', body: [Function] }
  },
  'TaelinArena.Game.Hitbox.cbox': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'rad', body: [Function] }
  },
  'TaelinArena.Game.Hitbox': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'hitbox',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Hitbox.nbox': {
    type: { ctor: 'Ref', name: 'TaelinArena.Game.Hitbox' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'TaelinArena.Game.Hitbox.pbox': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pts', body: [Function] }
  },
  'TaelinArena.Game.Input.cmsg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'txt', body: [Function] }
  },
  'TaelinArena.Game.Input': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'input',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Input.key0': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.key1': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.key2': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.key3': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.key4': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.key5': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.sdir': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dir', body: [Function] }
  },
  'TaelinArena.Game.Light': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'light',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Light.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.ModelId': { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'F64' } },
  'F64.Ordering.EQ': {
    type: { ctor: 'Ref', name: 'F64.Ordering' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'F64.Ordering.GT': {
    type: { ctor: 'Ref', name: 'F64.Ordering' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'F64.Ordering.LT': {
    type: { ctor: 'Ref', name: 'F64.Ordering' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'F64.Ordering': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'F64.ordering',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.PlayerId': { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'F64' } },
  'TaelinArena.Game.SideId': { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'F64' } },
  'TaelinArena.Game.Thing': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'thing',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Thing.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fun', body: [Function] }
  },
  'TaelinArena.Game.TxFunction': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.animate': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.animate_between': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.animate_die': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.animate_with_blink': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.at_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.at_max_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.at_min_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.between_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.blink': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.cast': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.combine_mov_buffs': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'buff', body: [Function] }
  },
  'F64.compare_numbers': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'TaelinArena.Game.create_at': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.dash': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.die': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.end_thing': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.get_position_by_pid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  'TaelinArena.Game.get_stt_value': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.get_stt_value_v3': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.get_thing_act': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_box': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_bst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_buf': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_by_pid.cond': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  'TaelinArena.Game.get_thing_by_pid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  'TaelinArena.Game.get_thing_chi': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_die': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_dir': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_dmg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_hit': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_knk': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_lit': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_mhp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_mid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_mov': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_nam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_pad': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_pid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_pos': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_rst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_sid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_stt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_tik': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_trg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_vel': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_wei': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.handle_shields': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'hit_dmg',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'hit_dmg', body: [Function] }
  },
  'TaelinArena.Game.has_shields': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.illumine': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.init_act': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.is_rooted': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.is_silenced': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.is_stunned': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.is_using_buff': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.is_walking': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'this', body: [Function] }
  },
  'TaelinArena.Game.map_stage': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fn', body: [Function] }
  },
  'TaelinArena.Game.map_stt_key': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.move.fmc': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.reset': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.set_stt_value_v3': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.set_thing_act': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_box': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_bst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_buf': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_chi': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_die': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_dir': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_dmg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_hit': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_knk': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_lit': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_mhp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_mid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_mov': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_nam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_pad': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_pid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_pos': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_rst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_sid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_stt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_tik': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_trg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_vel': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_wei': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.spawn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.speed_multiplier_of': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.targ_dir': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.update_buff': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.update_buff_dur': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.use_shields': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'buff',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'buff', body: [Function] }
  },
  'TaelinArena.Game.with_thing.effect': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  'TaelinArena.Game.with_thing': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  BENFIX_BLOCK_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_021: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_HURT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_CASTING_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_CASTING_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_STEEL_TORNADO_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_STEEL_TORNADO_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_STEEL_TORNADO_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_STEEL_TORNADO_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DEFENSE_MODE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DEFENSE_MODE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DEFENSE_MODE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_HURT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_021: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_022: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_023: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_024: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_WALK_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_WALK_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_WALK_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_WALK_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_HURT_WITHOUT_SABER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_HURT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_WITHOUT_SABER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_WITHOUT_SABER_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_WITHOUT_SABER_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_WITHOUT_SABER_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_WITHOUT_SABER_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_WITHOUT_SABER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_WITHOUT_SABER_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_WITHOUT_SABER_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_HALO_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_PROJECTILE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_021: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_022: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_023: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_024: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_025: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_026: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_027: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_028: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_PILLAR_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_PILLAR_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_PILLAR_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_PILLAR_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_PILLAR_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HURT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_POT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_021: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_022: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_023: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_024: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_025: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_026: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_027: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_028: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_POSED_BACKUP: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  POSTE_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_021: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_022: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_023: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  WALL_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'TaelinArena.Thing.bleskape_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Thing.poste_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Thing.puddledmg_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Thing.puddleheal_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Thing.punchingbag_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Thing.wall_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.collide_with': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'a_pos',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a_pos', body: [Function] }
  },
  'TaelinArena.exec_command': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'cmd', body: [Function] }
  },
  'TaelinArena.exec_turn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'gm', body: [Function] }
  },
  'TaelinArena.fold_with_context': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'TaelinArena.interact_with': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'this',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'this', body: [Function] }
  },
  Text: { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'String' } },
  The: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'The.term': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'U16.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.and': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.div': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  U16: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'u16',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'U16.gte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.gtn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.inc': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.lte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.or': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.parse_hex': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'U16.pow': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.shl': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U16.shr': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U16.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.to_nat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.xor': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.0': {
    type: { ctor: 'Ref', name: 'U32' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'U32.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.and': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.concat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.div': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  U32: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'u32',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'U32.gte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.gtn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.hash2': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.inc': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.lte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.or': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.parse_hex': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'U32.pow': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.shl': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U32.shr': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U32.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.to_nat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.xor': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.0': {
    type: { ctor: 'Ref', name: 'U64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'U64.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.and': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.div': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  U64: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'u64',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'U64.gte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.gtn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.inc': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.lte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.mix.const0': {
    type: { ctor: 'Ref', name: 'U64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'U64.mix.const1': {
    type: { ctor: 'Ref', name: 'U64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'U64.mix': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'h', body: [Function] }
  },
  'U64.mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.or': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.parse_hex': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'U64.pow': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.shl': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U64.shr': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U64.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.to_nat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.xor': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'UFind.new': {
    type: { ctor: 'Ref', name: 'UFind' },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'UFind.equivalent': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'uf', body: [Function] }
  },
  'UFind.find': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'B',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'B', body: [Function] }
  },
  UFind: {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'UFind.new_node': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'uf', body: [Function] }
  },
  'UFind.union': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'uf', body: [Function] }
  },
  UNode: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'unode_value',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'UNode.link': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'parent', body: [Function] }
  },
  'UNode.root': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'rank', body: [Function] }
  },
  Unit: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'unit',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Unit.new': {
    type: { ctor: 'Ref', name: 'Unit' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Unit.show': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'u', body: [Function] }
  },
  'Word.0': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.1': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.add.aux': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.add': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.and': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.and' }
  },
  'Word.cmp.aux': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.cmp': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.concat': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'a_size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'a_size', body: [Function] }
  },
  'Word.div': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.div' }
  },
  'Word.drop': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.eql': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  Word: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'size', body: [Function] }
  },
  'Word.from_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'size', body: [Function] }
  },
  'Word.gte': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.gtn': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.inc': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.lte': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.ltn': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.mod': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.mod' }
  },
  'Word.mul': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.mul' }
  },
  'Word.nil': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Word.or': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.or' }
  },
  'Word.parse_hex': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'size', body: [Function] }
  },
  'Word.pow': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.pow' }
  },
  'Word.pred': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.shift_left': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.shift_left' }
  },
  'Word.shift_right': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.shift_right' }
  },
  'Word.sub': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.sub' }
  },
  'Word.to_bits': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.to_nat': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.to_nat.go': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.xor': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.xor' }
  },
  hello: {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'uname', expr: [Object], body: [Function] }
  }
}
Term 'Exports.TaelinArena.fm' not found.
➜  Moonad git:(183-TaelinArena) ✗ clear                       

➜  Moonad git:(183-TaelinArena) ✗ fmcjs Exports.TaelinArena   
{
  'Bit.0': {
    type: { ctor: 'Ref', name: 'Bit' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Bit.1': {
    type: { ctor: 'Ref', name: 'Bit' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  Bit: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'bit',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Bits.0': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'bs',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bs', body: [Function] }
  },
  'Bits.1': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'bs',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bs', body: [Function] }
  },
  'Bits.concat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bits.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bs1', body: [Function] }
  },
  Bits: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'bits',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Bits.from_string': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Bits.inc': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bits', body: [Function] }
  },
  'Bits.nil': {
    type: { ctor: 'Ref', name: 'Bits' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Bits.parse_hex': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Bits.parse_hex.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Bits.reverse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'as', body: [Function] }
  },
  'Bits.reverse.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'as', body: [Function] }
  },
  'Bool.and': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.elim': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'b',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'b', body: [Function] }
  },
  'Bool.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.false': {
    type: { ctor: 'Ref', name: 'Bool' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Bool.false_isnt_true': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'P', expr: [Object], body: [Function] }
  },
  Bool: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'bool',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Bool.if': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Bool.not': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.notf': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.or': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.test.different_elem': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'a',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Bool.true': {
    type: { ctor: 'Ref', name: 'Bool' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Bool.true_isnt_false': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Lam', eras: false, name: 'e', body: [Function] }
  },
  Char: { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'U16' } },
  'Char.hex_value': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'chr', body: [Function] }
  },
  'Char.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'b0', body: [Function] }
  },
  'Char.newline': {
    type: { ctor: 'Ref', name: 'Char' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Char.parse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'str',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Char.parse.type': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Char.quote': {
    type: { ctor: 'Ref', name: 'Char' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Char.tab': {
    type: { ctor: 'Ref', name: 'Char' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Cmp.eql': {
    type: { ctor: 'Ref', name: 'Cmp' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  Cmp: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'cmp',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Cmp.gtn': {
    type: { ctor: 'Ref', name: 'Cmp' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Cmp.ltn': {
    type: { ctor: 'Ref', name: 'Cmp' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Comp.app': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'func', body: [Function] }
  },
  'Comp.fal': {
    type: { ctor: 'Ref', name: 'Comp' },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  Comp: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'comp',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Comp.lam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Comp.let': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Comp.stringify': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'comp', body: [Function] }
  },
  'Comp.tru': {
    type: { ctor: 'Ref', name: 'Comp' },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Comp.var': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  Concat: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Concat.push': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Concat.to_list': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Bind': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    }
  },
  'Core.Comp.check': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.Comp.infer': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.Ctx.ext': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Core.Ctx': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Ctx.nil': {
    type: { ctor: 'Ref', name: 'Core.Ctx' },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Core.Def': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Defs': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Defs.get': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Defs.get_term': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Defs.get_type': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Defs.new': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Core.Defs.set': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Core.Defs.term': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Defs.type': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Read.Reply': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Core.Read.all': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.ann': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'expr', body: [Function] }
  },
  'Core.Read.app': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'func', body: [Function] }
  },
  'Core.Read.arr': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bind', body: [Function] }
  },
  'Core.Read.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Read.def': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.defs': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.defs.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'defs', body: [Function] }
  },
  'Core.Read.done': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Read.fail': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Read.first_of': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Read': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Core.Read.fst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'txts', body: [Function] }
  },
  'Core.Read.is_name': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'chr', body: [Function] }
  },
  'Core.Read.is_name.set': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.is_space': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'chr', body: [Function] }
  },
  'Core.Read.lam': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.let': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.nam': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Lam', eras: false, name: 'code', body: [Function] }
  },
  'Core.Read.next': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Core.Read.one': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'chr0', body: [Function] }
  },
  'Core.Read.opt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Core.Read.par': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.pip': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'func', body: [Function] }
  },
  'Core.Read.seek': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Core.Read.trm.base': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'nil', expr: [Object], body: [Function] }
  },
  'Core.Read.trm': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.trm.post': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'base', body: [Function] }
  },
  'Core.Read.txt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Core.Read.typ': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.var': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.Read.wrd': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Core.all.Tuple': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Core.all': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'eras', body: [Function] }
  },
  'Core.ann': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'done', body: [Function] }
  },
  'Core.app': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'eras', body: [Function] }
  },
  'Core.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Core.eql.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  Core: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'core',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Core.if_all': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.is_all': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.is_lam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.lam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'eras', body: [Function] }
  },
  'Core.let': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Core.normalize': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.parse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'code', body: [Function] }
  },
  'Core.parse_defs': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'code', body: [Function] }
  },
  'Core.reduce': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.ref': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Core.stringify': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.stringify.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.to_bits.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.to_uid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.typ': {
    type: { ctor: 'Ref', name: 'Core' },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Core.typecheck': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.typecomp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.typeinfer': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'term', body: [Function] }
  },
  'Core.var': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'name', body: [Function] }
  },
  'Debug.log': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Either.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Either: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Either.left': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Either.right': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Empty.absurd': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'x',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  Empty: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'empty',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Equal.apply': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Equal.apply_ind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Equal.chain': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Equal: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Equal.mirror': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Equal.rewrite': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Equal.to': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Example.nat': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Example.tco': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'Let', name: 'n10', expr: [Object], body: [Function] }
  },
  'Example.u32_add': {
    type: { ctor: 'Ref', name: 'U32' },
    term: { ctor: 'Let', name: 'num', expr: [Object], body: [Function] }
  },
  'Exports.TaelinArena': {
    type: { ctor: 'Ref', name: 'Exports' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Exports.add': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Exports.example': {
    type: { ctor: 'Ref', name: 'Exports' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  Exports: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Exports.new': {
    type: { ctor: 'Ref', name: 'Exports' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'F64.0': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.1': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.180': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.2': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.256': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.Boundary': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'boundary',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.Boundary.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pts', body: [Function] }
  },
  'F64.Circle': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'circle',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.Circle.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.Line': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'line',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.Line.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.Segment': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'segment',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.Segment.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.circle_boundary_intersects': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'c', body: [Function] }
  },
  'F64.V3.circle_line_intersection': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'c', body: [Function] }
  },
  'F64.V3.circle_to_circle_hit_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.dot': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'v3',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.V3.get_x': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.get_y': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.get_z': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.len': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.look_at': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.map': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fn', body: [Function] }
  },
  'F64.V3.map_x': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fn', body: [Function] }
  },
  'F64.V3.map_y': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fn', body: [Function] }
  },
  'F64.V3.map_z': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fn', body: [Function] }
  },
  'F64.V3.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'F64.V3.norm': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.point_segment_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'p', body: [Function] }
  },
  'F64.V3.point_segment_sqrdist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'p', body: [Function] }
  },
  'F64.V3.polygon_to_segments.cons': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.V3.polygon_to_segments': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.V3.polygon_to_segments.nil': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.V3.polygon_to_segments.transform': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'F64.V3.rot_90': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'v', body: [Function] }
  },
  'F64.V3.rotate': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.scale': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'k', body: [Function] }
  },
  'F64.V3.sqr_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.V3.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64._1': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.acos': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.acos' }
  },
  'F64.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.add' }
  },
  'F64.asin': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.asin' }
  },
  'F64.atan': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.atan' }
  },
  'F64.cmp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.cos': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.cos' }
  },
  'F64.div': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.div' }
  },
  'F64.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'F64.exp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.exp' }
  },
  'F64.floor': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  F64: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'f64',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'F64.from_bool': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'b', body: [Function] }
  },
  'F64.gte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.gtn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.if': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'F64.is_between': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.log': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.log' }
  },
  'F64.lte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.max': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.max' }
  },
  'F64.min': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.min' }
  },
  'F64.mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.mod' }
  },
  'F64.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.mul' }
  },
  'F64.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'F64.parse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.parse' }
  },
  'F64.parse_binary': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'F64.pi': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'F64.pow': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.pow' }
  },
  'F64.sin': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.sin' }
  },
  'F64.sqrt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'F64.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.sub' }
  },
  'F64.tan': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'F64.tan' }
  },
  'Function.call': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.comp': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.const': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.curry': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.flip': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Function: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Function.id': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.pipe': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Function.uncurry': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'IO.end': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  IO: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'IO.inp': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'IO.log': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'JSON.array': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'JSON.bool': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  JSON: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'json',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'JSON.null': {
    type: { ctor: 'Ref', name: 'JSON' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'JSON.number': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'JSON.object': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'JSON.string': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'Lang.Cont': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    }
  },
  'Lang.all': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'Bnd', expr: [Object], body: [Function] }
  },
  'Lang.ann': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.app': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.arr': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.block_comment': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.core': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.enclose': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Lang.is_name': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'c', body: [Function] }
  },
  'Lang.is_space': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'c', body: [Function] }
  },
  'Lang.lam': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.let': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.line_comment': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: {
      ctor: 'Let',
      name: 'not_newline',
      expr: [Object],
      body: [Function]
    }
  },
  'Lang.nam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'allow_empty', body: [Function] }
  },
  'Lang.open': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.par': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.parse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 's',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 's', body: [Function] }
  },
  'Lang.pip': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.pst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.space': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.symbol': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Lang.test': {
    type: { ctor: 'Ref', name: 'String' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.trm': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'C', expr: [Object], body: [Function] }
  },
  'Lang.typ': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.var': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Lang.whitespace': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'List.all': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.all_true': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'list', body: [Function] }
  },
  'List.any': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.any_true': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'list', body: [Function] }
  },
  'List.append': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.at': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.chunk': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.concat': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.cons': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.drop': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.filter': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.find': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.find_last.aux': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.find_last': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.flatten': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  List: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'List.fold': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.ifind.aux': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.ifind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.imap': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.intercalate': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.is_empty': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.length': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.map': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.nil': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.push': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.reverse.aux': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.reverse': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.show': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.single': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.take': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.to_concat': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'List.zip_with': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Map: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Map.get': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Map.lookup': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Map.mix': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Map.new': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  query: {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Map.set': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Map.tie': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Maybe.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Maybe.extract': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Maybe: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Maybe.join': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Maybe.map': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Maybe.none': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Maybe.some': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: '', body: [Function] }
  },
  'Nat.0': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'Ref', name: 'Nat.zero' }
  },
  'Nat.1': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.10': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.11': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.12': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.13': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.14': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.15': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.16': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.17': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.18': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.19': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.2': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.20': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.21': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.22': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.23': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.24': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.25': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.26': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.27': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.28': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.29': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.3': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.30': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.31': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.32': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.33': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.34': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.35': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.36': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.37': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.38': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.39': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.4': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.40': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.41': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.42': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.43': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.44': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.45': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.46': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.47': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.48': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.49': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.5': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.50': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.51': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.52': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.53': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.54': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.55': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.56': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.57': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.58': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.59': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.6': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.60': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.61': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.62': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.63': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.64': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.7': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.8': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.9': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.apply': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Nat.cmp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Nat.div': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.div_mod.aux': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.div_mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.double': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  Nat: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'nat',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Nat.gte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Nat.gtn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Nat.induction': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'n',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'k', body: [Function] }
  },
  'Nat.is_zero': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.lte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Nat.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'Nat.mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.parse_decimal': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Nat.parse_decimal.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Nat.pred': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.show.aux': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.show.digit': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.show': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.show_base': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.solve_for': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'x',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'Nat.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.sub_rem': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.succ': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.sum': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.sum.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.to_base': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'base', body: [Function] }
  },
  'Nat.to_base.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'base', body: [Function] }
  },
  'Nat.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.to_string': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'Nat.to_string_base': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'base', body: [Function] }
  },
  'Nat.to_string_decimal': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Nat.zero': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Newtype.elim': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Newtype: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Newtype.val': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'NonEmpty.cons': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'NonEmpty.end': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  NonEmpty: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'NonEmpty.to_list': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Not: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'P',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'P', body: [Function] }
  },
  Or: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  Pair: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Pair.fst': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Pair.new': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Pair.snd': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parsec.Error.Fancy.custom': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.Fancy.fail': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.Fancy': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'E', body: [Function] }
  },
  'Parsec.Error.Item.end_of_input': {
    type: { ctor: 'Ref', name: 'Parsec.Error.Item' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Parsec.Error.Item': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'parser.error.tokens',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Parsec.Error.Item.label': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'xs', body: [Function] }
  },
  'Parsec.Error.Item.show': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'e', body: [Function] }
  },
  'Parsec.Error.Item.tokens': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'xs', body: [Function] }
  },
  'Parsec.Error': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'E', body: [Function] }
  },
  'Parsec.Error.index': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.make_fancy': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.make_trivial': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.merge': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Error.show': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'E',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'E', body: [Function] }
  },
  'Parsec.Reply.eaten_error': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.Reply.eaten_value': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.Reply.empty_error': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.Reply.empty_value': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.Reply': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'S', body: [Function] }
  },
  'Parsec.Reply.to_either': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.State.default': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.State': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'S', body: [Function] }
  },
  'Parsec.State.longest_match': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.State.make': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.any_char': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.ap': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.char': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.choice': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.eof': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.fail': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  Parsec: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'S', body: [Function] }
  },
  'Parsec.get_state': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.label': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.make': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.many': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.many_till': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.map': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.observing': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.optional': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.parse': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.peek': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.plus': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.pure': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.run': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.run_default': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.skip_many': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.take': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.take_while': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.take_while1': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.test1': {
    type: { ctor: 'Ref', name: 'String' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Parsec.then': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.throw': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.token': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.tokens': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.try': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parsec.type': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'S', body: [Function] }
  },
  'Parsec.zero': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'S',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'S', body: [Function] }
  },
  'Parser.Error': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Parser.Error.show': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'e', body: [Function] }
  },
  'Parser.Reply': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Parser.State.default': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'input', body: [Function] }
  },
  'Parser.State': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Parser.any_char': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Parser.ap': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.bind': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.char': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'c', body: [Function] }
  },
  'Parser.choice': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.eof': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Parser.fail': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  Parser: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Parser.label': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.many': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.many_till': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.observing': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.optional': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.parse': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.plus': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.pure': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.run': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.run_default': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.run_either': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.skip_many': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.take': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.take_while': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'f', body: [Function] }
  },
  'Parser.take_while1': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'err', body: [Function] }
  },
  'Parser.then': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.token': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.tokens': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Parser.try': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Parser.type': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Parser.zero': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Research.core_in_core': {
    type: { ctor: 'Ref', name: 'String' },
    term: { ctor: 'Let', name: 'defs', expr: [Object], body: [Function] }
  },
  'Research.Var': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Research.Var.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Research.Ctx': {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Research.Ctx.nil': {
    type: { ctor: 'Ref', name: 'Research.Ctx' },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Research.Ctx.ext': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'nam', body: [Function] }
  },
  'Research.Ctx.get': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'chr', body: [Function] }
  },
  'Research.parse_fun.filt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Research.parse_fun.typ0': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Research.parse_fun.typ1': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'nam', body: [Function] }
  },
  'Research.parse_fun.term': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'str',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Research.fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'str',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Research.crazy': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Research.it_works': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Research.equal_mul': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Research.floats': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'Let', name: 'f2', expr: [Object], body: [Function] }
  },
  'Research.get_syntax': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'Let', name: 'pair', expr: [Object], body: [Function] }
  },
  'Research.inference0': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Research.inference1': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'b', body: [Function] }
  },
  'Research.nat_literals': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'a', expr: [Object], body: [Function] }
  },
  'Research.solve': {
    type: { ctor: 'Ref', name: 'Nat' },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Research.synthesis0': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Research.synthesis1': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'P',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  Set: {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'Set.get': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bits', body: [Function] }
  },
  'Set.new': {
    type: { ctor: 'Ref', name: 'Set' },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'Set.set': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'bits', body: [Function] }
  },
  Show: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'x',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'Show.msg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'x',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  Sigma: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Sigma.fst': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Sigma.new': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'Sigma.snd': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'String.chunk': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'String.concat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'as', body: [Function] }
  },
  'String.cons': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'head', body: [Function] }
  },
  'String.drop': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'String.drop_until': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'cond', body: [Function] }
  },
  'String.drop_while': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'cond', body: [Function] }
  },
  'String.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'String.filter': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'cond', body: [Function] }
  },
  'String.flatten': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'as', body: [Function] }
  },
  String: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'string',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'String.is_empty': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.length': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.nil': {
    type: { ctor: 'Ref', name: 'String' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'String.quote': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.reverse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.reverse.go': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.single': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'x',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'x', body: [Function] }
  },
  'String.tail': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.take': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'String.take_n.aux': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'String.take_n': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'String.take_while.aux': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'f', body: [Function] }
  },
  'String.take_while': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'f', body: [Function] }
  },
  'String.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.to_list': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.to_set': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'String.to_stringifier': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'Stringifier.concat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  Stringifier: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    }
  },
  'Stringifier.to_string': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  Subset: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'Subset.new': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'TaelinArena.Constants.ONE_SEC': {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'TaelinArena.Constants.POS_X_KEY': {
    type: { ctor: 'Ref', name: 'Bits' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'TaelinArena.Constants.POS_Y_KEY': {
    type: { ctor: 'Ref', name: 'Bits' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'TaelinArena.Game.ActionId': { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'F64' } },
  'TaelinArena.Game.Buff': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'buff',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Buff.hasted': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Buff.rooted': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Buff.shielded': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Buff.silenced': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Buff.slowed': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Buff.stuned': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Command': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'command',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Command.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  'TaelinArena.Game.Effect.damage': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dmg', body: [Function] }
  },
  'TaelinArena.Game.Effect': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'effect',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Effect.haste': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.heal': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'lif', body: [Function] }
  },
  'TaelinArena.Game.Effect.impulse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'mag', body: [Function] }
  },
  'TaelinArena.Game.Effect.repulse': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'mag', body: [Function] }
  },
  'TaelinArena.Game.Effect.root': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.shield': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.silence': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.slow': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.stun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dur', body: [Function] }
  },
  'TaelinArena.Game.Effect.teleport': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'to_pos', body: [Function] }
  },
  'TaelinArena.Game.Game': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'game',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Game.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'stage', body: [Function] }
  },
  'TaelinArena.Game.Hit': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'hit',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Hit.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'eff', body: [Function] }
  },
  'TaelinArena.Game.Hitbox.cbox': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'rad', body: [Function] }
  },
  'TaelinArena.Game.Hitbox': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'hitbox',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Hitbox.nbox': {
    type: { ctor: 'Ref', name: 'TaelinArena.Game.Hitbox' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'TaelinArena.Game.Hitbox.pbox': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pts', body: [Function] }
  },
  'TaelinArena.Game.Input.cmsg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'txt', body: [Function] }
  },
  'TaelinArena.Game.Input': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'input',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Input.key0': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.key1': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.key2': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.key3': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.key4': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.key5': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.Input.sdir': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'dir', body: [Function] }
  },
  'TaelinArena.Game.Light': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'light',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Light.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pos', body: [Function] }
  },
  'TaelinArena.Game.ModelId': { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'F64' } },
  'F64.Ordering.EQ': {
    type: { ctor: 'Ref', name: 'F64.Ordering' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'F64.Ordering.GT': {
    type: { ctor: 'Ref', name: 'F64.Ordering' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'F64.Ordering.LT': {
    type: { ctor: 'Ref', name: 'F64.Ordering' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'F64.Ordering': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'F64.ordering',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.PlayerId': { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'F64' } },
  'TaelinArena.Game.SideId': { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'F64' } },
  'TaelinArena.Game.Thing': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'thing',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.Thing.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fun', body: [Function] }
  },
  'TaelinArena.Game.TxFunction': {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    }
  },
  'TaelinArena.Game.animate': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.animate_between': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.animate_die': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.animate_with_blink': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.at_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.at_max_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.at_min_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.between_dist': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.blink': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.cast': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.combine_mov_buffs': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'buff', body: [Function] }
  },
  'F64.compare_numbers': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'TaelinArena.Game.create_at': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.dash': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.die': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.end_thing': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.get_position_by_pid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  'TaelinArena.Game.get_stt_value': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.get_stt_value_v3': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.get_thing_act': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_box': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_bst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_buf': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_by_pid.cond': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  'TaelinArena.Game.get_thing_by_pid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  'TaelinArena.Game.get_thing_chi': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_die': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_dir': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_dmg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_hit': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_knk': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_lit': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_mhp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_mid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_mov': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_nam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_pad': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_pid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_pos': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_rst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_sid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_stt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_tik': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_trg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_vel': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.get_thing_wei': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.handle_shields': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'hit_dmg',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'hit_dmg', body: [Function] }
  },
  'TaelinArena.Game.has_shields': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.illumine': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.init_act': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.is_rooted': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.is_silenced': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.is_stunned': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.is_using_buff': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.is_walking': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'this', body: [Function] }
  },
  'TaelinArena.Game.map_stage': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'fn', body: [Function] }
  },
  'TaelinArena.Game.map_stt_key': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.move.fmc': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.reset': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.set_stt_value_v3': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.set_thing_act': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_box': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_bst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_buf': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_chi': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_die': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_dir': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_dmg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_hit': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_knk': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_lit': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_mhp': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_mid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_mov': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_nam': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_pad': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_pid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_pos': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_rst': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_sid': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_stt': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_tik': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_trg': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_vel': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.set_thing_wei': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'thi',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'thi', body: [Function] }
  },
  'TaelinArena.Game.spawn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.speed_multiplier_of': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.targ_dir': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.update_buff': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.update_buff_dur': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Game.use_shields': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'buff',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'buff', body: [Function] }
  },
  'TaelinArena.Game.with_thing.effect': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  'TaelinArena.Game.with_thing': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'pid', body: [Function] }
  },
  BENFIX_BLOCK_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_DASH_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_GIGA_DASH_021: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_HURT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_IDLE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_CASTING_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_CASTING_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_SEISMIC_JUMP_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_STEEL_TORNADO_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_STEEL_TORNADO_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_STEEL_TORNADO_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_STEEL_TORNADO_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TAUNT_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_1_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_TRIPLE_ATTACK_2_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BENFIX_WALK_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_1_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_BASE_ATTACK_2_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DASH_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DEFENSE_MODE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DEFENSE_MODE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_DEFENSE_MODE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_HURT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_BALL_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SHOCK_GROUND_WAVE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_021: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_022: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_023: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_SUPREME_PUNCH_SEQUENCE_024: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_TAUNT_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_WALK_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_WALK_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_WALK_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  BLESKAPE_WALK_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_HURT_WITHOUT_SABER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_HURT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_WITHOUT_SABER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_WITHOUT_SABER_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_WITHOUT_SABER_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_WITHOUT_SABER_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_WITHOUT_SABER_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_ROGUE_ONE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_EMPIRE_STRICKES_BACK_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_RETURN_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_WITHOUT_SABER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_WITHOUT_SABER_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_WITHOUT_SABER_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DARTH_VADER_WALK_CYCLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_CASTANIMATION_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESS_HALO_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_PROJECTILE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_BLESSING_FOR_WHO_DESERVE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_CAST_ANIMATION_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_021: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_022: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_023: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_024: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_025: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_026: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_027: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_028: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_GODS_CHAMBER_HEAL_CIRCLE_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_CAST_ANIMATION_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_PILLAR_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_PILLAR_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_PILLAR_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_PILLAR_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HOLY_FLAME_PILLAR_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_HURT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_JESUS_POWER_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_POT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_021: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_022: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_023: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_024: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_025: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_026: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_027: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_028: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_LEPTOSPIROSE_CURSE_PUDDLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_POSED_BACKUP: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_TAUNT_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  DORIME_WALK_CYCLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  POSTE_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_001: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_002: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_003: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_004: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_005: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_006: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_007: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_008: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_009: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_010: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_011: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_012: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_013: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_014: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_015: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_016: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_017: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_018: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_019: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_020: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_021: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_022: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  PUNCHINGBAG_IDLE_023: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  WALL_IDLE_000: {
    type: { ctor: 'Ref', name: 'F64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'TaelinArena.Thing.bleskape_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'self',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Thing.poste_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Thing.puddledmg_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Thing.puddleheal_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Thing.punchingbag_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.Thing.wall_fun': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'self', body: [Function] }
  },
  'TaelinArena.collide_with': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'a_pos',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a_pos', body: [Function] }
  },
  'TaelinArena.exec_command': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'cmd', body: [Function] }
  },
  'TaelinArena.exec_turn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'gm', body: [Function] }
  },
  'TaelinArena.fold_with_context': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'TaelinArena.interact_with': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'this',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'this', body: [Function] }
  },
  Text: { type: { ctor: 'Typ' }, term: { ctor: 'Ref', name: 'String' } },
  The: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'A', body: [Function] }
  },
  'The.term': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'A',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'A', body: [Function] }
  },
  'U16.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.and': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.div': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  U16: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'u16',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'U16.gte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.gtn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.inc': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.lte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.or': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.parse_hex': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'U16.pow': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.shl': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U16.shr': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U16.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.to_nat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U16.xor': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.0': {
    type: { ctor: 'Ref', name: 'U32' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'U32.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.and': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.concat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.div': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  U32: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'u32',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'U32.gte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.gtn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.hash2': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.inc': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.lte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.or': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.parse_hex': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'U32.pow': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.shl': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U32.shr': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U32.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.to_nat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U32.xor': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.0': {
    type: { ctor: 'Ref', name: 'U64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'U64.add': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.and': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.div': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.eql': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  U64: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'u64',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'U64.gte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.gtn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.inc': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.lte': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.ltn': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.mix.const0': {
    type: { ctor: 'Ref', name: 'U64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'U64.mix.const1': {
    type: { ctor: 'Ref', name: 'U64' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'U64.mix': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'h', body: [Function] }
  },
  'U64.mod': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.mul': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.new': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.or': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.parse_hex': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'str', body: [Function] }
  },
  'U64.pow': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.shl': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U64.shr': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'n', body: [Function] }
  },
  'U64.sub': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.to_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.to_nat': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'U64.xor': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'a', body: [Function] }
  },
  'UFind.new': {
    type: { ctor: 'Ref', name: 'UFind' },
    term: { ctor: 'App', eras: true, func: [Object], argm: [Object] }
  },
  'UFind.equivalent': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'uf', body: [Function] }
  },
  'UFind.find': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'B',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'B', body: [Function] }
  },
  UFind: {
    type: { ctor: 'Typ' },
    term: { ctor: 'App', eras: false, func: [Object], argm: [Object] }
  },
  'UFind.new_node': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'uf', body: [Function] }
  },
  'UFind.union': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'uf', body: [Function] }
  },
  UNode: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'unode_value',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'UNode.link': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'parent', body: [Function] }
  },
  'UNode.root': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'rank', body: [Function] }
  },
  Unit: {
    type: { ctor: 'Typ' },
    term: {
      ctor: 'All',
      eras: true,
      self: 'unit',
      name: 'P',
      bind: [Object],
      body: [Function]
    }
  },
  'Unit.new': {
    type: { ctor: 'Ref', name: 'Unit' },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Unit.show': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'u', body: [Function] }
  },
  'Word.0': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.1': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.add.aux': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.add': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.and': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.and' }
  },
  'Word.cmp.aux': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.cmp': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.concat': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'a_size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'a_size', body: [Function] }
  },
  'Word.div': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.div' }
  },
  'Word.drop': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.eql': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  Word: {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: '',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'size', body: [Function] }
  },
  'Word.from_bits': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'size', body: [Function] }
  },
  'Word.gte': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.gtn': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.inc': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.lte': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.ltn': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.mod': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.mod' }
  },
  'Word.mul': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.mul' }
  },
  'Word.nil': {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Lam', eras: true, name: 'P', body: [Function] }
  },
  'Word.or': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.or' }
  },
  'Word.parse_hex': {
    type: {
      ctor: 'All',
      eras: false,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: false, name: 'size', body: [Function] }
  },
  'Word.pow': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.pow' }
  },
  'Word.pred': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.shift_left': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.shift_left' }
  },
  'Word.shift_right': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.shift_right' }
  },
  'Word.sub': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.sub' }
  },
  'Word.to_bits': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.to_nat': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.to_nat.go': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Lam', eras: true, name: 'size', body: [Function] }
  },
  'Word.xor': {
    type: {
      ctor: 'All',
      eras: true,
      self: '',
      name: 'size',
      bind: [Object],
      body: [Function]
    },
    term: { ctor: 'Ref', name: 'Word.xor' }
  },
  hello: {
    type: { ctor: 'App', eras: false, func: [Object], argm: [Object] },
    term: { ctor: 'Let', name: 'uname', expr: [Object], body: [Function] }
  }
}
module.exports = (function (){
  var F64 = new Float64Array(1);
  var U32 = new Uint32Array(F64.buffer);
  var F64_get = (x,i)=>((F64[0]=x),(i<32?(U32[0]>>>i)&1:(U32[1]>>>(i-32)&1)));
  var F64_set = (x,i)=>((F64[0]=x),(i<32?(U32[0]=U32[0]|(1<<i)):(U32[1]=U32[1]|(1<<(i-32)))),F64[0]);
  var inst_unit = x=>x(1);
  var elim_unit = x=>v=>v;
  var inst_bool = x=>x(true)(false);
  var elim_bool = x=>t=>f=>x?t:f;
  var inst_nat = x=>x(0n)(p=>1n+p);
  var elim_nat = x=>z=>s=>x===0n?z:s(x-1n);
  var inst_bits = x=>x('')(p=>p+'0')(p=>p+'1');
  var elim_bits = x=>be=>b0=>b1=>(x.length?(x[x.length-1]==='0'?b0(x.slice(0,-1)):b1(x.slice(0,-1))):be);
  var inst_u16 = x=>x(w=>(function R(x,k){return x(0)(p=>R(p,k*2))(p=>k+R(p,k*2))})(w,1));
  var elim_u16 = x=>u=>u((function R(i){return we=>w0=>w1=>i===16?we:((x>>>i)&1?w1:w0)(R(i+1))})(0));
  var inst_u32 = x=>x(w=>(function R(x,k){return x(0)(p=>R(p,k*2))(p=>k+R(p,k*2))})(w,1));
  var elim_u32 = x=>u=>u((function R(i){return we=>w0=>w1=>i===32?we:((x>>>i)&1?w1:w0)(R(i+1))})(0));
  var inst_u64 = x=>x(w=>(function R(x,k){return x(0n)(p=>R(p,k*2n))(p=>k+R(p,k*2n))})(w,1n));
  var elim_u64 = x=>u=>u((function R(i){return we=>w0=>w1=>i===64n?we:((x>>i)&1n?w1:w0)(R(i+1n))})(0n));
  var inst_f64 = x=>x(w=>(function R(x,i){return x(0)(p=>R(p,i+1))(p=>F64_set(R(p,i+1),i))})(w,0));
  var elim_f64 = x=>u=>u((function R(i){return we=>w0=>w1=>i===64?we:(F64_get(x,i)?w1:w0)(R(i+1))})(0));
  var inst_string = x=>x('')(h=>t=>String.fromCharCode(h)+t);
  var elim_string = x=>n=>c=>x===''?n:c(x.charCodeAt(0))(x.slice(1));
  var $Exports$add = ($x=>($xs=>($new=>($add=>$add($x)($xs($new)($add))))));
  var $List$nil = ($nil=>($cons=>$nil));
  var $List$cons = ($head=>($tail=>($nil=>($cons=>$cons($head)($tail)))));
  var $List$fold = ($nil=>($cons=>($list=>$list($nil)(($x=>($xs=>$cons($x)($List$fold($nil)($cons)($xs))))))));
  var $List = ($A=>(void 0));
  var $F64$atan = a=>Math.atan(a);
  var $F64$mul = a=>b=>a*b;
  var $F64$cos = a=>Math.cos(a);
  var $F64$sin = a=>Math.sin(a);
  var $F64$sub = a=>b=>a-b;
  var $F64$add = a=>b=>a+b;
  var $F64$V3$new = ($x=>($y=>($z=>($new=>$new($x)($y)($z)))));
  var $F64$V3$add = ($a=>($b=>$a(($a$x=>($a$y=>($a$z=>$b(($b$x=>($b$y=>($b$z=>($c$x=>($c$y=>($c$z=>$F64$V3$new($c$x)($c$y)($c$z))($F64$add($a$z)($b$z)))($F64$add($a$y)($b$y)))($F64$add($a$x)($a$x))))))))))));
  var $F64$V3$polygon_to_segments$transform = ($pos=>($dir=>($pnt=>$pnt(($pnt$x=>($pnt$y=>($pnt$z=>$dir(($dir$x=>($dir$y=>($dir$z=>($a=>($pnt_x_times_cos_a=>($pnt_y_times_sin_a=>($pnt_x_times_sin_a=>($pnt_y_times_cos_a=>($x=>($y=>$F64$V3$add($pos)($F64$V3$new($x)($y)($pnt$z)))($F64$add($pnt_x_times_sin_a)($pnt_y_times_cos_a)))($F64$sub($pnt_x_times_cos_a)($pnt_y_times_sin_a)))($F64$mul($pnt$y)($F64$cos($a))))($F64$mul($pnt$x)($F64$sin($a))))($F64$mul($pnt$y)($F64$sin($a))))($F64$mul($pnt$x)($F64$cos($a))))($F64$atan($dir$y)($dir$x)))))))))))));
  var $F64$Segment$new = ($a=>($b=>($new=>$new($a)($b))));
  var $F64$V3$polygon_to_segments$nil = ($pos=>($dir=>($pt_a=>($pt_0=>$pt_0($List$nil)(($pt_0$value=>$pt_a($List$nil)(($pt_a$value=>($p0=>($p1=>($sg=>$List$cons($sg)($List$nil))($F64$Segment$new($p0)($p1)))($F64$V3$polygon_to_segments$transform($pos)($dir)($pt_0$value)))($F64$V3$polygon_to_segments$transform($pos)($dir)($pt_a$value))))))))));
  var $Maybe$some = ($value=>($=>($some=>$some($value))));
  var $Maybe = ($A=>(void 0));
  var $F64$V3$polygon_to_segments$cons = ($pos=>($dir=>($pt_b=>($segs=>($pt_a=>($pt_0=>$pt_a($segs($Maybe$some($pt_b))($Maybe$some($pt_b)))(($pt_a$value=>($pt_0=>($p0=>($p1=>($sg=>$List$cons($sg)($segs($Maybe$some($pt_b))($pt_0)))($F64$Segment$new($p0)($p1)))($F64$V3$polygon_to_segments$transform($pos)($dir)($pt_b)))($F64$V3$polygon_to_segments$transform($pos)($dir)($pt_a$value)))($pt_0($Maybe$some($pt_b))(($pt_0$value=>$pt_0)))))))))));
  var $Maybe$none = ($none=>($=>$none));
  var $F64$V3$polygon_to_segments = ($pos=>($dir=>($pts=>$List$fold($F64$V3$polygon_to_segments$nil($pos)($dir))($F64$V3$polygon_to_segments$cons($pos)($dir))($pts)($Maybe$none)($Maybe$none))));
  var $Cmp$ltn = ($ltn=>($eql=>($gtn=>$ltn)));
  var $Cmp$gtn = ($ltn=>($eql=>($gtn=>$gtn)));
  var $Word$cmp$aux = ($a=>($b=>($c=>$a(($b=>$c))(($a$pred=>($b=>$b(($a$pred=>$c))(($b$pred=>($a$pred=>$Word$cmp$aux($a$pred)($b$pred)($c))))(($b$pred=>($a$pred=>$Word$cmp$aux($a$pred)($b$pred)($Cmp$ltn))))($a$pred))))(($a$pred=>($b=>$b(($a$pred=>$c))(($b$pred=>($a$pred=>$Word$cmp$aux($a$pred)($b$pred)($Cmp$gtn))))(($b$pred=>($a$pred=>$Word$cmp$aux($a$pred)($b$pred)($c))))($a$pred))))($b))));
  var $Cmp$eql = ($ltn=>($eql=>($gtn=>$eql)));
  var $Word$cmp = ($a=>($b=>$Word$cmp$aux($a)($b)($Cmp$eql)));
  var $Bool$false = inst_bool(($t=>($f=>$f)));
  var $Bool$true = inst_bool(($t=>($f=>$t)));
  var $Word$eql = ($a=>($b=>$Word$cmp($a)($b)($Bool$false)($Bool$true)($Bool$false)));
  var $Nat$succ = ($n=>inst_nat(($z=>($s=>$s($n)))));
  var $Nat$zero = inst_nat(($z=>($s=>$z)));
  var $Nat$0 = $Nat$zero;
  var $Nat$1 = $Nat$succ($Nat$0);
  var $Nat$2 = $Nat$succ($Nat$1);
  var $Nat$3 = $Nat$succ($Nat$2);
  var $Nat$4 = $Nat$succ($Nat$3);
  var $Nat$5 = $Nat$succ($Nat$4);
  var $Nat$6 = $Nat$succ($Nat$5);
  var $Nat$7 = $Nat$succ($Nat$6);
  var $Nat$8 = $Nat$succ($Nat$7);
  var $Nat$9 = $Nat$succ($Nat$8);
  var $Nat$10 = $Nat$succ($Nat$9);
  var $Nat$11 = $Nat$succ($Nat$10);
  var $Nat$12 = $Nat$succ($Nat$11);
  var $Nat$13 = $Nat$succ($Nat$12);
  var $Nat$14 = $Nat$succ($Nat$13);
  var $Nat$15 = $Nat$succ($Nat$14);
  var $Nat$16 = $Nat$succ($Nat$15);
  var $Nat$17 = $Nat$succ($Nat$16);
  var $Nat$18 = $Nat$succ($Nat$17);
  var $Nat$19 = $Nat$succ($Nat$18);
  var $Nat$20 = $Nat$succ($Nat$19);
  var $Nat$21 = $Nat$succ($Nat$20);
  var $Nat$22 = $Nat$succ($Nat$21);
  var $Nat$23 = $Nat$succ($Nat$22);
  var $Nat$24 = $Nat$succ($Nat$23);
  var $Nat$25 = $Nat$succ($Nat$24);
  var $Nat$26 = $Nat$succ($Nat$25);
  var $Nat$27 = $Nat$succ($Nat$26);
  var $Nat$28 = $Nat$succ($Nat$27);
  var $Nat$29 = $Nat$succ($Nat$28);
  var $Nat$30 = $Nat$succ($Nat$29);
  var $Nat$31 = $Nat$succ($Nat$30);
  var $Nat$32 = $Nat$succ($Nat$31);
  var $Nat$33 = $Nat$succ($Nat$32);
  var $Nat$34 = $Nat$succ($Nat$33);
  var $Nat$35 = $Nat$succ($Nat$34);
  var $Nat$36 = $Nat$succ($Nat$35);
  var $Nat$37 = $Nat$succ($Nat$36);
  var $Nat$38 = $Nat$succ($Nat$37);
  var $Nat$39 = $Nat$succ($Nat$38);
  var $Nat$40 = $Nat$succ($Nat$39);
  var $Nat$41 = $Nat$succ($Nat$40);
  var $Nat$42 = $Nat$succ($Nat$41);
  var $Nat$43 = $Nat$succ($Nat$42);
  var $Nat$44 = $Nat$succ($Nat$43);
  var $Nat$45 = $Nat$succ($Nat$44);
  var $Nat$46 = $Nat$succ($Nat$45);
  var $Nat$47 = $Nat$succ($Nat$46);
  var $Nat$48 = $Nat$succ($Nat$47);
  var $Nat$49 = $Nat$succ($Nat$48);
  var $Nat$50 = $Nat$succ($Nat$49);
  var $Nat$51 = $Nat$succ($Nat$50);
  var $Nat$52 = $Nat$succ($Nat$51);
  var $Nat$53 = $Nat$succ($Nat$52);
  var $Nat$54 = $Nat$succ($Nat$53);
  var $Nat$55 = $Nat$succ($Nat$54);
  var $Nat$56 = $Nat$succ($Nat$55);
  var $Nat$57 = $Nat$succ($Nat$56);
  var $Nat$58 = $Nat$succ($Nat$57);
  var $Nat$59 = $Nat$succ($Nat$58);
  var $Nat$60 = $Nat$succ($Nat$59);
  var $Nat$61 = $Nat$succ($Nat$60);
  var $Nat$62 = $Nat$succ($Nat$61);
  var $Nat$63 = $Nat$succ($Nat$62);
  var $Nat$64 = $Nat$succ($Nat$63);
  var $F64$eql = ($x=>($y=>elim_f64($x)(($x$word=>elim_f64($y)(($y$word=>$Word$eql($x$word)($y$word)))))));
  var $Bool$and = a=>b=>a&&b;
  var $F64$V3$eql = ($a=>($b=>$a(($a$x=>($a$y=>($a$z=>$b(($b$x=>($b$y=>($b$z=>($same_x=>($same_y=>($same_z=>$Bool$and($same_x)($Bool$and($same_y)($same_z)))($F64$eql($a$z)($b$z)))($F64$eql($a$y)($b$y)))($F64$eql($a$x)($b$x))))))))))));
  var $F64$V3$sub = ($a=>($b=>$a(($a$x=>($a$y=>($a$z=>$b(($b$x=>($b$y=>($b$z=>($c$x=>($c$y=>($c$z=>$F64$V3$new($c$x)($c$y)($c$z))($F64$sub($a$z)($b$z)))($F64$sub($a$y)($b$y)))($F64$sub($a$x)($a$x))))))))))));
  var $F64$new = ($a=>inst_f64(($f64=>$f64($a))));
  var $Word = ($size=>(void 0));
  var $Word$nil = ($we=>($w0=>($w1=>$we)));
  var $Word$0 = ($wo=>($we=>($w0=>($w1=>$w0($wo)))));
  var $Bits$nil = inst_bits(($be=>($b0=>($b1=>$be))));
  var $Word$1 = ($wo=>($we=>($w0=>($w1=>$w1($wo)))));
  var $Word$from_bits = ($size=>($bits=>elim_nat($size)($Word$nil)(($size$pred=>elim_bits($bits)($Word$0($Word$from_bits($size$pred)($Bits$nil)))(($bits$pred=>$Word$0($Word$from_bits($size$pred)($bits$pred))))(($bits$pred=>$Word$1($Word$from_bits($size$pred)($bits$pred))))))));
  var $U16$eql = a=>b=>a===b;
  var $Char$parse$type = ($str=>(void 0));
  var $Unit$new = inst_unit(($unit=>$unit));
  var $Char$parse = ($str=>elim_string($str)($Unit$new)(($str$head=>($str$tail=>$str$head))));
  var $String$cons = ($head=>($tail=>inst_string(($strnil=>($strcons=>$strcons($head)($tail))))));
  var $U16$new = ($a=>inst_u16(($u16=>$u16($a))));
  var $Char$new = ($b0=>($b1=>($b2=>($b3=>($b4=>($b5=>($b6=>($b7=>($b8=>($b9=>($bA=>($bB=>($bC=>($bD=>($bE=>($bF=>($kF=>($kE=>($kD=>($kC=>($kB=>($kA=>($k9=>($k8=>($k7=>($k6=>($k5=>($k4=>($k3=>($k2=>($k1=>($k0=>($k_=>$U16$new($k0($k1($k2($k3($k4($k5($k6($k7($k8($k9($kA($kB($kC($kD($kE($kF($k_))))))))))))))))))($Word$nil))($bF($Word$0)($Word$1)))($bE($Word$0)($Word$1)))($bD($Word$0)($Word$1)))($bC($Word$0)($Word$1)))($bB($Word$0)($Word$1)))($bA($Word$0)($Word$1)))($b9($Word$0)($Word$1)))($b8($Word$0)($Word$1)))($b7($Word$0)($Word$1)))($b6($Word$0)($Word$1)))($b5($Word$0)($Word$1)))($b4($Word$0)($Word$1)))($b3($Word$0)($Word$1)))($b2($Word$0)($Word$1)))($b1($Word$0)($Word$1)))($b0($Word$0)($Word$1))))))))))))))))));
  var $Bit$0 = ($o=>($i=>$o));
  var $Bit$1 = ($o=>($i=>$i));
  var $String$nil = inst_string(($strnil=>($strcons=>$strnil)));
  var $Bits$1 = ($bs=>inst_bits(($be=>($b0=>($b1=>$b1($bs))))));
  var $Bits$0 = ($bs=>inst_bits(($be=>($b0=>($b1=>$b0($bs))))));
  var $Bits$from_string = ($str=>elim_string($str)($Bits$nil)(($str$head=>($str$tail=>elim_bool($U16$eql($str$head)($Char$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$nil))))(($=>$Bits$1($Bits$from_string($str$tail))))(($=>$Bits$0($Bits$from_string($str$tail))))($Unit$new)))));
  var $F64$parse_binary = ($str=>$F64$new($Word$from_bits($Nat$64)($Bits$from_string($str))));
  var $F64$0 = $F64$parse_binary($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  var $F64$div = a=>b=>a/b;
  var $F64$1 = $F64$parse_binary($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  var $F64$pow = a=>b=>a**b;
  var $F64$V3$len = ($v=>$v(($v$x=>($v$y=>($v$z=>($sqr=>($sqr=>($sqr=>($sqr=>($expo=>($sqr=>$sqr)($F64$pow($sqr)($expo)))($F64$div($F64$1)($F64$add($F64$1)($F64$1))))($F64$add($sqr)($F64$mul($v$z)($v$z))))($F64$add($sqr)($F64$mul($v$y)($v$y))))($F64$add($sqr)($F64$mul($v$x)($v$x))))($F64$0))))));
  var $F64$V3$norm = ($v=>$v(($v$x=>($v$y=>($v$z=>($len=>($new_x=>($new_y=>($new_z=>$F64$V3$new($new_x)($new_y)($new_z))($F64$div($v$z)($len)))($F64$div($v$y)($len)))($F64$div($v$x)($len)))($F64$V3$len($v)))))));
  var $F64$V3$look_at = ($a=>($b=>($c=>$a(($a$x=>($a$y=>($a$z=>$b(($a$x=>($a$y=>($a$z=>$c(($a$x=>($a$y=>($a$z=>($a_eql_b=>($diff=>($normdiff=>elim_bool($a_eql_b)($normdiff)($c))($F64$V3$norm($diff)))($F64$V3$sub($b)($a)))($F64$V3$eql($a)($b)))))))))))))))));
  var $List$find = ($cond=>($xs=>$xs($Maybe$none)(($head=>($tail=>elim_bool($cond($head))($Maybe$some($head))($List$find($cond)($tail)))))));
  var $TaelinArena$Game$get_thing_pid = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$pid))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_by_pid$cond = ($pid=>($thi=>($thi$pid=>$F64$eql($pid)($thi$pid))($TaelinArena$Game$get_thing_pid($thi))));
  var $TaelinArena$Game$get_thing_by_pid = ($pid=>($gm=>$gm(($gm$stage=>$List$find($TaelinArena$Game$get_thing_by_pid$cond($pid))($gm$stage)))));
  var $TaelinArena$Game$get_thing_pos = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$pos))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_position_by_pid = ($pid=>($gm=>$TaelinArena$Game$get_thing_by_pid($pid)($gm)($F64$V3$new($F64$0)($F64$0)($F64$0))(($found=>$TaelinArena$Game$get_thing_pos($found)))));
  var $List$map = ($fn=>($list=>$list($List$nil)(($list$head=>($list$tail=>$List$cons($fn($list$head))($List$map($fn)($list$tail)))))));
  var $TaelinArena$Game$Game$new = ($stage=>($new=>$new($stage)));
  var $TaelinArena$Game$map_stage = ($fn=>($gm=>$gm(($gm$stage=>($new_stage=>$TaelinArena$Game$Game$new($new_stage))($List$map($fn)($gm$stage))))));
  var $TaelinArena$Game$Command$new = ($pid=>($inp=>($new=>$new($pid)($inp))));
  var $TaelinArena$Game$Input$sdir = ($dir=>($sdir=>($key0=>($key1=>($key2=>($key3=>($key4=>($key5=>($cmsg=>$sdir($dir))))))))));
  var $TaelinArena$Game$Input$key0 = ($pos=>($sdir=>($key0=>($key1=>($key2=>($key3=>($key4=>($key5=>($cmsg=>$key0($pos))))))))));
  var $TaelinArena$Game$Input$key1 = ($pos=>($sdir=>($key0=>($key1=>($key2=>($key3=>($key4=>($key5=>($cmsg=>$key1($pos))))))))));
  var $TaelinArena$Game$Input$key2 = ($pos=>($sdir=>($key0=>($key1=>($key2=>($key3=>($key4=>($key5=>($cmsg=>$key2($pos))))))))));
  var $TaelinArena$Game$Input$key3 = ($pos=>($sdir=>($key0=>($key1=>($key2=>($key3=>($key4=>($key5=>($cmsg=>$key3($pos))))))))));
  var $TaelinArena$Game$Input$key4 = ($pos=>($sdir=>($key0=>($key1=>($key2=>($key3=>($key4=>($key5=>($cmsg=>$key4($pos))))))))));
  var $TaelinArena$Game$Input$key5 = ($pos=>($sdir=>($key0=>($key1=>($key2=>($key3=>($key4=>($key5=>($cmsg=>$key5($pos))))))))));
  var $TaelinArena$Game$get_thing_buf = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$buf))))))))))))))))))))))))))));
  var $TaelinArena$Game$is_silenced = ($self=>($self$buf=>($is_silenced=>($found_buf=>$found_buf($Bool$false)(($value=>$Bool$true)))($List$find($is_silenced)($self$buf)))(($buff=>$buff(($buff$dur=>($buff$val=>$Bool$false)))(($buff$dur=>($buff$val=>$Bool$false)))(($buff$dur=>($buff$val=>$Bool$false)))(($buff$dur=>$Bool$true))(($buff$dur=>$Bool$false))(($buff$dur=>$Bool$true)))))($TaelinArena$Game$get_thing_buf($self)));
  var $TaelinArena$Game$is_stunned = ($self=>($self$buf=>($is_stunned=>($found_buf=>$found_buf($Bool$false)(($value=>$Bool$true)))($List$find($is_stunned)($self$buf)))(($buff=>$buff(($buff$dur=>($buff$val=>$Bool$false)))(($buff$dur=>($buff$val=>$Bool$false)))(($buff$dur=>($buff$val=>$Bool$false)))(($buff$dur=>$Bool$false))(($buff$dur=>$Bool$false))(($buff$dur=>$Bool$true)))))($TaelinArena$Game$get_thing_buf($self)));
  var $TaelinArena$Game$get_thing_act = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$act))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_trg = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$trg))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_tik = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$tik))))))))))))))))))))))))))));
  var $TaelinArena$Game$Thing$new = ($fun=>($pid=>($mid=>($act=>($sid=>($stt=>($nam=>($lit=>($tik=>($pos=>($mov=>($bst=>($pad=>($dir=>($trg=>($vel=>($box=>($wei=>($mhp=>($dmg=>($knk=>($buf=>($chi=>($hit=>($rst=>($die=>($new=>$new($fun)($pid)($mid)($act)($sid)($stt)($nam)($lit)($tik)($pos)($mov)($bst)($pad)($dir)($trg)($vel)($box)($wei)($mhp)($dmg)($knk)($buf)($chi)($hit)($rst)($die))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_act = ($thi=>($new_act=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($new_act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $Bool$eql = ($a=>($b=>elim_bool($a)(elim_bool($b)($Bool$true)($Bool$false))(elim_bool($b)($Bool$false)($Bool$true))));
  var $Bool$if = x=>ct=>cf=>x?ct:cf;
  var $TaelinArena$Game$set_thing_trg = ($thi=>($new_trg=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($new_trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_tik = ($thi=>($new_tik=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($new_tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$init_act = ($self=>($new_act=>($new_trg=>($self$act=>($self$trg=>($self$tik=>($act_eql_0=>($self=>($self=>($self=>$self)($TaelinArena$Game$set_thing_tik($self)($Bool$if($act_eql_0)($F64$0)($self$tik))))($TaelinArena$Game$set_thing_trg($self)($Bool$if($act_eql_0)($new_trg)($self$trg))))($TaelinArena$Game$set_thing_act($self)($Bool$if($act_eql_0)($new_act)($self$act))))($F64$eql($self$act)($F64$0)))($TaelinArena$Game$get_thing_tik($self)))($TaelinArena$Game$get_thing_trg($self)))($TaelinArena$Game$get_thing_act($self)))));
  var $TaelinArena$Game$set_thing_pad = ($thi=>($new_pad=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($new_pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $F64$2 = $F64$parse_binary($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  var $F64$parse = $F64$parse;
  var $TaelinArena$Game$with_thing$effect = ($pid=>($fn=>($thi=>($thi$pid=>elim_bool($F64$eql($pid)($thi$pid))($fn($thi))($thi))($TaelinArena$Game$get_thing_pid($thi)))));
  var $TaelinArena$Game$with_thing = ($pid=>($fn=>($gm=>$TaelinArena$Game$map_stage($TaelinArena$Game$with_thing$effect($pid)($fn))($gm))));
  var $TaelinArena$exec_command = ($cmd=>($gm=>$cmd(($cmd$pid=>($cmd$inp=>($fn=>$TaelinArena$Game$with_thing($cmd$pid)($fn)($gm))(($this=>($inp=>($is_silenced=>($is_stunned=>elim_bool($is_stunned)($inp(($sdir$dir=>$TaelinArena$Game$init_act($this)($F64$0)($sdir$dir)))(($key0$pos=>$this))(($key1$pos=>$this))(($key2$pos=>$this))(($key3$pos=>$this))(($key4$pos=>$this))(($key5$pos=>$this))(($cmsg$txt=>$this)))(elim_bool($is_silenced)($inp(($sdir$dir=>$TaelinArena$Game$set_thing_pad($this)($sdir$dir)))(($key0$pos=>$this))(($key1$pos=>$this))(($key2$pos=>$this))(($key3$pos=>$this))(($key4$pos=>$this))(($key5$pos=>$this))(($cmsg$txt=>$this)))($inp(($sdir$dir=>$TaelinArena$Game$set_thing_pad($this)($sdir$dir)))(($key0$pos=>$TaelinArena$Game$init_act($this)($F64$1)($key0$pos)))(($key1$pos=>$TaelinArena$Game$init_act($this)($F64$2)($key1$pos)))(($key2$pos=>$TaelinArena$Game$init_act($this)($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$1)($Bit$1))($String$nil)))($key2$pos)))(($key3$pos=>$TaelinArena$Game$init_act($this)($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$0)($Bit$0))($String$nil)))($key3$pos)))(($key4$pos=>$TaelinArena$Game$init_act($this)($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$0)($Bit$1))($String$nil)))($key4$pos)))(($key5$pos=>$TaelinArena$Game$init_act($this)($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$1)($Bit$0))($String$nil)))($key5$pos)))(($cmsg$txt=>$this)))))($TaelinArena$Game$is_stunned($this)))($TaelinArena$Game$is_silenced($this)))($cmd$inp))))))));
  var $TaelinArena$Game$set_thing_fun = ($thi=>($new_fun=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($new_fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_sid = ($thi=>($new_sid=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($new_sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_pid = ($thi=>($new_pid=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($new_pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_pos = ($thi=>($new_pos=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($new_pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_nam = ($thi=>($new_nam=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($new_nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_dir = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$dir))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_box = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$box))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_sid = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$sid))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_hit = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$hit))))))))))))))))))))))))))));
  var $F64$sqrt = ($n=>$F64$pow($n)($F64$div($F64$1)($F64$2)));
  var $F64$V3$sqr_dist = ($a=>($b=>$a(($a$x=>($a$y=>($a$z=>$b(($b$x=>($b$y=>($b$z=>($two=>($x_diff=>($y_diff=>($z_diff=>$F64$add($x_diff)($F64$add($y_diff)($z_diff)))($F64$pow($F64$sub($a$z)($b$z))($two)))($F64$pow($F64$sub($a$y)($b$y))($two)))($F64$pow($F64$sub($a$x)($b$x))($two)))($F64$add($F64$1)($F64$1))))))))))));
  var $F64$V3$dist = ($a=>($b=>$F64$sqrt($F64$V3$sqr_dist($a)($b))));
  var $Word$ltn = ($a=>($b=>$Word$cmp($a)($b)($Bool$true)($Bool$false)($Bool$false)));
  var $F64$cmp = ($a=>($b=>elim_f64($a)(($a$word=>elim_f64($b)(($b$word=>elim_bool($F64$eql($a)($b))($Cmp$eql)(elim_bool($Word$ltn($a$word)($b$word))($Cmp$ltn)($Cmp$gtn))))))));
  var $F64$ltn = ($a=>($b=>$F64$cmp($a)($b)($Bool$true)($Bool$false)($Bool$false)));
  var $F64$V3$scale = ($k=>($v=>$v(($v$x=>($v$y=>($v$z=>($new_x=>($new_y=>($new_z=>$F64$V3$new($new_x)($new_y)($new_z))($F64$mul($k)($v$z)))($F64$mul($k)($v$y)))($F64$mul($k)($v$x))))))));
  var $F64$max = $F64$max;
  var $F64$min = $F64$min;
  var $F64$V3$point_segment_sqrdist = ($p=>($s=>$p(($p$x=>($p$y=>($p$z=>$s(($a=>($b=>$a(($a$x=>($a$y=>($a$z=>$b(($b$x=>($b$y=>($b$z=>($ab_x_diff_sqrd=>($ab_y_diff_sqrd=>($pa_x_diff=>($pa_y_diff=>($ba_x_diff=>($ba_y_diff=>($l=>($t=>($t=>($t=>($d=>($t_times_ba_x_diff=>($t_times_ba_y_diff=>($k=>($d=>($k=>($d=>$d)($F64$add($d)($k)))($F64$pow($F64$sub($p$y)($F64$add($a$y)($t_times_ba_y_diff)))($F64$2)))($F64$add($d)($k)))($F64$pow($F64$sub($p$x)($F64$add($a$x)($t_times_ba_x_diff)))($F64$2)))($F64$mul($t)($ba_y_diff)))($F64$mul($t)($ba_x_diff)))($F64$0))($F64$max($F64$0)($F64$min($F64$1)($t))))($F64$div($t)($l)))($F64$add($F64$mul($pa_x_diff)($ba_x_diff))($F64$mul($pa_y_diff)($ba_y_diff))))($F64$add($ab_x_diff_sqrd)($ab_y_diff_sqrd)))($F64$sub($b$y)($a$y)))($F64$sub($b$x)($a$x)))($F64$sub($p$y)($a$y)))($F64$sub($p$x)($a$x)))($F64$pow($F64$sub($a$y)($b$y))($F64$2)))($F64$pow($F64$sub($a$x)($b$x))($F64$2)))))))))))))))))));
  var $F64$V3$point_segment_dist = ($p=>($s=>$F64$sqrt($F64$V3$point_segment_sqrdist($p)($s))));
  var $F64$V3$rot_90 = ($v=>$v(($v$x=>($v$y=>($v$z=>$F64$V3$new($v$y)($F64$sub($F64$0)($v$x))($v$z))))));
  var $TaelinArena$collide_with = ($a_pos=>($a_dir=>($a_box=>($b_pos=>($b_dir=>($b_box=>($none=>$a_box($none)(($a_box$rad=>$b_box($none)(($b_box$rad=>($dst=>($rad=>($if_condition=>$Bool$if($if_condition)(($out_dir=>($out_vec=>$Maybe$some($out_vec))($F64$V3$scale($F64$sub($rad)($dst))($out_dir)))($F64$V3$norm($F64$V3$sub($a_pos)($b_pos))))($none))($Bool$and($F64$ltn($F64$0)($dst))($F64$ltn($dst)($rad))))($F64$add($a_box$rad)($b_box$rad)))($F64$V3$dist($a_pos)($b_pos))))(($b_box$pts=>($cons=>($segs=>$List$fold($none)($cons)($segs))($F64$V3$polygon_to_segments($b_pos)($b_dir)($b_box$pts)))(($segment=>($result=>$result($segment(($segment$a=>($segment$b=>($dst=>($rad=>$Bool$if($F64$ltn($dst)($rad))(($out_dir=>($out_vec=>$Maybe$some($out_vec))($F64$V3$scale($F64$sub($rad)($dst))($out_dir)))($F64$V3$rot_90($F64$V3$norm($F64$V3$sub($segment$a)($segment$b)))))($none))($a_box$rad))($F64$V3$point_segment_dist($a_pos)($segment))))))(($result$value=>$Maybe$some($result$value))))))))))(($a_box$pts=>$none)))($Maybe$none)))))));
  var $TaelinArena$Game$get_thing_dmg = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$dmg))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_dmg = ($thi=>($new_dmg=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($new_dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $Pair$new = ($a=>($b=>($pair=>$pair($a)($b))));
  var $Pair = ($A=>($B=>(void 0)));
  var $F64$Ordering$EQ = ($F64$Ordering$LT=>($F64$Ordering$EQ=>($F64$Ordering$GT=>$F64$Ordering$EQ)));
  var $F64$Ordering$GT = ($F64$Ordering$LT=>($F64$Ordering$EQ=>($F64$Ordering$GT=>$F64$Ordering$GT)));
  var $F64$Ordering$LT = ($F64$Ordering$LT=>($F64$Ordering$EQ=>($F64$Ordering$GT=>$F64$Ordering$LT)));
  var $F64$compare_numbers = ($a=>($b=>$Bool$if($F64$eql($a)($b))($F64$Ordering$EQ)($Bool$if($F64$ltn($b)($a))($F64$Ordering$GT)($F64$Ordering$LT))));
  var $TaelinArena$Game$Buff$shielded = ($dur=>($val=>($shielded=>($slowed=>($hasted=>($silenced=>($rooted=>($stuned=>$shielded($dur)($val)))))))));
  var $TaelinArena$Game$use_shields = ($buff=>($acc=>$acc(($acc$fst=>($acc$snd=>$buff(($buff$dur=>($buff$val=>$Bool$if($F64$eql($acc$fst)($F64$0))($acc)(($compare=>$compare(($remaining_shield_val=>($remaining_buf=>$Pair$new($F64$0)($remaining_buf))($List$cons($TaelinArena$Game$Buff$shielded($buff$dur)($remaining_shield_val))($acc$snd)))($F64$sub($buff$val)($acc$fst)))($Pair$new($F64$0)($acc$snd))(($remaining_dmg=>$Pair$new($remaining_dmg)($acc$snd))($F64$sub($acc$fst)($buff$val))))($F64$compare_numbers($acc$fst)($buff$val))))))(($buff$dur=>($buff$val=>$Pair$new($acc$fst)($List$cons($buff)($acc$snd)))))(($buff$dur=>($buff$val=>$Pair$new($acc$fst)($List$cons($buff)($acc$snd)))))(($buff$dur=>$Pair$new($acc$fst)($List$cons($buff)($acc$snd))))(($buff$dur=>$Pair$new($acc$fst)($List$cons($buff)($acc$snd))))(($buff$dur=>$Pair$new($acc$fst)($List$cons($buff)($acc$snd)))))))));
  var $Pair$fst = ($pair=>$pair(($a=>($b=>$a))));
  var $Pair$snd = ($pair=>$pair(($a=>($b=>$b))));
  var $TaelinArena$Game$set_thing_buf = ($thi=>($new_buf=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($new_buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$handle_shields = ($hit_dmg=>($self=>($self$buf=>($self$dmg=>($init_val=>($res=>($res$fst=>($res$snd=>($remaining_dmg=>($remaining_buf=>($self=>($self=>$self)($TaelinArena$Game$set_thing_buf($self)($remaining_buf)))($TaelinArena$Game$set_thing_dmg($self)($remaining_dmg)))($res$snd))($F64$add($res$fst)($self$dmg)))($Pair$snd($res)))($Pair$fst($res)))($List$fold($init_val)($TaelinArena$Game$use_shields)($self$buf)))($Pair$new($hit_dmg)($List$nil)))($TaelinArena$Game$get_thing_dmg($self)))($TaelinArena$Game$get_thing_buf($self))));
  var $TaelinArena$Game$set_thing_knk = ($thi=>($new_knk=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($new_knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$Buff$slowed = ($dur=>($val=>($shielded=>($slowed=>($hasted=>($silenced=>($rooted=>($stuned=>$slowed($dur)($val)))))))));
  var $TaelinArena$Game$Buff$hasted = ($dur=>($val=>($shielded=>($slowed=>($hasted=>($silenced=>($rooted=>($stuned=>$hasted($dur)($val)))))))));
  var $TaelinArena$Game$Buff$silenced = ($dur=>($shielded=>($slowed=>($hasted=>($silenced=>($rooted=>($stuned=>$silenced($dur))))))));
  var $TaelinArena$Game$Buff$rooted = ($dur=>($shielded=>($slowed=>($hasted=>($silenced=>($rooted=>($stuned=>$rooted($dur))))))));
  var $TaelinArena$Game$Buff$stuned = ($dur=>($shielded=>($slowed=>($hasted=>($silenced=>($rooted=>($stuned=>$stuned($dur))))))));
  var $TaelinArena$interact_with = ($this=>($that=>($this$pos=>($this$dir=>($this$box=>($this$buf=>($this$sid=>($that$pos=>($that$dir=>($that$box=>($that$hit=>($that$sid=>($out_vec=>($this=>($this=>$this)(($apply_hit=>$List$fold($this)($apply_hit)($that$hit))(($hit=>($this=>$hit(($hit$eff=>($hit$pos=>($hit$dir=>($hit$box=>($out_vec=>$out_vec($this)(($out_vec$value=>($compare_sid=>($apply_eff=>$List$fold($this)($apply_eff)($hit$eff))(($eff=>($this=>$eff(($eff$lif=>($this$dmg=>$Bool$if($compare_sid)($this)($TaelinArena$Game$set_thing_dmg($this)($F64$sub($this$dmg)($eff$lif))))($TaelinArena$Game$get_thing_dmg($this))))(($eff$dmg=>$Bool$if($compare_sid)($this)($TaelinArena$Game$handle_shields($eff$dmg)($this))))(($eff$mag=>$Bool$if($compare_sid)($this)(($v3=>($dir=>($vec=>$TaelinArena$Game$set_thing_knk($this)($vec))($F64$V3$scale($eff$mag)($dir)))($F64$V3$look_at($hit$pos)($this$pos)($v3)))($F64$V3$new($F64$1)($F64$0)($F64$0)))))(($eff$mag=>($eff$dir=>$Bool$if($compare_sid)($this)(($vec=>$TaelinArena$Game$set_thing_knk($this)($vec))($F64$V3$scale($eff$mag)($eff$dir))))))(($eff$dur=>($eff$val=>$Bool$if($compare_sid)($this)(($updated_buffs=>$TaelinArena$Game$set_thing_buf($this)($updated_buffs))($List$cons($TaelinArena$Game$Buff$slowed($eff$dur)($eff$val))($this$buf))))))(($eff$dur=>($eff$val=>$Bool$if($compare_sid)($this)(($updated_buffs=>$TaelinArena$Game$set_thing_buf($this)($updated_buffs))($List$cons($TaelinArena$Game$Buff$hasted($eff$dur)($eff$val))($this$buf))))))(($eff$dur=>($eff$val=>$Bool$if($compare_sid)($this)(($updated_buffs=>$TaelinArena$Game$set_thing_buf($this)($updated_buffs))($List$cons($TaelinArena$Game$Buff$shielded($eff$dur)($eff$val))($this$buf))))))(($eff$dur=>$Bool$if($compare_sid)($this)(($updated_buffs=>$TaelinArena$Game$set_thing_buf($this)($updated_buffs))($List$cons($TaelinArena$Game$Buff$silenced($eff$dur))($this$buf)))))(($eff$dur=>$Bool$if($compare_sid)($this)(($updated_buffs=>$TaelinArena$Game$set_thing_buf($this)($updated_buffs))($List$cons($TaelinArena$Game$Buff$rooted($eff$dur))($this$buf)))))(($eff$dur=>$Bool$if($compare_sid)($this)(($updated_buffs=>$TaelinArena$Game$set_thing_buf($this)($updated_buffs))($List$cons($TaelinArena$Game$Buff$stuned($eff$dur))($this$buf)))))(($eff$to_pos=>($eff$all=>$Bool$if($F64$eql($eff$all)($F64$1))($TaelinArena$Game$set_thing_pos($this)($eff$to_pos))($this))))))))($F64$eql($this$sid)($that$sid)))))($TaelinArena$collide_with($this$pos)($this$dir)($this$box)($hit$pos)($hit$dir)($hit$box))))))))))))($out_vec($this)(($out_vec$value=>($new_pos=>$TaelinArena$Game$set_thing_pos($this)($new_pos))($F64$V3$add($this$pos)($out_vec$value))))))($TaelinArena$collide_with($this$pos)($this$dir)($this$box)($that$pos)($that$dir)($that$box)))($TaelinArena$Game$get_thing_sid($this)))($TaelinArena$Game$get_thing_hit($that)))($TaelinArena$Game$get_thing_box($that)))($TaelinArena$Game$get_thing_dir($that)))($TaelinArena$Game$get_thing_pos($that)))($TaelinArena$Game$get_thing_sid($this)))($TaelinArena$Game$get_thing_buf($this)))($TaelinArena$Game$get_thing_box($this)))($TaelinArena$Game$get_thing_dir($this)))($TaelinArena$Game$get_thing_pos($this))));
  var $TaelinArena$Game$set_thing_hit = ($thi=>($new_hit=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($new_hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_rst = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$rst))))))))))))))))))))))))))));
  var $TaelinArena$Game$Hitbox$cbox = ($rad=>($nbox=>($cbox=>($pbox=>$cbox($rad)))));
  var $TaelinArena$Game$set_thing_vel = ($thi=>($new_vel=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($new_vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_bst = ($thi=>($new_bst=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($new_bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_box = ($thi=>($new_box=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($new_box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_lit = ($thi=>($new_lit=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($new_lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_rst = ($thi=>($new_rst=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($new_rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_bst = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$bst))))))))))))))))))))))))))));
  var $TaelinArena$Game$combine_mov_buffs = ($buff=>($i=>$buff(($buff$dur=>($buff$val=>$i)))(($buff$dur=>($buff$val=>$F64$mul($i)($buff$val))))(($buff$dur=>($buff$val=>$F64$mul($i)($buff$val))))(($buff$dur=>$i))(($buff$dur=>$F64$0))(($buff$dur=>$F64$0))));
  var $TaelinArena$Game$speed_multiplier_of = ($self=>($bst=>($buf=>$List$fold($bst)($TaelinArena$Game$combine_mov_buffs)($buf))($TaelinArena$Game$get_thing_buf($self)))($TaelinArena$Game$get_thing_bst($self)));
  var $TaelinArena$Game$get_thing_mov = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$mov))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_pad = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$pad))))))))))))))))))))))))))));
  var $TaelinArena$Game$update_buff_dur = ($self=>($self$buf=>($fn=>($new_buf=>$TaelinArena$Game$set_thing_buf($self)($new_buf))($List$fold($List$nil)($fn)($self$buf)))(($buff=>($acc=>$buff(($buff$dur=>($buff$val=>$Bool$if($F64$eql($buff$dur)($F64$0))($acc)($List$cons($TaelinArena$Game$Buff$shielded($F64$sub($buff$dur)($F64$1))($buff$val))($acc)))))(($buff$dur=>($buff$val=>$Bool$if($F64$eql($buff$dur)($F64$0))($acc)($List$cons($TaelinArena$Game$Buff$slowed($F64$sub($buff$dur)($F64$1))($buff$val))($acc)))))(($buff$dur=>($buff$val=>$Bool$if($F64$eql($buff$dur)($F64$0))($acc)($List$cons($TaelinArena$Game$Buff$hasted($F64$sub($buff$dur)($F64$1))($buff$val))($acc)))))(($buff$dur=>$Bool$if($F64$eql($buff$dur)($F64$0))($acc)($List$cons($TaelinArena$Game$Buff$silenced($F64$sub($buff$dur)($F64$1)))($acc))))(($buff$dur=>$Bool$if($F64$eql($buff$dur)($F64$0))($acc)($List$cons($TaelinArena$Game$Buff$rooted($F64$sub($buff$dur)($F64$1)))($acc))))(($buff$dur=>$Bool$if($F64$eql($buff$dur)($F64$0))($acc)($List$cons($TaelinArena$Game$Buff$stuned($F64$sub($buff$dur)($F64$1)))($acc))))))))($TaelinArena$Game$get_thing_buf($self)));
  var $TaelinArena$Game$get_thing_knk = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$knk))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_wei = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$wei))))))))))))))))))))))))))));
  var $F64$gtn = ($a=>($b=>$F64$cmp($a)($b)($Bool$false)($Bool$false)($Bool$true)));
  var $TaelinArena$Game$get_thing_fun = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$fun))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_chi = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$chi))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_chi = ($thi=>($new_chi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($new_chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $F64$V3$get_z = ($v=>$v(($v$x=>($v$y=>($v$z=>$v$z)))));
  var $F64$V3$get_y = ($v=>$v(($v$x=>($v$y=>($v$z=>$v$y)))));
  var $TaelinArena$Game$get_thing_mhp = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$mhp))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_die = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$die))))))))))))))))))))))))))));
  var $Bool$or = a=>b=>a||b;
  var $List$concat = ($as=>($bs=>$as($bs)(($head=>($tail=>$List$cons($head)($List$concat($tail)($bs)))))));
  var $TaelinArena$fold_with_context = ($i=>($f=>($xs=>($ys=>$xs($i)(($xs$head=>($xs$tail=>($ys2=>($rest=>$f($xs$head)($ys($xs$tail))($rest))($TaelinArena$fold_with_context($i)($f)($xs$tail)($ys2)))(($x=>$ys($List$cons($xs$head)($xs)))))))))));
  var $TaelinArena$exec_turn = ($gm=>($intr=>($tick=>($things_id=>($stage=>($stage_nil=>($new_stage=>$TaelinArena$Game$Game$new($new_stage))($TaelinArena$fold_with_context($stage_nil)($tick)($stage)($things_id)))($List$nil))($gm(($stage=>$stage))))(($x=>$x)))(($this=>($others=>($res=>($this=>($rst=>($this=>($boost=>($pos=>($mov=>($pad=>($this=>($this=>($pos=>($knk=>($wei=>($new_pos=>($knk_len=>($new_knk=>($this=>($this=>($fun=>($this=>($this=>($tik=>($this=>($this_chi=>($chi_init=>($chi_list=>($this=>($this_pos=>($pos_x=>($pos_y=>($pos_z=>($new_x=>($new_y=>($new_z=>($this=>($dmg=>($mhp=>($new_dmg=>($this=>($sid=>($dmg=>($mhp=>($no_hp=>($die=>($xs=>$List$concat($chi_list)($xs))(elim_bool($Bool$or($die)($no_hp))($res)($List$cons($this)($res))))($TaelinArena$Game$get_thing_die($this)))($Bool$false))($TaelinArena$Game$get_thing_mhp($this)))($TaelinArena$Game$get_thing_dmg($this)))($TaelinArena$Game$get_thing_sid($this)))($TaelinArena$Game$set_thing_dmg($this)($new_dmg)))($F64$max($F64$0)($F64$min($mhp)($dmg))))($TaelinArena$Game$get_thing_mhp($this)))($TaelinArena$Game$get_thing_dmg($this)))($TaelinArena$Game$set_thing_pos($this)($F64$V3$new($new_x)($new_y)($new_z))))($F64$min($F64$max($F64$0)($pos_z))($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$1)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$1)($Bit$0))($String$nil)))))))($F64$min($F64$max($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$1)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$nil))))))($pos_y))($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$1)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$nil)))))))($F64$min($F64$max($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$1)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$1)($Bit$0))($String$nil))))))($pos_x))($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$1)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$1)($Bit$0))($String$nil)))))))($F64$V3$get_z($this_pos)))($F64$V3$get_y($this_pos)))($F64$V3$get_z($this_pos)))($TaelinArena$Game$get_thing_pos($this)))($TaelinArena$Game$set_thing_chi($this)($List$nil)))($List$map($chi_init)($this_chi)))(($chi=>$TaelinArena$Game$get_thing_fun($chi)($chi))))($TaelinArena$Game$get_thing_chi($this)))($TaelinArena$Game$set_thing_tik($this)($F64$add($tik)($F64$1))))($TaelinArena$Game$get_thing_tik($this)))($List$fold($this)($intr)($others)))($fun($this)))($TaelinArena$Game$get_thing_fun($this)))($TaelinArena$Game$set_thing_knk($this)($new_knk)))($TaelinArena$Game$set_thing_pos($this)($new_pos)))(elim_bool($F64$gtn($knk_len)($F64$0))(($force=>$F64$V3$scale($force)($F64$V3$norm($knk)))($F64$max($F64$sub($knk_len)($wei))($F64$0)))($knk)))($F64$V3$len($knk)))($F64$V3$add($pos)($knk)))($TaelinArena$Game$get_thing_wei($this)))($TaelinArena$Game$get_thing_knk($this)))($TaelinArena$Game$get_thing_pos($this)))($TaelinArena$Game$update_buff_dur($this)))($TaelinArena$Game$set_thing_pos($this)($F64$V3$add($pos)($F64$V3$scale($F64$mul($mov)($boost))($pad)))))($TaelinArena$Game$get_thing_pad($this)))($TaelinArena$Game$get_thing_mov($this)))($TaelinArena$Game$get_thing_pos($this)))($TaelinArena$Game$speed_multiplier_of($this)))(elim_bool($rst)(($new_vel=>($new_bst=>($new_box=>($new_act=>($new_tik=>($new_lit=>($new_rst=>($this=>($this=>($this=>($this=>($this=>($this=>($this=>$this)($TaelinArena$Game$set_thing_rst($this)($new_rst)))($TaelinArena$Game$set_thing_lit($this)($new_lit)))($TaelinArena$Game$set_thing_tik($this)($new_tik)))($TaelinArena$Game$set_thing_act($this)($new_act)))($TaelinArena$Game$set_thing_box($this)($new_box)))($TaelinArena$Game$set_thing_bst($this)($new_bst)))($TaelinArena$Game$set_thing_vel($this)($new_vel)))($Bool$false))($List$nil))($F64$0))($F64$0))($TaelinArena$Game$Hitbox$cbox($F64$mul($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$1)($Bit$1))($String$nil)))($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$0)($Bit$0))($String$nil))))))($F64$1))($F64$V3$new($F64$0)($F64$0)($F64$0)))($this)))($TaelinArena$Game$get_thing_rst($this)))($TaelinArena$Game$set_thing_hit($this)($List$nil)))))))(($that=>($this=>$TaelinArena$interact_with($this)($that)))));
  var $Exports$new = ($new=>($add=>$new));
  var $Exports$TaelinArena = $Exports$add($List$nil)($Exports$add($List$cons)($Exports$add($F64$V3$polygon_to_segments)($Exports$add($F64$V3$look_at)($Exports$add($TaelinArena$Game$get_position_by_pid)($Exports$add($TaelinArena$Game$map_stage)($Exports$add($TaelinArena$Game$Command$new)($Exports$add($TaelinArena$Game$Input$sdir)($Exports$add($TaelinArena$Game$Input$key0)($Exports$add($TaelinArena$Game$Input$key1)($Exports$add($TaelinArena$Game$Input$key2)($Exports$add($TaelinArena$Game$Input$key3)($Exports$add($TaelinArena$Game$Input$key4)($Exports$add($TaelinArena$Game$Input$key5)($Exports$add($TaelinArena$exec_command)($Exports$add($TaelinArena$Game$Thing$new)($Exports$add($TaelinArena$Game$set_thing_fun)($Exports$add($TaelinArena$Game$set_thing_sid)($Exports$add($TaelinArena$Game$set_thing_pid)($Exports$add($TaelinArena$Game$set_thing_pos)($Exports$add($TaelinArena$Game$set_thing_nam)($Exports$add($TaelinArena$Game$Game$new)($Exports$add($TaelinArena$exec_turn)($Exports$new)))))))))))))))))))))));
  return {
    'Exports.add': $Exports$add,
    'List.nil': $List$nil,
    'List.cons': $List$cons,
    'List.fold': $List$fold,
    'List': $List,
    'F64.atan': $F64$atan,
    'F64.mul': $F64$mul,
    'F64.cos': $F64$cos,
    'F64.sin': $F64$sin,
    'F64.sub': $F64$sub,
    'F64.add': $F64$add,
    'F64.V3.new': $F64$V3$new,
    'F64.V3.add': $F64$V3$add,
    'F64.V3.polygon_to_segments.transform': $F64$V3$polygon_to_segments$transform,
    'F64.Segment.new': $F64$Segment$new,
    'F64.V3.polygon_to_segments.nil': $F64$V3$polygon_to_segments$nil,
    'Maybe.some': $Maybe$some,
    'Maybe': $Maybe,
    'F64.V3.polygon_to_segments.cons': $F64$V3$polygon_to_segments$cons,
    'Maybe.none': $Maybe$none,
    'F64.V3.polygon_to_segments': $F64$V3$polygon_to_segments,
    'Cmp.ltn': $Cmp$ltn,
    'Cmp.gtn': $Cmp$gtn,
    'Word.cmp.aux': $Word$cmp$aux,
    'Cmp.eql': $Cmp$eql,
    'Word.cmp': $Word$cmp,
    'Bool.false': $Bool$false,
    'Bool.true': $Bool$true,
    'Word.eql': $Word$eql,
    'Nat.succ': $Nat$succ,
    'Nat.zero': $Nat$zero,
    'Nat.0': $Nat$0,
    'Nat.1': $Nat$1,
    'Nat.2': $Nat$2,
    'Nat.3': $Nat$3,
    'Nat.4': $Nat$4,
    'Nat.5': $Nat$5,
    'Nat.6': $Nat$6,
    'Nat.7': $Nat$7,
    'Nat.8': $Nat$8,
    'Nat.9': $Nat$9,
    'Nat.10': $Nat$10,
    'Nat.11': $Nat$11,
    'Nat.12': $Nat$12,
    'Nat.13': $Nat$13,
    'Nat.14': $Nat$14,
    'Nat.15': $Nat$15,
    'Nat.16': $Nat$16,
    'Nat.17': $Nat$17,
    'Nat.18': $Nat$18,
    'Nat.19': $Nat$19,
    'Nat.20': $Nat$20,
    'Nat.21': $Nat$21,
    'Nat.22': $Nat$22,
    'Nat.23': $Nat$23,
    'Nat.24': $Nat$24,
    'Nat.25': $Nat$25,
    'Nat.26': $Nat$26,
    'Nat.27': $Nat$27,
    'Nat.28': $Nat$28,
    'Nat.29': $Nat$29,
    'Nat.30': $Nat$30,
    'Nat.31': $Nat$31,
    'Nat.32': $Nat$32,
    'Nat.33': $Nat$33,
    'Nat.34': $Nat$34,
    'Nat.35': $Nat$35,
    'Nat.36': $Nat$36,
    'Nat.37': $Nat$37,
    'Nat.38': $Nat$38,
    'Nat.39': $Nat$39,
    'Nat.40': $Nat$40,
    'Nat.41': $Nat$41,
    'Nat.42': $Nat$42,
    'Nat.43': $Nat$43,
    'Nat.44': $Nat$44,
    'Nat.45': $Nat$45,
    'Nat.46': $Nat$46,
    'Nat.47': $Nat$47,
    'Nat.48': $Nat$48,
    'Nat.49': $Nat$49,
    'Nat.50': $Nat$50,
    'Nat.51': $Nat$51,
    'Nat.52': $Nat$52,
    'Nat.53': $Nat$53,
    'Nat.54': $Nat$54,
    'Nat.55': $Nat$55,
    'Nat.56': $Nat$56,
    'Nat.57': $Nat$57,
    'Nat.58': $Nat$58,
    'Nat.59': $Nat$59,
    'Nat.60': $Nat$60,
    'Nat.61': $Nat$61,
    'Nat.62': $Nat$62,
    'Nat.63': $Nat$63,
    'Nat.64': $Nat$64,
    'F64.eql': $F64$eql,
    'Bool.and': $Bool$and,
    'F64.V3.eql': $F64$V3$eql,
    'F64.V3.sub': $F64$V3$sub,
    'F64.new': $F64$new,
    'Word': $Word,
    'Word.nil': $Word$nil,
    'Word.0': $Word$0,
    'Bits.nil': $Bits$nil,
    'Word.1': $Word$1,
    'Word.from_bits': $Word$from_bits,
    'U16.eql': $U16$eql,
    'Char.parse.type': $Char$parse$type,
    'Unit.new': $Unit$new,
    'Char.parse': $Char$parse,
    'String.cons': $String$cons,
    'U16.new': $U16$new,
    'Char.new': $Char$new,
    'Bit.0': $Bit$0,
    'Bit.1': $Bit$1,
    'String.nil': $String$nil,
    'Bits.1': $Bits$1,
    'Bits.0': $Bits$0,
    'Bits.from_string': $Bits$from_string,
    'F64.parse_binary': $F64$parse_binary,
    'F64.0': $F64$0,
    'F64.div': $F64$div,
    'F64.1': $F64$1,
    'F64.pow': $F64$pow,
    'F64.V3.len': $F64$V3$len,
    'F64.V3.norm': $F64$V3$norm,
    'F64.V3.look_at': $F64$V3$look_at,
    'List.find': $List$find,
    'TaelinArena.Game.get_thing_pid': $TaelinArena$Game$get_thing_pid,
    'TaelinArena.Game.get_thing_by_pid.cond': $TaelinArena$Game$get_thing_by_pid$cond,
    'TaelinArena.Game.get_thing_by_pid': $TaelinArena$Game$get_thing_by_pid,
    'TaelinArena.Game.get_thing_pos': $TaelinArena$Game$get_thing_pos,
    'TaelinArena.Game.get_position_by_pid': $TaelinArena$Game$get_position_by_pid,
    'List.map': $List$map,
    'TaelinArena.Game.Game.new': $TaelinArena$Game$Game$new,
    'TaelinArena.Game.map_stage': $TaelinArena$Game$map_stage,
    'TaelinArena.Game.Command.new': $TaelinArena$Game$Command$new,
    'TaelinArena.Game.Input.sdir': $TaelinArena$Game$Input$sdir,
    'TaelinArena.Game.Input.key0': $TaelinArena$Game$Input$key0,
    'TaelinArena.Game.Input.key1': $TaelinArena$Game$Input$key1,
    'TaelinArena.Game.Input.key2': $TaelinArena$Game$Input$key2,
    'TaelinArena.Game.Input.key3': $TaelinArena$Game$Input$key3,
    'TaelinArena.Game.Input.key4': $TaelinArena$Game$Input$key4,
    'TaelinArena.Game.Input.key5': $TaelinArena$Game$Input$key5,
    'TaelinArena.Game.get_thing_buf': $TaelinArena$Game$get_thing_buf,
    'TaelinArena.Game.is_silenced': $TaelinArena$Game$is_silenced,
    'TaelinArena.Game.is_stunned': $TaelinArena$Game$is_stunned,
    'TaelinArena.Game.get_thing_act': $TaelinArena$Game$get_thing_act,
    'TaelinArena.Game.get_thing_trg': $TaelinArena$Game$get_thing_trg,
    'TaelinArena.Game.get_thing_tik': $TaelinArena$Game$get_thing_tik,
    'TaelinArena.Game.Thing.new': $TaelinArena$Game$Thing$new,
    'TaelinArena.Game.set_thing_act': $TaelinArena$Game$set_thing_act,
    'Bool.eql': $Bool$eql,
    'Bool.if': $Bool$if,
    'TaelinArena.Game.set_thing_trg': $TaelinArena$Game$set_thing_trg,
    'TaelinArena.Game.set_thing_tik': $TaelinArena$Game$set_thing_tik,
    'TaelinArena.Game.init_act': $TaelinArena$Game$init_act,
    'TaelinArena.Game.set_thing_pad': $TaelinArena$Game$set_thing_pad,
    'F64.2': $F64$2,
    'F64.parse': $F64$parse,
    'TaelinArena.Game.with_thing.effect': $TaelinArena$Game$with_thing$effect,
    'TaelinArena.Game.with_thing': $TaelinArena$Game$with_thing,
    'TaelinArena.exec_command': $TaelinArena$exec_command,
    'TaelinArena.Game.set_thing_fun': $TaelinArena$Game$set_thing_fun,
    'TaelinArena.Game.set_thing_sid': $TaelinArena$Game$set_thing_sid,
    'TaelinArena.Game.set_thing_pid': $TaelinArena$Game$set_thing_pid,
    'TaelinArena.Game.set_thing_pos': $TaelinArena$Game$set_thing_pos,
    'TaelinArena.Game.set_thing_nam': $TaelinArena$Game$set_thing_nam,
    'TaelinArena.Game.get_thing_dir': $TaelinArena$Game$get_thing_dir,
    'TaelinArena.Game.get_thing_box': $TaelinArena$Game$get_thing_box,
    'TaelinArena.Game.get_thing_sid': $TaelinArena$Game$get_thing_sid,
    'TaelinArena.Game.get_thing_hit': $TaelinArena$Game$get_thing_hit,
    'F64.sqrt': $F64$sqrt,
    'F64.V3.sqr_dist': $F64$V3$sqr_dist,
    'F64.V3.dist': $F64$V3$dist,
    'Word.ltn': $Word$ltn,
    'F64.cmp': $F64$cmp,
    'F64.ltn': $F64$ltn,
    'F64.V3.scale': $F64$V3$scale,
    'F64.max': $F64$max,
    'F64.min': $F64$min,
    'F64.V3.point_segment_sqrdist': $F64$V3$point_segment_sqrdist,
    'F64.V3.point_segment_dist': $F64$V3$point_segment_dist,
    'F64.V3.rot_90': $F64$V3$rot_90,
    'TaelinArena.collide_with': $TaelinArena$collide_with,
    'TaelinArena.Game.get_thing_dmg': $TaelinArena$Game$get_thing_dmg,
    'TaelinArena.Game.set_thing_dmg': $TaelinArena$Game$set_thing_dmg,
    'Pair.new': $Pair$new,
    'Pair': $Pair,
    'F64.Ordering.EQ': $F64$Ordering$EQ,
    'F64.Ordering.GT': $F64$Ordering$GT,
    'F64.Ordering.LT': $F64$Ordering$LT,
    'F64.compare_numbers': $F64$compare_numbers,
    'TaelinArena.Game.Buff.shielded': $TaelinArena$Game$Buff$shielded,
    'TaelinArena.Game.use_shields': $TaelinArena$Game$use_shields,
    'Pair.fst': $Pair$fst,
    'Pair.snd': $Pair$snd,
    'TaelinArena.Game.set_thing_buf': $TaelinArena$Game$set_thing_buf,
    'TaelinArena.Game.handle_shields': $TaelinArena$Game$handle_shields,
    'TaelinArena.Game.set_thing_knk': $TaelinArena$Game$set_thing_knk,
    'TaelinArena.Game.Buff.slowed': $TaelinArena$Game$Buff$slowed,
    'TaelinArena.Game.Buff.hasted': $TaelinArena$Game$Buff$hasted,
    'TaelinArena.Game.Buff.silenced': $TaelinArena$Game$Buff$silenced,
    'TaelinArena.Game.Buff.rooted': $TaelinArena$Game$Buff$rooted,
    'TaelinArena.Game.Buff.stuned': $TaelinArena$Game$Buff$stuned,
    'TaelinArena.interact_with': $TaelinArena$interact_with,
    'TaelinArena.Game.set_thing_hit': $TaelinArena$Game$set_thing_hit,
    'TaelinArena.Game.get_thing_rst': $TaelinArena$Game$get_thing_rst,
    'TaelinArena.Game.Hitbox.cbox': $TaelinArena$Game$Hitbox$cbox,
    'TaelinArena.Game.set_thing_vel': $TaelinArena$Game$set_thing_vel,
    'TaelinArena.Game.set_thing_bst': $TaelinArena$Game$set_thing_bst,
    'TaelinArena.Game.set_thing_box': $TaelinArena$Game$set_thing_box,
    'TaelinArena.Game.set_thing_lit': $TaelinArena$Game$set_thing_lit,
    'TaelinArena.Game.set_thing_rst': $TaelinArena$Game$set_thing_rst,
    'TaelinArena.Game.get_thing_bst': $TaelinArena$Game$get_thing_bst,
    'TaelinArena.Game.combine_mov_buffs': $TaelinArena$Game$combine_mov_buffs,
    'TaelinArena.Game.speed_multiplier_of': $TaelinArena$Game$speed_multiplier_of,
    'TaelinArena.Game.get_thing_mov': $TaelinArena$Game$get_thing_mov,
    'TaelinArena.Game.get_thing_pad': $TaelinArena$Game$get_thing_pad,
    'TaelinArena.Game.update_buff_dur': $TaelinArena$Game$update_buff_dur,
    'TaelinArena.Game.get_thing_knk': $TaelinArena$Game$get_thing_knk,
    'TaelinArena.Game.get_thing_wei': $TaelinArena$Game$get_thing_wei,
    'F64.gtn': $F64$gtn,
    'TaelinArena.Game.get_thing_fun': $TaelinArena$Game$get_thing_fun,
    'TaelinArena.Game.get_thing_chi': $TaelinArena$Game$get_thing_chi,
    'TaelinArena.Game.set_thing_chi': $TaelinArena$Game$set_thing_chi,
    'F64.V3.get_z': $F64$V3$get_z,
    'F64.V3.get_y': $F64$V3$get_y,
    'TaelinArena.Game.get_thing_mhp': $TaelinArena$Game$get_thing_mhp,
    'TaelinArena.Game.get_thing_die': $TaelinArena$Game$get_thing_die,
    'Bool.or': $Bool$or,
    'List.concat': $List$concat,
    'TaelinArena.fold_with_context': $TaelinArena$fold_with_context,
    'TaelinArena.exec_turn': $TaelinArena$exec_turn,
    'Exports.new': $Exports$new,
    'Exports.TaelinArena': $Exports$TaelinArena,
  };
})();
console.log(module.exports['Exports.TaelinArena']);
➜  Moonad git:(183-TaelinArena) ✗ npm i -g formality-core  
/Users/maisa/.npm-global/bin/fm -> /Users/maisa/.npm-global/lib/node_modules/formality-core/bin/fm.js
/Users/maisa/.npm-global/bin/fmc -> /Users/maisa/.npm-global/lib/node_modules/formality-core/bin/fmc.js
/Users/maisa/.npm-global/bin/fmcjs -> /Users/maisa/.npm-global/lib/node_modules/formality-core/bin/fmcjs.js
/Users/maisa/.npm-global/bin/fmcio -> /Users/maisa/.npm-global/lib/node_modules/formality-core/bin/fmcio.js
/Users/maisa/.npm-global/bin/fmchs -> /Users/maisa/.npm-global/lib/node_modules/formality-core/bin/fmchs.js
+ formality-core@0.2.84
updated 1 package in 3.953s
➜  Moonad git:(183-TaelinArena) ✗ clea
zsh: command not found: clea
➜  Moonad git:(183-TaelinArena) ✗ clear

➜  Moonad git:(183-TaelinArena) ✗ fmcjs Exports.TaelinArena.fm 
Term 'Exports.TaelinArena.fm' not found.
➜  Moonad git:(183-TaelinArena) ✗ fmcjs Exports.TaelinArena   
module.exports = (function (){
  var F64 = new Float64Array(1);
  var U32 = new Uint32Array(F64.buffer);
  var F64_get = (x,i)=>((F64[0]=x),(i<32?(U32[0]>>>i)&1:(U32[1]>>>(i-32)&1)));
  var F64_set = (x,i)=>((F64[0]=x),(i<32?(U32[0]=U32[0]|(1<<i)):(U32[1]=U32[1]|(1<<(i-32)))),F64[0]);
  var inst_unit = x=>x(1);
  var elim_unit = x=>v=>v;
  var inst_bool = x=>x(true)(false);
  var elim_bool = x=>t=>f=>x?t:f;
  var inst_nat = x=>x(0n)(p=>1n+p);
  var elim_nat = x=>z=>s=>x===0n?z:s(x-1n);
  var inst_bits = x=>x('')(p=>p+'0')(p=>p+'1');
  var elim_bits = x=>be=>b0=>b1=>(x.length?(x[x.length-1]==='0'?b0(x.slice(0,-1)):b1(x.slice(0,-1))):be);
  var inst_u16 = x=>x(w=>(function R(x,k){return x(0)(p=>R(p,k*2))(p=>k+R(p,k*2))})(w,1));
  var elim_u16 = x=>u=>u((function R(i){return we=>w0=>w1=>i===16?we:((x>>>i)&1?w1:w0)(R(i+1))})(0));
  var inst_u32 = x=>x(w=>(function R(x,k){return x(0)(p=>R(p,k*2))(p=>k+R(p,k*2))})(w,1));
  var elim_u32 = x=>u=>u((function R(i){return we=>w0=>w1=>i===32?we:((x>>>i)&1?w1:w0)(R(i+1))})(0));
  var inst_u64 = x=>x(w=>(function R(x,k){return x(0n)(p=>R(p,k*2n))(p=>k+R(p,k*2n))})(w,1n));
  var elim_u64 = x=>u=>u((function R(i){return we=>w0=>w1=>i===64n?we:((x>>i)&1n?w1:w0)(R(i+1n))})(0n));
  var inst_f64 = x=>x(w=>(function R(x,i){return x(0)(p=>R(p,i+1))(p=>F64_set(R(p,i+1),i))})(w,0));
  var elim_f64 = x=>u=>u((function R(i){return we=>w0=>w1=>i===64?we:(F64_get(x,i)?w1:w0)(R(i+1))})(0));
  var inst_string = x=>x('')(h=>t=>String.fromCharCode(h)+t);
  var elim_string = x=>n=>c=>x===''?n:c(x.charCodeAt(0))(x.slice(1));
  var $Exports$add = ($x=>($xs=>($new=>($add=>$add($x)($xs($new)($add))))));
  var $List$nil = ($nil=>($cons=>$nil));
  var $List$cons = ($head=>($tail=>($nil=>($cons=>$cons($head)($tail)))));
  var $List$fold = ($nil=>($cons=>($list=>$list($nil)(($x=>($xs=>$cons($x)($List$fold($nil)($cons)($xs))))))));
  var $List = ($A=>(void 0));
  var $F64$atan = a=>Math.atan(a);
  var $F64$mul = a=>b=>a*b;
  var $F64$cos = a=>Math.cos(a);
  var $F64$sin = a=>Math.sin(a);
  var $F64$sub = a=>b=>a-b;
  var $F64$add = a=>b=>a+b;
  var $F64$V3$new = ($x=>($y=>($z=>($new=>$new($x)($y)($z)))));
  var $F64$V3$add = ($a=>($b=>$a(($a$x=>($a$y=>($a$z=>$b(($b$x=>($b$y=>($b$z=>($c$x=>($c$y=>($c$z=>$F64$V3$new($c$x)($c$y)($c$z))($F64$add($a$z)($b$z)))($F64$add($a$y)($b$y)))($F64$add($a$x)($a$x))))))))))));
  var $F64$V3$polygon_to_segments$transform = ($pos=>($dir=>($pnt=>$pnt(($pnt$x=>($pnt$y=>($pnt$z=>$dir(($dir$x=>($dir$y=>($dir$z=>($a=>($pnt_x_times_cos_a=>($pnt_y_times_sin_a=>($pnt_x_times_sin_a=>($pnt_y_times_cos_a=>($x=>($y=>$F64$V3$add($pos)($F64$V3$new($x)($y)($pnt$z)))($F64$add($pnt_x_times_sin_a)($pnt_y_times_cos_a)))($F64$sub($pnt_x_times_cos_a)($pnt_y_times_sin_a)))($F64$mul($pnt$y)($F64$cos($a))))($F64$mul($pnt$x)($F64$sin($a))))($F64$mul($pnt$y)($F64$sin($a))))($F64$mul($pnt$x)($F64$cos($a))))($F64$atan($dir$y)($dir$x)))))))))))));
  var $F64$Segment$new = ($a=>($b=>($new=>$new($a)($b))));
  var $F64$V3$polygon_to_segments$nil = ($pos=>($dir=>($pt_a=>($pt_0=>$pt_0($List$nil)(($pt_0$value=>$pt_a($List$nil)(($pt_a$value=>($p0=>($p1=>($sg=>$List$cons($sg)($List$nil))($F64$Segment$new($p0)($p1)))($F64$V3$polygon_to_segments$transform($pos)($dir)($pt_0$value)))($F64$V3$polygon_to_segments$transform($pos)($dir)($pt_a$value))))))))));
  var $Maybe$some = ($value=>($=>($some=>$some($value))));
  var $Maybe = ($A=>(void 0));
  var $F64$V3$polygon_to_segments$cons = ($pos=>($dir=>($pt_b=>($segs=>($pt_a=>($pt_0=>$pt_a($segs($Maybe$some($pt_b))($Maybe$some($pt_b)))(($pt_a$value=>($pt_0=>($p0=>($p1=>($sg=>$List$cons($sg)($segs($Maybe$some($pt_b))($pt_0)))($F64$Segment$new($p0)($p1)))($F64$V3$polygon_to_segments$transform($pos)($dir)($pt_b)))($F64$V3$polygon_to_segments$transform($pos)($dir)($pt_a$value)))($pt_0($Maybe$some($pt_b))(($pt_0$value=>$pt_0)))))))))));
  var $Maybe$none = ($none=>($=>$none));
  var $F64$V3$polygon_to_segments = ($pos=>($dir=>($pts=>$List$fold($F64$V3$polygon_to_segments$nil($pos)($dir))($F64$V3$polygon_to_segments$cons($pos)($dir))($pts)($Maybe$none)($Maybe$none))));
  var $Cmp$ltn = ($ltn=>($eql=>($gtn=>$ltn)));
  var $Cmp$gtn = ($ltn=>($eql=>($gtn=>$gtn)));
  var $Word$cmp$aux = ($a=>($b=>($c=>$a(($b=>$c))(($a$pred=>($b=>$b(($a$pred=>$c))(($b$pred=>($a$pred=>$Word$cmp$aux($a$pred)($b$pred)($c))))(($b$pred=>($a$pred=>$Word$cmp$aux($a$pred)($b$pred)($Cmp$ltn))))($a$pred))))(($a$pred=>($b=>$b(($a$pred=>$c))(($b$pred=>($a$pred=>$Word$cmp$aux($a$pred)($b$pred)($Cmp$gtn))))(($b$pred=>($a$pred=>$Word$cmp$aux($a$pred)($b$pred)($c))))($a$pred))))($b))));
  var $Cmp$eql = ($ltn=>($eql=>($gtn=>$eql)));
  var $Word$cmp = ($a=>($b=>$Word$cmp$aux($a)($b)($Cmp$eql)));
  var $Bool$false = inst_bool(($t=>($f=>$f)));
  var $Bool$true = inst_bool(($t=>($f=>$t)));
  var $Word$eql = ($a=>($b=>$Word$cmp($a)($b)($Bool$false)($Bool$true)($Bool$false)));
  var $Nat$succ = ($n=>inst_nat(($z=>($s=>$s($n)))));
  var $Nat$zero = inst_nat(($z=>($s=>$z)));
  var $Nat$0 = $Nat$zero;
  var $Nat$1 = $Nat$succ($Nat$0);
  var $Nat$2 = $Nat$succ($Nat$1);
  var $Nat$3 = $Nat$succ($Nat$2);
  var $Nat$4 = $Nat$succ($Nat$3);
  var $Nat$5 = $Nat$succ($Nat$4);
  var $Nat$6 = $Nat$succ($Nat$5);
  var $Nat$7 = $Nat$succ($Nat$6);
  var $Nat$8 = $Nat$succ($Nat$7);
  var $Nat$9 = $Nat$succ($Nat$8);
  var $Nat$10 = $Nat$succ($Nat$9);
  var $Nat$11 = $Nat$succ($Nat$10);
  var $Nat$12 = $Nat$succ($Nat$11);
  var $Nat$13 = $Nat$succ($Nat$12);
  var $Nat$14 = $Nat$succ($Nat$13);
  var $Nat$15 = $Nat$succ($Nat$14);
  var $Nat$16 = $Nat$succ($Nat$15);
  var $Nat$17 = $Nat$succ($Nat$16);
  var $Nat$18 = $Nat$succ($Nat$17);
  var $Nat$19 = $Nat$succ($Nat$18);
  var $Nat$20 = $Nat$succ($Nat$19);
  var $Nat$21 = $Nat$succ($Nat$20);
  var $Nat$22 = $Nat$succ($Nat$21);
  var $Nat$23 = $Nat$succ($Nat$22);
  var $Nat$24 = $Nat$succ($Nat$23);
  var $Nat$25 = $Nat$succ($Nat$24);
  var $Nat$26 = $Nat$succ($Nat$25);
  var $Nat$27 = $Nat$succ($Nat$26);
  var $Nat$28 = $Nat$succ($Nat$27);
  var $Nat$29 = $Nat$succ($Nat$28);
  var $Nat$30 = $Nat$succ($Nat$29);
  var $Nat$31 = $Nat$succ($Nat$30);
  var $Nat$32 = $Nat$succ($Nat$31);
  var $Nat$33 = $Nat$succ($Nat$32);
  var $Nat$34 = $Nat$succ($Nat$33);
  var $Nat$35 = $Nat$succ($Nat$34);
  var $Nat$36 = $Nat$succ($Nat$35);
  var $Nat$37 = $Nat$succ($Nat$36);
  var $Nat$38 = $Nat$succ($Nat$37);
  var $Nat$39 = $Nat$succ($Nat$38);
  var $Nat$40 = $Nat$succ($Nat$39);
  var $Nat$41 = $Nat$succ($Nat$40);
  var $Nat$42 = $Nat$succ($Nat$41);
  var $Nat$43 = $Nat$succ($Nat$42);
  var $Nat$44 = $Nat$succ($Nat$43);
  var $Nat$45 = $Nat$succ($Nat$44);
  var $Nat$46 = $Nat$succ($Nat$45);
  var $Nat$47 = $Nat$succ($Nat$46);
  var $Nat$48 = $Nat$succ($Nat$47);
  var $Nat$49 = $Nat$succ($Nat$48);
  var $Nat$50 = $Nat$succ($Nat$49);
  var $Nat$51 = $Nat$succ($Nat$50);
  var $Nat$52 = $Nat$succ($Nat$51);
  var $Nat$53 = $Nat$succ($Nat$52);
  var $Nat$54 = $Nat$succ($Nat$53);
  var $Nat$55 = $Nat$succ($Nat$54);
  var $Nat$56 = $Nat$succ($Nat$55);
  var $Nat$57 = $Nat$succ($Nat$56);
  var $Nat$58 = $Nat$succ($Nat$57);
  var $Nat$59 = $Nat$succ($Nat$58);
  var $Nat$60 = $Nat$succ($Nat$59);
  var $Nat$61 = $Nat$succ($Nat$60);
  var $Nat$62 = $Nat$succ($Nat$61);
  var $Nat$63 = $Nat$succ($Nat$62);
  var $Nat$64 = $Nat$succ($Nat$63);
  var $F64$eql = ($x=>($y=>elim_f64($x)(($x$word=>elim_f64($y)(($y$word=>$Word$eql($x$word)($y$word)))))));
  var $Bool$and = a=>b=>a&&b;
  var $F64$V3$eql = ($a=>($b=>$a(($a$x=>($a$y=>($a$z=>$b(($b$x=>($b$y=>($b$z=>($same_x=>($same_y=>($same_z=>$Bool$and($same_x)($Bool$and($same_y)($same_z)))($F64$eql($a$z)($b$z)))($F64$eql($a$y)($b$y)))($F64$eql($a$x)($b$x))))))))))));
  var $F64$V3$sub = ($a=>($b=>$a(($a$x=>($a$y=>($a$z=>$b(($b$x=>($b$y=>($b$z=>($c$x=>($c$y=>($c$z=>$F64$V3$new($c$x)($c$y)($c$z))($F64$sub($a$z)($b$z)))($F64$sub($a$y)($b$y)))($F64$sub($a$x)($a$x))))))))))));
  var $F64$new = ($a=>inst_f64(($f64=>$f64($a))));
  var $Word = ($size=>(void 0));
  var $Word$nil = ($we=>($w0=>($w1=>$we)));
  var $Word$0 = ($wo=>($we=>($w0=>($w1=>$w0($wo)))));
  var $Bits$nil = inst_bits(($be=>($b0=>($b1=>$be))));
  var $Word$1 = ($wo=>($we=>($w0=>($w1=>$w1($wo)))));
  var $Word$from_bits = ($size=>($bits=>elim_nat($size)($Word$nil)(($size$pred=>elim_bits($bits)($Word$0($Word$from_bits($size$pred)($Bits$nil)))(($bits$pred=>$Word$0($Word$from_bits($size$pred)($bits$pred))))(($bits$pred=>$Word$1($Word$from_bits($size$pred)($bits$pred))))))));
  var $U16$eql = a=>b=>a===b;
  var $Char$parse$type = ($str=>(void 0));
  var $Unit$new = inst_unit(($unit=>$unit));
  var $Char$parse = ($str=>elim_string($str)($Unit$new)(($str$head=>($str$tail=>$str$head))));
  var $String$cons = ($head=>($tail=>inst_string(($strnil=>($strcons=>$strcons($head)($tail))))));
  var $U16$new = ($a=>inst_u16(($u16=>$u16($a))));
  var $Char$new = ($b0=>($b1=>($b2=>($b3=>($b4=>($b5=>($b6=>($b7=>($b8=>($b9=>($bA=>($bB=>($bC=>($bD=>($bE=>($bF=>($kF=>($kE=>($kD=>($kC=>($kB=>($kA=>($k9=>($k8=>($k7=>($k6=>($k5=>($k4=>($k3=>($k2=>($k1=>($k0=>($k_=>$U16$new($k0($k1($k2($k3($k4($k5($k6($k7($k8($k9($kA($kB($kC($kD($kE($kF($k_))))))))))))))))))($Word$nil))($bF($Word$0)($Word$1)))($bE($Word$0)($Word$1)))($bD($Word$0)($Word$1)))($bC($Word$0)($Word$1)))($bB($Word$0)($Word$1)))($bA($Word$0)($Word$1)))($b9($Word$0)($Word$1)))($b8($Word$0)($Word$1)))($b7($Word$0)($Word$1)))($b6($Word$0)($Word$1)))($b5($Word$0)($Word$1)))($b4($Word$0)($Word$1)))($b3($Word$0)($Word$1)))($b2($Word$0)($Word$1)))($b1($Word$0)($Word$1)))($b0($Word$0)($Word$1))))))))))))))))));
  var $Bit$0 = ($o=>($i=>$o));
  var $Bit$1 = ($o=>($i=>$i));
  var $String$nil = inst_string(($strnil=>($strcons=>$strnil)));
  var $Bits$1 = ($bs=>inst_bits(($be=>($b0=>($b1=>$b1($bs))))));
  var $Bits$0 = ($bs=>inst_bits(($be=>($b0=>($b1=>$b0($bs))))));
  var $Bits$from_string = ($str=>elim_string($str)($Bits$nil)(($str$head=>($str$tail=>elim_bool($U16$eql($str$head)($Char$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$nil))))(($=>$Bits$1($Bits$from_string($str$tail))))(($=>$Bits$0($Bits$from_string($str$tail))))($Unit$new)))));
  var $F64$parse_binary = ($str=>$F64$new($Word$from_bits($Nat$64)($Bits$from_string($str))));
  var $F64$0 = $F64$parse_binary($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  var $F64$div = a=>b=>a/b;
  var $F64$1 = $F64$parse_binary($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  var $F64$pow = a=>b=>a**b;
  var $F64$V3$len = ($v=>$v(($v$x=>($v$y=>($v$z=>($sqr=>($sqr=>($sqr=>($sqr=>($expo=>($sqr=>$sqr)($F64$pow($sqr)($expo)))($F64$div($F64$1)($F64$add($F64$1)($F64$1))))($F64$add($sqr)($F64$mul($v$z)($v$z))))($F64$add($sqr)($F64$mul($v$y)($v$y))))($F64$add($sqr)($F64$mul($v$x)($v$x))))($F64$0))))));
  var $F64$V3$norm = ($v=>$v(($v$x=>($v$y=>($v$z=>($len=>($new_x=>($new_y=>($new_z=>$F64$V3$new($new_x)($new_y)($new_z))($F64$div($v$z)($len)))($F64$div($v$y)($len)))($F64$div($v$x)($len)))($F64$V3$len($v)))))));
  var $F64$V3$look_at = ($a=>($b=>($c=>$a(($a$x=>($a$y=>($a$z=>$b(($a$x=>($a$y=>($a$z=>$c(($a$x=>($a$y=>($a$z=>($a_eql_b=>($diff=>($normdiff=>elim_bool($a_eql_b)($normdiff)($c))($F64$V3$norm($diff)))($F64$V3$sub($b)($a)))($F64$V3$eql($a)($b)))))))))))))))));
  var $List$find = ($cond=>($xs=>$xs($Maybe$none)(($head=>($tail=>elim_bool($cond($head))($Maybe$some($head))($List$find($cond)($tail)))))));
  var $TaelinArena$Game$get_thing_pid = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$pid))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_by_pid$cond = ($pid=>($thi=>($thi$pid=>$F64$eql($pid)($thi$pid))($TaelinArena$Game$get_thing_pid($thi))));
  var $TaelinArena$Game$get_thing_by_pid = ($pid=>($gm=>$gm(($gm$stage=>$List$find($TaelinArena$Game$get_thing_by_pid$cond($pid))($gm$stage)))));
  var $TaelinArena$Game$get_thing_pos = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$pos))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_position_by_pid = ($pid=>($gm=>$TaelinArena$Game$get_thing_by_pid($pid)($gm)($F64$V3$new($F64$0)($F64$0)($F64$0))(($found=>$TaelinArena$Game$get_thing_pos($found)))));
  var $List$map = ($fn=>($list=>$list($List$nil)(($list$head=>($list$tail=>$List$cons($fn($list$head))($List$map($fn)($list$tail)))))));
  var $TaelinArena$Game$Game$new = ($stage=>($new=>$new($stage)));
  var $TaelinArena$Game$map_stage = ($fn=>($gm=>$gm(($gm$stage=>($new_stage=>$TaelinArena$Game$Game$new($new_stage))($List$map($fn)($gm$stage))))));
  var $TaelinArena$Game$Command$new = ($pid=>($inp=>($new=>$new($pid)($inp))));
  var $TaelinArena$Game$Input$sdir = ($dir=>($sdir=>($key0=>($key1=>($key2=>($key3=>($key4=>($key5=>($cmsg=>$sdir($dir))))))))));
  var $TaelinArena$Game$Input$key0 = ($pos=>($sdir=>($key0=>($key1=>($key2=>($key3=>($key4=>($key5=>($cmsg=>$key0($pos))))))))));
  var $TaelinArena$Game$Input$key1 = ($pos=>($sdir=>($key0=>($key1=>($key2=>($key3=>($key4=>($key5=>($cmsg=>$key1($pos))))))))));
  var $TaelinArena$Game$Input$key2 = ($pos=>($sdir=>($key0=>($key1=>($key2=>($key3=>($key4=>($key5=>($cmsg=>$key2($pos))))))))));
  var $TaelinArena$Game$Input$key3 = ($pos=>($sdir=>($key0=>($key1=>($key2=>($key3=>($key4=>($key5=>($cmsg=>$key3($pos))))))))));
  var $TaelinArena$Game$Input$key4 = ($pos=>($sdir=>($key0=>($key1=>($key2=>($key3=>($key4=>($key5=>($cmsg=>$key4($pos))))))))));
  var $TaelinArena$Game$Input$key5 = ($pos=>($sdir=>($key0=>($key1=>($key2=>($key3=>($key4=>($key5=>($cmsg=>$key5($pos))))))))));
  var $TaelinArena$Game$get_thing_buf = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$buf))))))))))))))))))))))))))));
  var $TaelinArena$Game$is_silenced = ($self=>($self$buf=>($is_silenced=>($found_buf=>$found_buf($Bool$false)(($value=>$Bool$true)))($List$find($is_silenced)($self$buf)))(($buff=>$buff(($buff$dur=>($buff$val=>$Bool$false)))(($buff$dur=>($buff$val=>$Bool$false)))(($buff$dur=>($buff$val=>$Bool$false)))(($buff$dur=>$Bool$true))(($buff$dur=>$Bool$false))(($buff$dur=>$Bool$true)))))($TaelinArena$Game$get_thing_buf($self)));
  var $TaelinArena$Game$is_stunned = ($self=>($self$buf=>($is_stunned=>($found_buf=>$found_buf($Bool$false)(($value=>$Bool$true)))($List$find($is_stunned)($self$buf)))(($buff=>$buff(($buff$dur=>($buff$val=>$Bool$false)))(($buff$dur=>($buff$val=>$Bool$false)))(($buff$dur=>($buff$val=>$Bool$false)))(($buff$dur=>$Bool$false))(($buff$dur=>$Bool$false))(($buff$dur=>$Bool$true)))))($TaelinArena$Game$get_thing_buf($self)));
  var $TaelinArena$Game$get_thing_act = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$act))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_trg = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$trg))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_tik = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$tik))))))))))))))))))))))))))));
  var $TaelinArena$Game$Thing$new = ($fun=>($pid=>($mid=>($act=>($sid=>($stt=>($nam=>($lit=>($tik=>($pos=>($mov=>($bst=>($pad=>($dir=>($trg=>($vel=>($box=>($wei=>($mhp=>($dmg=>($knk=>($buf=>($chi=>($hit=>($rst=>($die=>($new=>$new($fun)($pid)($mid)($act)($sid)($stt)($nam)($lit)($tik)($pos)($mov)($bst)($pad)($dir)($trg)($vel)($box)($wei)($mhp)($dmg)($knk)($buf)($chi)($hit)($rst)($die))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_act = ($thi=>($new_act=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($new_act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $Bool$eql = ($a=>($b=>elim_bool($a)(elim_bool($b)($Bool$true)($Bool$false))(elim_bool($b)($Bool$false)($Bool$true))));
  var $Bool$if = x=>ct=>cf=>x?ct:cf;
  var $TaelinArena$Game$set_thing_trg = ($thi=>($new_trg=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($new_trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_tik = ($thi=>($new_tik=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($new_tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$init_act = ($self=>($new_act=>($new_trg=>($self$act=>($self$trg=>($self$tik=>($act_eql_0=>($self=>($self=>($self=>$self)($TaelinArena$Game$set_thing_tik($self)($Bool$if($act_eql_0)($F64$0)($self$tik))))($TaelinArena$Game$set_thing_trg($self)($Bool$if($act_eql_0)($new_trg)($self$trg))))($TaelinArena$Game$set_thing_act($self)($Bool$if($act_eql_0)($new_act)($self$act))))($F64$eql($self$act)($F64$0)))($TaelinArena$Game$get_thing_tik($self)))($TaelinArena$Game$get_thing_trg($self)))($TaelinArena$Game$get_thing_act($self)))));
  var $TaelinArena$Game$set_thing_pad = ($thi=>($new_pad=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($new_pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $F64$2 = $F64$parse_binary($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  var $F64$parse = $F64$parse;
  var $TaelinArena$Game$with_thing$effect = ($pid=>($fn=>($thi=>($thi$pid=>elim_bool($F64$eql($pid)($thi$pid))($fn($thi))($thi))($TaelinArena$Game$get_thing_pid($thi)))));
  var $TaelinArena$Game$with_thing = ($pid=>($fn=>($gm=>$TaelinArena$Game$map_stage($TaelinArena$Game$with_thing$effect($pid)($fn))($gm))));
  var $TaelinArena$exec_command = ($cmd=>($gm=>$cmd(($cmd$pid=>($cmd$inp=>($fn=>$TaelinArena$Game$with_thing($cmd$pid)($fn)($gm))(($this=>($inp=>($is_silenced=>($is_stunned=>elim_bool($is_stunned)($inp(($sdir$dir=>$TaelinArena$Game$init_act($this)($F64$0)($sdir$dir)))(($key0$pos=>$this))(($key1$pos=>$this))(($key2$pos=>$this))(($key3$pos=>$this))(($key4$pos=>$this))(($key5$pos=>$this))(($cmsg$txt=>$this)))(elim_bool($is_silenced)($inp(($sdir$dir=>$TaelinArena$Game$set_thing_pad($this)($sdir$dir)))(($key0$pos=>$this))(($key1$pos=>$this))(($key2$pos=>$this))(($key3$pos=>$this))(($key4$pos=>$this))(($key5$pos=>$this))(($cmsg$txt=>$this)))($inp(($sdir$dir=>$TaelinArena$Game$set_thing_pad($this)($sdir$dir)))(($key0$pos=>$TaelinArena$Game$init_act($this)($F64$1)($key0$pos)))(($key1$pos=>$TaelinArena$Game$init_act($this)($F64$2)($key1$pos)))(($key2$pos=>$TaelinArena$Game$init_act($this)($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$1)($Bit$1))($String$nil)))($key2$pos)))(($key3$pos=>$TaelinArena$Game$init_act($this)($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$0)($Bit$0))($String$nil)))($key3$pos)))(($key4$pos=>$TaelinArena$Game$init_act($this)($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$0)($Bit$1))($String$nil)))($key4$pos)))(($key5$pos=>$TaelinArena$Game$init_act($this)($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$1)($Bit$0))($String$nil)))($key5$pos)))(($cmsg$txt=>$this)))))($TaelinArena$Game$is_stunned($this)))($TaelinArena$Game$is_silenced($this)))($cmd$inp))))))));
  var $TaelinArena$Game$set_thing_fun = ($thi=>($new_fun=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($new_fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_sid = ($thi=>($new_sid=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($new_sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_pid = ($thi=>($new_pid=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($new_pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_pos = ($thi=>($new_pos=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($new_pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_nam = ($thi=>($new_nam=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($new_nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_dir = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$dir))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_box = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$box))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_sid = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$sid))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_hit = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$hit))))))))))))))))))))))))))));
  var $F64$sqrt = ($n=>$F64$pow($n)($F64$div($F64$1)($F64$2)));
  var $F64$V3$sqr_dist = ($a=>($b=>$a(($a$x=>($a$y=>($a$z=>$b(($b$x=>($b$y=>($b$z=>($two=>($x_diff=>($y_diff=>($z_diff=>$F64$add($x_diff)($F64$add($y_diff)($z_diff)))($F64$pow($F64$sub($a$z)($b$z))($two)))($F64$pow($F64$sub($a$y)($b$y))($two)))($F64$pow($F64$sub($a$x)($b$x))($two)))($F64$add($F64$1)($F64$1))))))))))));
  var $F64$V3$dist = ($a=>($b=>$F64$sqrt($F64$V3$sqr_dist($a)($b))));
  var $Word$ltn = ($a=>($b=>$Word$cmp($a)($b)($Bool$true)($Bool$false)($Bool$false)));
  var $F64$cmp = ($a=>($b=>elim_f64($a)(($a$word=>elim_f64($b)(($b$word=>elim_bool($F64$eql($a)($b))($Cmp$eql)(elim_bool($Word$ltn($a$word)($b$word))($Cmp$ltn)($Cmp$gtn))))))));
  var $F64$ltn = ($a=>($b=>$F64$cmp($a)($b)($Bool$true)($Bool$false)($Bool$false)));
  var $F64$V3$scale = ($k=>($v=>$v(($v$x=>($v$y=>($v$z=>($new_x=>($new_y=>($new_z=>$F64$V3$new($new_x)($new_y)($new_z))($F64$mul($k)($v$z)))($F64$mul($k)($v$y)))($F64$mul($k)($v$x))))))));
  var $F64$max = $F64$max;
  var $F64$min = $F64$min;
  var $F64$V3$point_segment_sqrdist = ($p=>($s=>$p(($p$x=>($p$y=>($p$z=>$s(($a=>($b=>$a(($a$x=>($a$y=>($a$z=>$b(($b$x=>($b$y=>($b$z=>($ab_x_diff_sqrd=>($ab_y_diff_sqrd=>($pa_x_diff=>($pa_y_diff=>($ba_x_diff=>($ba_y_diff=>($l=>($t=>($t=>($t=>($d=>($t_times_ba_x_diff=>($t_times_ba_y_diff=>($k=>($d=>($k=>($d=>$d)($F64$add($d)($k)))($F64$pow($F64$sub($p$y)($F64$add($a$y)($t_times_ba_y_diff)))($F64$2)))($F64$add($d)($k)))($F64$pow($F64$sub($p$x)($F64$add($a$x)($t_times_ba_x_diff)))($F64$2)))($F64$mul($t)($ba_y_diff)))($F64$mul($t)($ba_x_diff)))($F64$0))($F64$max($F64$0)($F64$min($F64$1)($t))))($F64$div($t)($l)))($F64$add($F64$mul($pa_x_diff)($ba_x_diff))($F64$mul($pa_y_diff)($ba_y_diff))))($F64$add($ab_x_diff_sqrd)($ab_y_diff_sqrd)))($F64$sub($b$y)($a$y)))($F64$sub($b$x)($a$x)))($F64$sub($p$y)($a$y)))($F64$sub($p$x)($a$x)))($F64$pow($F64$sub($a$y)($b$y))($F64$2)))($F64$pow($F64$sub($a$x)($b$x))($F64$2)))))))))))))))))));
  var $F64$V3$point_segment_dist = ($p=>($s=>$F64$sqrt($F64$V3$point_segment_sqrdist($p)($s))));
  var $F64$V3$rot_90 = ($v=>$v(($v$x=>($v$y=>($v$z=>$F64$V3$new($v$y)($F64$sub($F64$0)($v$x))($v$z))))));
  var $TaelinArena$collide_with = ($a_pos=>($a_dir=>($a_box=>($b_pos=>($b_dir=>($b_box=>($none=>$a_box($none)(($a_box$rad=>$b_box($none)(($b_box$rad=>($dst=>($rad=>($if_condition=>$Bool$if($if_condition)(($out_dir=>($out_vec=>$Maybe$some($out_vec))($F64$V3$scale($F64$sub($rad)($dst))($out_dir)))($F64$V3$norm($F64$V3$sub($a_pos)($b_pos))))($none))($Bool$and($F64$ltn($F64$0)($dst))($F64$ltn($dst)($rad))))($F64$add($a_box$rad)($b_box$rad)))($F64$V3$dist($a_pos)($b_pos))))(($b_box$pts=>($cons=>($segs=>$List$fold($none)($cons)($segs))($F64$V3$polygon_to_segments($b_pos)($b_dir)($b_box$pts)))(($segment=>($result=>$result($segment(($segment$a=>($segment$b=>($dst=>($rad=>$Bool$if($F64$ltn($dst)($rad))(($out_dir=>($out_vec=>$Maybe$some($out_vec))($F64$V3$scale($F64$sub($rad)($dst))($out_dir)))($F64$V3$rot_90($F64$V3$norm($F64$V3$sub($segment$a)($segment$b)))))($none))($a_box$rad))($F64$V3$point_segment_dist($a_pos)($segment))))))(($result$value=>$Maybe$some($result$value))))))))))(($a_box$pts=>$none)))($Maybe$none)))))));
  var $TaelinArena$Game$get_thing_dmg = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$dmg))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_dmg = ($thi=>($new_dmg=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($new_dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $Pair$new = ($a=>($b=>($pair=>$pair($a)($b))));
  var $Pair = ($A=>($B=>(void 0)));
  var $F64$Ordering$EQ = ($F64$Ordering$LT=>($F64$Ordering$EQ=>($F64$Ordering$GT=>$F64$Ordering$EQ)));
  var $F64$Ordering$GT = ($F64$Ordering$LT=>($F64$Ordering$EQ=>($F64$Ordering$GT=>$F64$Ordering$GT)));
  var $F64$Ordering$LT = ($F64$Ordering$LT=>($F64$Ordering$EQ=>($F64$Ordering$GT=>$F64$Ordering$LT)));
  var $F64$compare_numbers = ($a=>($b=>$Bool$if($F64$eql($a)($b))($F64$Ordering$EQ)($Bool$if($F64$ltn($b)($a))($F64$Ordering$GT)($F64$Ordering$LT))));
  var $TaelinArena$Game$Buff$shielded = ($dur=>($val=>($shielded=>($slowed=>($hasted=>($silenced=>($rooted=>($stuned=>$shielded($dur)($val)))))))));
  var $TaelinArena$Game$use_shields = ($buff=>($acc=>$acc(($acc$fst=>($acc$snd=>$buff(($buff$dur=>($buff$val=>$Bool$if($F64$eql($acc$fst)($F64$0))($acc)(($compare=>$compare(($remaining_shield_val=>($remaining_buf=>$Pair$new($F64$0)($remaining_buf))($List$cons($TaelinArena$Game$Buff$shielded($buff$dur)($remaining_shield_val))($acc$snd)))($F64$sub($buff$val)($acc$fst)))($Pair$new($F64$0)($acc$snd))(($remaining_dmg=>$Pair$new($remaining_dmg)($acc$snd))($F64$sub($acc$fst)($buff$val))))($F64$compare_numbers($acc$fst)($buff$val))))))(($buff$dur=>($buff$val=>$Pair$new($acc$fst)($List$cons($buff)($acc$snd)))))(($buff$dur=>($buff$val=>$Pair$new($acc$fst)($List$cons($buff)($acc$snd)))))(($buff$dur=>$Pair$new($acc$fst)($List$cons($buff)($acc$snd))))(($buff$dur=>$Pair$new($acc$fst)($List$cons($buff)($acc$snd))))(($buff$dur=>$Pair$new($acc$fst)($List$cons($buff)($acc$snd)))))))));
  var $Pair$fst = ($pair=>$pair(($a=>($b=>$a))));
  var $Pair$snd = ($pair=>$pair(($a=>($b=>$b))));
  var $TaelinArena$Game$set_thing_buf = ($thi=>($new_buf=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($new_buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$handle_shields = ($hit_dmg=>($self=>($self$buf=>($self$dmg=>($init_val=>($res=>($res$fst=>($res$snd=>($remaining_dmg=>($remaining_buf=>($self=>($self=>$self)($TaelinArena$Game$set_thing_buf($self)($remaining_buf)))($TaelinArena$Game$set_thing_dmg($self)($remaining_dmg)))($res$snd))($F64$add($res$fst)($self$dmg)))($Pair$snd($res)))($Pair$fst($res)))($List$fold($init_val)($TaelinArena$Game$use_shields)($self$buf)))($Pair$new($hit_dmg)($List$nil)))($TaelinArena$Game$get_thing_dmg($self)))($TaelinArena$Game$get_thing_buf($self))));
  var $TaelinArena$Game$set_thing_knk = ($thi=>($new_knk=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($new_knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$Buff$slowed = ($dur=>($val=>($shielded=>($slowed=>($hasted=>($silenced=>($rooted=>($stuned=>$slowed($dur)($val)))))))));
  var $TaelinArena$Game$Buff$hasted = ($dur=>($val=>($shielded=>($slowed=>($hasted=>($silenced=>($rooted=>($stuned=>$hasted($dur)($val)))))))));
  var $TaelinArena$Game$Buff$silenced = ($dur=>($shielded=>($slowed=>($hasted=>($silenced=>($rooted=>($stuned=>$silenced($dur))))))));
  var $TaelinArena$Game$Buff$rooted = ($dur=>($shielded=>($slowed=>($hasted=>($silenced=>($rooted=>($stuned=>$rooted($dur))))))));
  var $TaelinArena$Game$Buff$stuned = ($dur=>($shielded=>($slowed=>($hasted=>($silenced=>($rooted=>($stuned=>$stuned($dur))))))));
  var $TaelinArena$interact_with = ($this=>($that=>($this$pos=>($this$dir=>($this$box=>($this$buf=>($this$sid=>($that$pos=>($that$dir=>($that$box=>($that$hit=>($that$sid=>($out_vec=>($this=>($this=>$this)(($apply_hit=>$List$fold($this)($apply_hit)($that$hit))(($hit=>($this=>$hit(($hit$eff=>($hit$pos=>($hit$dir=>($hit$box=>($out_vec=>$out_vec($this)(($out_vec$value=>($compare_sid=>($apply_eff=>$List$fold($this)($apply_eff)($hit$eff))(($eff=>($this=>$eff(($eff$lif=>($this$dmg=>$Bool$if($compare_sid)($this)($TaelinArena$Game$set_thing_dmg($this)($F64$sub($this$dmg)($eff$lif))))($TaelinArena$Game$get_thing_dmg($this))))(($eff$dmg=>$Bool$if($compare_sid)($this)($TaelinArena$Game$handle_shields($eff$dmg)($this))))(($eff$mag=>$Bool$if($compare_sid)($this)(($v3=>($dir=>($vec=>$TaelinArena$Game$set_thing_knk($this)($vec))($F64$V3$scale($eff$mag)($dir)))($F64$V3$look_at($hit$pos)($this$pos)($v3)))($F64$V3$new($F64$1)($F64$0)($F64$0)))))(($eff$mag=>($eff$dir=>$Bool$if($compare_sid)($this)(($vec=>$TaelinArena$Game$set_thing_knk($this)($vec))($F64$V3$scale($eff$mag)($eff$dir))))))(($eff$dur=>($eff$val=>$Bool$if($compare_sid)($this)(($updated_buffs=>$TaelinArena$Game$set_thing_buf($this)($updated_buffs))($List$cons($TaelinArena$Game$Buff$slowed($eff$dur)($eff$val))($this$buf))))))(($eff$dur=>($eff$val=>$Bool$if($compare_sid)($this)(($updated_buffs=>$TaelinArena$Game$set_thing_buf($this)($updated_buffs))($List$cons($TaelinArena$Game$Buff$hasted($eff$dur)($eff$val))($this$buf))))))(($eff$dur=>($eff$val=>$Bool$if($compare_sid)($this)(($updated_buffs=>$TaelinArena$Game$set_thing_buf($this)($updated_buffs))($List$cons($TaelinArena$Game$Buff$shielded($eff$dur)($eff$val))($this$buf))))))(($eff$dur=>$Bool$if($compare_sid)($this)(($updated_buffs=>$TaelinArena$Game$set_thing_buf($this)($updated_buffs))($List$cons($TaelinArena$Game$Buff$silenced($eff$dur))($this$buf)))))(($eff$dur=>$Bool$if($compare_sid)($this)(($updated_buffs=>$TaelinArena$Game$set_thing_buf($this)($updated_buffs))($List$cons($TaelinArena$Game$Buff$rooted($eff$dur))($this$buf)))))(($eff$dur=>$Bool$if($compare_sid)($this)(($updated_buffs=>$TaelinArena$Game$set_thing_buf($this)($updated_buffs))($List$cons($TaelinArena$Game$Buff$stuned($eff$dur))($this$buf)))))(($eff$to_pos=>($eff$all=>$Bool$if($F64$eql($eff$all)($F64$1))($TaelinArena$Game$set_thing_pos($this)($eff$to_pos))($this))))))))($F64$eql($this$sid)($that$sid)))))($TaelinArena$collide_with($this$pos)($this$dir)($this$box)($hit$pos)($hit$dir)($hit$box))))))))))))($out_vec($this)(($out_vec$value=>($new_pos=>$TaelinArena$Game$set_thing_pos($this)($new_pos))($F64$V3$add($this$pos)($out_vec$value))))))($TaelinArena$collide_with($this$pos)($this$dir)($this$box)($that$pos)($that$dir)($that$box)))($TaelinArena$Game$get_thing_sid($this)))($TaelinArena$Game$get_thing_hit($that)))($TaelinArena$Game$get_thing_box($that)))($TaelinArena$Game$get_thing_dir($that)))($TaelinArena$Game$get_thing_pos($that)))($TaelinArena$Game$get_thing_sid($this)))($TaelinArena$Game$get_thing_buf($this)))($TaelinArena$Game$get_thing_box($this)))($TaelinArena$Game$get_thing_dir($this)))($TaelinArena$Game$get_thing_pos($this))));
  var $TaelinArena$Game$set_thing_hit = ($thi=>($new_hit=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($new_hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_rst = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$rst))))))))))))))))))))))))))));
  var $TaelinArena$Game$Hitbox$cbox = ($rad=>($nbox=>($cbox=>($pbox=>$cbox($rad)))));
  var $TaelinArena$Game$set_thing_vel = ($thi=>($new_vel=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($new_vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_bst = ($thi=>($new_bst=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($new_bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_box = ($thi=>($new_box=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($new_box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_lit = ($thi=>($new_lit=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($new_lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_rst = ($thi=>($new_rst=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($thi$chi)($thi$hit)($new_rst)($thi$die))))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_bst = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$bst))))))))))))))))))))))))))));
  var $TaelinArena$Game$combine_mov_buffs = ($buff=>($i=>$buff(($buff$dur=>($buff$val=>$i)))(($buff$dur=>($buff$val=>$F64$mul($i)($buff$val))))(($buff$dur=>($buff$val=>$F64$mul($i)($buff$val))))(($buff$dur=>$i))(($buff$dur=>$F64$0))(($buff$dur=>$F64$0))));
  var $TaelinArena$Game$speed_multiplier_of = ($self=>($bst=>($buf=>$List$fold($bst)($TaelinArena$Game$combine_mov_buffs)($buf))($TaelinArena$Game$get_thing_buf($self)))($TaelinArena$Game$get_thing_bst($self)));
  var $TaelinArena$Game$get_thing_mov = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$mov))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_pad = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$pad))))))))))))))))))))))))))));
  var $TaelinArena$Game$update_buff_dur = ($self=>($self$buf=>($fn=>($new_buf=>$TaelinArena$Game$set_thing_buf($self)($new_buf))($List$fold($List$nil)($fn)($self$buf)))(($buff=>($acc=>$buff(($buff$dur=>($buff$val=>$Bool$if($F64$eql($buff$dur)($F64$0))($acc)($List$cons($TaelinArena$Game$Buff$shielded($F64$sub($buff$dur)($F64$1))($buff$val))($acc)))))(($buff$dur=>($buff$val=>$Bool$if($F64$eql($buff$dur)($F64$0))($acc)($List$cons($TaelinArena$Game$Buff$slowed($F64$sub($buff$dur)($F64$1))($buff$val))($acc)))))(($buff$dur=>($buff$val=>$Bool$if($F64$eql($buff$dur)($F64$0))($acc)($List$cons($TaelinArena$Game$Buff$hasted($F64$sub($buff$dur)($F64$1))($buff$val))($acc)))))(($buff$dur=>$Bool$if($F64$eql($buff$dur)($F64$0))($acc)($List$cons($TaelinArena$Game$Buff$silenced($F64$sub($buff$dur)($F64$1)))($acc))))(($buff$dur=>$Bool$if($F64$eql($buff$dur)($F64$0))($acc)($List$cons($TaelinArena$Game$Buff$rooted($F64$sub($buff$dur)($F64$1)))($acc))))(($buff$dur=>$Bool$if($F64$eql($buff$dur)($F64$0))($acc)($List$cons($TaelinArena$Game$Buff$stuned($F64$sub($buff$dur)($F64$1)))($acc))))))))($TaelinArena$Game$get_thing_buf($self)));
  var $TaelinArena$Game$get_thing_knk = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$knk))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_wei = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$wei))))))))))))))))))))))))))));
  var $F64$gtn = ($a=>($b=>$F64$cmp($a)($b)($Bool$false)($Bool$false)($Bool$true)));
  var $TaelinArena$Game$get_thing_fun = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$fun))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_chi = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$chi))))))))))))))))))))))))))));
  var $TaelinArena$Game$set_thing_chi = ($thi=>($new_chi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$TaelinArena$Game$Thing$new($thi$fun)($thi$pid)($thi$mid)($thi$act)($thi$sid)($thi$stt)($thi$nam)($thi$lit)($thi$tik)($thi$pos)($thi$mov)($thi$bst)($thi$pad)($thi$dir)($thi$trg)($thi$vel)($thi$box)($thi$wei)($thi$mhp)($thi$dmg)($thi$knk)($thi$buf)($new_chi)($thi$hit)($thi$rst)($thi$die))))))))))))))))))))))))))))));
  var $F64$V3$get_z = ($v=>$v(($v$x=>($v$y=>($v$z=>$v$z)))));
  var $F64$V3$get_y = ($v=>$v(($v$x=>($v$y=>($v$z=>$v$y)))));
  var $TaelinArena$Game$get_thing_mhp = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$mhp))))))))))))))))))))))))))));
  var $TaelinArena$Game$get_thing_die = ($thi=>$thi(($thi$fun=>($thi$pid=>($thi$mid=>($thi$act=>($thi$sid=>($thi$stt=>($thi$nam=>($thi$lit=>($thi$tik=>($thi$pos=>($thi$mov=>($thi$bst=>($thi$pad=>($thi$dir=>($thi$trg=>($thi$vel=>($thi$box=>($thi$wei=>($thi$mhp=>($thi$dmg=>($thi$knk=>($thi$buf=>($thi$chi=>($thi$hit=>($thi$rst=>($thi$die=>$thi$die))))))))))))))))))))))))))));
  var $Bool$or = a=>b=>a||b;
  var $List$concat = ($as=>($bs=>$as($bs)(($head=>($tail=>$List$cons($head)($List$concat($tail)($bs)))))));
  var $TaelinArena$fold_with_context = ($i=>($f=>($xs=>($ys=>$xs($i)(($xs$head=>($xs$tail=>($ys2=>($rest=>$f($xs$head)($ys($xs$tail))($rest))($TaelinArena$fold_with_context($i)($f)($xs$tail)($ys2)))(($x=>$ys($List$cons($xs$head)($xs)))))))))));
  var $TaelinArena$exec_turn = ($gm=>($intr=>($tick=>($things_id=>($stage=>($stage_nil=>($new_stage=>$TaelinArena$Game$Game$new($new_stage))($TaelinArena$fold_with_context($stage_nil)($tick)($stage)($things_id)))($List$nil))($gm(($stage=>$stage))))(($x=>$x)))(($this=>($others=>($res=>($this=>($rst=>($this=>($boost=>($pos=>($mov=>($pad=>($this=>($this=>($pos=>($knk=>($wei=>($new_pos=>($knk_len=>($new_knk=>($this=>($this=>($fun=>($this=>($this=>($tik=>($this=>($this_chi=>($chi_init=>($chi_list=>($this=>($this_pos=>($pos_x=>($pos_y=>($pos_z=>($new_x=>($new_y=>($new_z=>($this=>($dmg=>($mhp=>($new_dmg=>($this=>($sid=>($dmg=>($mhp=>($no_hp=>($die=>($xs=>$List$concat($chi_list)($xs))(elim_bool($Bool$or($die)($no_hp))($res)($List$cons($this)($res))))($TaelinArena$Game$get_thing_die($this)))($Bool$false))($TaelinArena$Game$get_thing_mhp($this)))($TaelinArena$Game$get_thing_dmg($this)))($TaelinArena$Game$get_thing_sid($this)))($TaelinArena$Game$set_thing_dmg($this)($new_dmg)))($F64$max($F64$0)($F64$min($mhp)($dmg))))($TaelinArena$Game$get_thing_mhp($this)))($TaelinArena$Game$get_thing_dmg($this)))($TaelinArena$Game$set_thing_pos($this)($F64$V3$new($new_x)($new_y)($new_z))))($F64$min($F64$max($F64$0)($pos_z))($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$1)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$1)($Bit$0))($String$nil)))))))($F64$min($F64$max($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$1)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$nil))))))($pos_y))($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$1)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$0)($Bit$0))($String$nil)))))))($F64$min($F64$max($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$1)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$1)($Bit$0))($String$nil))))))($pos_x))($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$1)($Bit$0))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$0)($Bit$1))($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$1)($Bit$0))($String$nil)))))))($F64$V3$get_z($this_pos)))($F64$V3$get_y($this_pos)))($F64$V3$get_z($this_pos)))($TaelinArena$Game$get_thing_pos($this)))($TaelinArena$Game$set_thing_chi($this)($List$nil)))($List$map($chi_init)($this_chi)))(($chi=>$TaelinArena$Game$get_thing_fun($chi)($chi))))($TaelinArena$Game$get_thing_chi($this)))($TaelinArena$Game$set_thing_tik($this)($F64$add($tik)($F64$1))))($TaelinArena$Game$get_thing_tik($this)))($List$fold($this)($intr)($others)))($fun($this)))($TaelinArena$Game$get_thing_fun($this)))($TaelinArena$Game$set_thing_knk($this)($new_knk)))($TaelinArena$Game$set_thing_pos($this)($new_pos)))(elim_bool($F64$gtn($knk_len)($F64$0))(($force=>$F64$V3$scale($force)($F64$V3$norm($knk)))($F64$max($F64$sub($knk_len)($wei))($F64$0)))($knk)))($F64$V3$len($knk)))($F64$V3$add($pos)($knk)))($TaelinArena$Game$get_thing_wei($this)))($TaelinArena$Game$get_thing_knk($this)))($TaelinArena$Game$get_thing_pos($this)))($TaelinArena$Game$update_buff_dur($this)))($TaelinArena$Game$set_thing_pos($this)($F64$V3$add($pos)($F64$V3$scale($F64$mul($mov)($boost))($pad)))))($TaelinArena$Game$get_thing_pad($this)))($TaelinArena$Game$get_thing_mov($this)))($TaelinArena$Game$get_thing_pos($this)))($TaelinArena$Game$speed_multiplier_of($this)))(elim_bool($rst)(($new_vel=>($new_bst=>($new_box=>($new_act=>($new_tik=>($new_lit=>($new_rst=>($this=>($this=>($this=>($this=>($this=>($this=>($this=>$this)($TaelinArena$Game$set_thing_rst($this)($new_rst)))($TaelinArena$Game$set_thing_lit($this)($new_lit)))($TaelinArena$Game$set_thing_tik($this)($new_tik)))($TaelinArena$Game$set_thing_act($this)($new_act)))($TaelinArena$Game$set_thing_box($this)($new_box)))($TaelinArena$Game$set_thing_bst($this)($new_bst)))($TaelinArena$Game$set_thing_vel($this)($new_vel)))($Bool$false))($List$nil))($F64$0))($F64$0))($TaelinArena$Game$Hitbox$cbox($F64$mul($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$0)($Bit$1)($Bit$1))($String$nil)))($F64$parse($String$cons($Char$new($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$0)($Bit$1)($Bit$1)($Bit$0)($Bit$1)($Bit$0)($Bit$0))($String$nil))))))($F64$1))($F64$V3$new($F64$0)($F64$0)($F64$0)))($this)))($TaelinArena$Game$get_thing_rst($this)))($TaelinArena$Game$set_thing_hit($this)($List$nil)))))))(($that=>($this=>$TaelinArena$interact_with($this)($that)))));
  var $Exports$new = ($new=>($add=>$new));
  var $Exports$TaelinArena = $Exports$add($List$nil)($Exports$add($List$cons)($Exports$add($F64$V3$polygon_to_segments)($Exports$add($F64$V3$look_at)($Exports$add($TaelinArena$Game$get_position_by_pid)($Exports$add($TaelinArena$Game$map_stage)($Exports$add($TaelinArena$Game$Command$new)($Exports$add($TaelinArena$Game$Input$sdir)($Exports$add($TaelinArena$Game$Input$key0)($Exports$add($TaelinArena$Game$Input$key1)($Exports$add($TaelinArena$Game$Input$key2)($Exports$add($TaelinArena$Game$Input$key3)($Exports$add($TaelinArena$Game$Input$key4)($Exports$add($TaelinArena$Game$Input$key5)($Exports$add($TaelinArena$exec_command)($Exports$add($TaelinArena$Game$Thing$new)($Exports$add($TaelinArena$Game$set_thing_fun)($Exports$add($TaelinArena$Game$set_thing_sid)($Exports$add($TaelinArena$Game$set_thing_pid)($Exports$add($TaelinArena$Game$set_thing_pos)($Exports$add($TaelinArena$Game$set_thing_nam)($Exports$add($TaelinArena$Game$Game$new)($Exports$add($TaelinArena$exec_turn)($Exports$new)))))))))))))))))))))));
  return {
    'Exports.add': $Exports$add,
    'List.nil': $List$nil,
    'List.cons': $List$cons,
    'List.fold': $List$fold,
    'List': $List,
    'F64.atan': $F64$atan,
    'F64.mul': $F64$mul,
    'F64.cos': $F64$cos,
    'F64.sin': $F64$sin,
    'F64.sub': $F64$sub,
    'F64.add': $F64$add,
    'F64.V3.new': $F64$V3$new,
    'F64.V3.add': $F64$V3$add,
    'F64.V3.polygon_to_segments.transform': $F64$V3$polygon_to_segments$transform,
    'F64.Segment.new': $F64$Segment$new,
    'F64.V3.polygon_to_segments.nil': $F64$V3$polygon_to_segments$nil,
    'Maybe.some': $Maybe$some,
    'Maybe': $Maybe,
    'F64.V3.polygon_to_segments.cons': $F64$V3$polygon_to_segments$cons,
    'Maybe.none': $Maybe$none,
    'F64.V3.polygon_to_segments': $F64$V3$polygon_to_segments,
    'Cmp.ltn': $Cmp$ltn,
    'Cmp.gtn': $Cmp$gtn,
    'Word.cmp.aux': $Word$cmp$aux,
    'Cmp.eql': $Cmp$eql,
    'Word.cmp': $Word$cmp,
    'Bool.false': $Bool$false,
    'Bool.true': $Bool$true,
    'Word.eql': $Word$eql,
    'Nat.succ': $Nat$succ,
    'Nat.zero': $Nat$zero,
    'Nat.0': $Nat$0,
    'Nat.1': $Nat$1,
    'Nat.2': $Nat$2,
    'Nat.3': $Nat$3,
    'Nat.4': $Nat$4,
    'Nat.5': $Nat$5,
    'Nat.6': $Nat$6,
    'Nat.7': $Nat$7,
    'Nat.8': $Nat$8,
    'Nat.9': $Nat$9,
    'Nat.10': $Nat$10,
    'Nat.11': $Nat$11,
    'Nat.12': $Nat$12,
    'Nat.13': $Nat$13,
    'Nat.14': $Nat$14,
    'Nat.15': $Nat$15,
    'Nat.16': $Nat$16,
    'Nat.17': $Nat$17,
    'Nat.18': $Nat$18,
    'Nat.19': $Nat$19,
    'Nat.20': $Nat$20,
    'Nat.21': $Nat$21,
    'Nat.22': $Nat$22,
    'Nat.23': $Nat$23,
    'Nat.24': $Nat$24,
    'Nat.25': $Nat$25,
    'Nat.26': $Nat$26,
    'Nat.27': $Nat$27,
    'Nat.28': $Nat$28,
    'Nat.29': $Nat$29,
    'Nat.30': $Nat$30,
    'Nat.31': $Nat$31,
    'Nat.32': $Nat$32,
    'Nat.33': $Nat$33,
    'Nat.34': $Nat$34,
    'Nat.35': $Nat$35,
    'Nat.36': $Nat$36,
    'Nat.37': $Nat$37,
    'Nat.38': $Nat$38,
    'Nat.39': $Nat$39,
    'Nat.40': $Nat$40,
    'Nat.41': $Nat$41,
    'Nat.42': $Nat$42,
    'Nat.43': $Nat$43,
    'Nat.44': $Nat$44,
    'Nat.45': $Nat$45,
    'Nat.46': $Nat$46,
    'Nat.47': $Nat$47,
    'Nat.48': $Nat$48,
    'Nat.49': $Nat$49,
    'Nat.50': $Nat$50,
    'Nat.51': $Nat$51,
    'Nat.52': $Nat$52,
    'Nat.53': $Nat$53,
    'Nat.54': $Nat$54,
    'Nat.55': $Nat$55,
    'Nat.56': $Nat$56,
    'Nat.57': $Nat$57,
    'Nat.58': $Nat$58,
    'Nat.59': $Nat$59,
    'Nat.60': $Nat$60,
    'Nat.61': $Nat$61,
    'Nat.62': $Nat$62,
    'Nat.63': $Nat$63,
    'Nat.64': $Nat$64,
    'F64.eql': $F64$eql,
    'Bool.and': $Bool$and,
    'F64.V3.eql': $F64$V3$eql,
    'F64.V3.sub': $F64$V3$sub,
    'F64.new': $F64$new,
    'Word': $Word,
    'Word.nil': $Word$nil,
    'Word.0': $Word$0,
    'Bits.nil': $Bits$nil,
    'Word.1': $Word$1,
    'Word.from_bits': $Word$from_bits,
    'U16.eql': $U16$eql,
    'Char.parse.type': $Char$parse$type,
    'Unit.new': $Unit$new,
    'Char.parse': $Char$parse,
    'String.cons': $String$cons,
    'U16.new': $U16$new,
    'Char.new': $Char$new,
    'Bit.0': $Bit$0,
    'Bit.1': $Bit$1,
    'String.nil': $String$nil,
    'Bits.1': $Bits$1,
    'Bits.0': $Bits$0,
    'Bits.from_string': $Bits$from_string,
    'F64.parse_binary': $F64$parse_binary,
    'F64.0': $F64$0,
    'F64.div': $F64$div,
    'F64.1': $F64$1,
    'F64.pow': $F64$pow,
    'F64.V3.len': $F64$V3$len,
    'F64.V3.norm': $F64$V3$norm,
    'F64.V3.look_at': $F64$V3$look_at,
    'List.find': $List$find,
    'TaelinArena.Game.get_thing_pid': $TaelinArena$Game$get_thing_pid,
    'TaelinArena.Game.get_thing_by_pid.cond': $TaelinArena$Game$get_thing_by_pid$cond,
    'TaelinArena.Game.get_thing_by_pid': $TaelinArena$Game$get_thing_by_pid,
    'TaelinArena.Game.get_thing_pos': $TaelinArena$Game$get_thing_pos,
    'TaelinArena.Game.get_position_by_pid': $TaelinArena$Game$get_position_by_pid,
    'List.map': $List$map,
    'TaelinArena.Game.Game.new': $TaelinArena$Game$Game$new,
    'TaelinArena.Game.map_stage': $TaelinArena$Game$map_stage,
    'TaelinArena.Game.Command.new': $TaelinArena$Game$Command$new,
    'TaelinArena.Game.Input.sdir': $TaelinArena$Game$Input$sdir,
    'TaelinArena.Game.Input.key0': $TaelinArena$Game$Input$key0,
    'TaelinArena.Game.Input.key1': $TaelinArena$Game$Input$key1,
    'TaelinArena.Game.Input.key2': $TaelinArena$Game$Input$key2,
    'TaelinArena.Game.Input.key3': $TaelinArena$Game$Input$key3,
    'TaelinArena.Game.Input.key4': $TaelinArena$Game$Input$key4,
    'TaelinArena.Game.Input.key5': $TaelinArena$Game$Input$key5,
    'TaelinArena.Game.get_thing_buf': $TaelinArena$Game$get_thing_buf,
    'TaelinArena.Game.is_silenced': $TaelinArena$Game$is_silenced,
    'TaelinArena.Game.is_stunned': $TaelinArena$Game$is_stunned,
    'TaelinArena.Game.get_thing_act': $TaelinArena$Game$get_thing_act,
    'TaelinArena.Game.get_thing_trg': $TaelinArena$Game$get_thing_trg,
    'TaelinArena.Game.get_thing_tik': $TaelinArena$Game$get_thing_tik,
    'TaelinArena.Game.Thing.new': $TaelinArena$Game$Thing$new,
    'TaelinArena.Game.set_thing_act': $TaelinArena$Game$set_thing_act,
    'Bool.eql': $Bool$eql,
    'Bool.if': $Bool$if,
    'TaelinArena.Game.set_thing_trg': $TaelinArena$Game$set_thing_trg,
    'TaelinArena.Game.set_thing_tik': $TaelinArena$Game$set_thing_tik,
    'TaelinArena.Game.init_act': $TaelinArena$Game$init_act,
    'TaelinArena.Game.set_thing_pad': $TaelinArena$Game$set_thing_pad,
    'F64.2': $F64$2,
    'F64.parse': $F64$parse,
    'TaelinArena.Game.with_thing.effect': $TaelinArena$Game$with_thing$effect,
    'TaelinArena.Game.with_thing': $TaelinArena$Game$with_thing,
    'TaelinArena.exec_command': $TaelinArena$exec_command,
    'TaelinArena.Game.set_thing_fun': $TaelinArena$Game$set_thing_fun,
    'TaelinArena.Game.set_thing_sid': $TaelinArena$Game$set_thing_sid,
    'TaelinArena.Game.set_thing_pid': $TaelinArena$Game$set_thing_pid,
    'TaelinArena.Game.set_thing_pos': $TaelinArena$Game$set_thing_pos,
    'TaelinArena.Game.set_thing_nam': $TaelinArena$Game$set_thing_nam,
    'TaelinArena.Game.get_thing_dir': $TaelinArena$Game$get_thing_dir,
    'TaelinArena.Game.get_thing_box': $TaelinArena$Game$get_thing_box,
    'TaelinArena.Game.get_thing_sid': $TaelinArena$Game$get_thing_sid,
    'TaelinArena.Game.get_thing_hit': $TaelinArena$Game$get_thing_hit,
    'F64.sqrt': $F64$sqrt,
    'F64.V3.sqr_dist': $F64$V3$sqr_dist,
    'F64.V3.dist': $F64$V3$dist,
    'Word.ltn': $Word$ltn,
    'F64.cmp': $F64$cmp,
    'F64.ltn': $F64$ltn,
    'F64.V3.scale': $F64$V3$scale,
    'F64.max': $F64$max,
    'F64.min': $F64$min,
    'F64.V3.point_segment_sqrdist': $F64$V3$point_segment_sqrdist,
    'F64.V3.point_segment_dist': $F64$V3$point_segment_dist,
    'F64.V3.rot_90': $F64$V3$rot_90,
    'TaelinArena.collide_with': $TaelinArena$collide_with,
    'TaelinArena.Game.get_thing_dmg': $TaelinArena$Game$get_thing_dmg,
    'TaelinArena.Game.set_thing_dmg': $TaelinArena$Game$set_thing_dmg,
    'Pair.new': $Pair$new,
    'Pair': $Pair,
    'F64.Ordering.EQ': $F64$Ordering$EQ,
    'F64.Ordering.GT': $F64$Ordering$GT,
    'F64.Ordering.LT': $F64$Ordering$LT,
    'F64.compare_numbers': $F64$compare_numbers,
    'TaelinArena.Game.Buff.shielded': $TaelinArena$Game$Buff$shielded,
    'TaelinArena.Game.use_shields': $TaelinArena$Game$use_shields,
    'Pair.fst': $Pair$fst,
    'Pair.snd': $Pair$snd,
    'TaelinArena.Game.set_thing_buf': $TaelinArena$Game$set_thing_buf,
    'TaelinArena.Game.handle_shields': $TaelinArena$Game$handle_shields,
    'TaelinArena.Game.set_thing_knk': $TaelinArena$Game$set_thing_knk,
    'TaelinArena.Game.Buff.slowed': $TaelinArena$Game$Buff$slowed,
    'TaelinArena.Game.Buff.hasted': $TaelinArena$Game$Buff$hasted,
    'TaelinArena.Game.Buff.silenced': $TaelinArena$Game$Buff$silenced,
    'TaelinArena.Game.Buff.rooted': $TaelinArena$Game$Buff$rooted,
    'TaelinArena.Game.Buff.stuned': $TaelinArena$Game$Buff$stuned,
    'TaelinArena.interact_with': $TaelinArena$interact_with,
    'TaelinArena.Game.set_thing_hit': $TaelinArena$Game$set_thing_hit,
    'TaelinArena.Game.get_thing_rst': $TaelinArena$Game$get_thing_rst,
    'TaelinArena.Game.Hitbox.cbox': $TaelinArena$Game$Hitbox$cbox,
    'TaelinArena.Game.set_thing_vel': $TaelinArena$Game$set_thing_vel,
    'TaelinArena.Game.set_thing_bst': $TaelinArena$Game$set_thing_bst,
    'TaelinArena.Game.set_thing_box': $TaelinArena$Game$set_thing_box,
    'TaelinArena.Game.set_thing_lit': $TaelinArena$Game$set_thing_lit,
    'TaelinArena.Game.set_thing_rst': $TaelinArena$Game$set_thing_rst,
    'TaelinArena.Game.get_thing_bst': $TaelinArena$Game$get_thing_bst,
    'TaelinArena.Game.combine_mov_buffs': $TaelinArena$Game$combine_mov_buffs,
    'TaelinArena.Game.speed_multiplier_of': $TaelinArena$Game$speed_multiplier_of,
    'TaelinArena.Game.get_thing_mov': $TaelinArena$Game$get_thing_mov,
    'TaelinArena.Game.get_thing_pad': $TaelinArena$Game$get_thing_pad,
    'TaelinArena.Game.update_buff_dur': $TaelinArena$Game$update_buff_dur,
    'TaelinArena.Game.get_thing_knk': $TaelinArena$Game$get_thing_knk,
    'TaelinArena.Game.get_thing_wei': $TaelinArena$Game$get_thing_wei,
    'F64.gtn': $F64$gtn,
    'TaelinArena.Game.get_thing_fun': $TaelinArena$Game$get_thing_fun,
    'TaelinArena.Game.get_thing_chi': $TaelinArena$Game$get_thing_chi,
    'TaelinArena.Game.set_thing_chi': $TaelinArena$Game$set_thing_chi,
    'F64.V3.get_z': $F64$V3$get_z,
    'F64.V3.get_y': $F64$V3$get_y,
    'TaelinArena.Game.get_thing_mhp': $TaelinArena$Game$get_thing_mhp,
    'TaelinArena.Game.get_thing_die': $TaelinArena$Game$get_thing_die,
    'Bool.or': $Bool$or,
    'List.concat': $List$concat,
    'TaelinArena.fold_with_context': $TaelinArena$fold_with_context,
    'TaelinArena.exec_turn': $TaelinArena$exec_turn,
    'Exports.new': $Exports$new,
    'Exports.TaelinArena': $Exports$TaelinArena,
  };
})();
console.log(module.exports['Exports.TaelinArena']);
