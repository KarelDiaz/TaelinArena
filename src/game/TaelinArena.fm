import Base#9y4x
import TaelinArena.Geometry
import TaelinArena.Game
import TaelinArena.ModelIds
import TaelinArena.Thing

// Apply a player input to the game state
exec_command(cmd: Command, gm: Game) : Game
  case cmd |command
  let fn = (thi: Thing) =>
    case cmd.inp as inp
    with thi : Thing
    | sdir =>
      case thi |thing
      let is_idle = len_v3(inp.dir) === 0
      let map_dir = (d: V3) => if is_idle then d else inp.dir
      let map_wlk = (s: Bool) => if is_idle then false else true
      let thi = thi <= thing(dir = map_dir(dir))
      let thi = thi <= thing(wlk = map_wlk(wlk))
      thi
    | key0 => thi <= thing(
      trg = if act === 0 then inp.pos else trg,
      act = if act === 0 then 1 else act,
      tik = if act === 0 then 0 else tik)
    | key1 => thi <= thing(
      trg = if act === 0 then inp.pos else trg,
      act = if act === 0 then 2 else act,
      tik = if act === 0 then 0 else tik)
    | key2 => thi <= thing(
      trg = if act === 0 then inp.pos else trg,
      act = if act === 0 then 3 else act,
      tik = if act === 0 then 0 else tik)
    | key3 => thi <= thing(
      trg = if act === 0 then inp.pos else trg,
      act = if act === 0 then 4 else act,
      tik = if act === 0 then 0 else tik)
    | key4 => thi <= thing(
      trg = if act === 0 then inp.pos else trg,
      act = if act === 0 then 5 else act,
      tik = if act === 0 then 0 else tik)
    | key5 => thi <= thing(
      trg = if act === 0 then inp.pos else trg,
      act = if act === 0 then 6 else act,
      tik = if act === 0 then 0 else tik)
    | cmsg => thi
  with_thing(cmd.pid, fn, gm)

interact_with(this:Thing, that:Thing): Thing
  case this |thing
  case that |thing
  case this.box
  | cbox => 
    case that.box
    | cbox =>  
      let dst = dist_v3(this.pos, that.pos)
      let rad = this.box.rad + that.box.rad
      if (dst > that.box.rad) && (dst < rad) then
        let out_dir = norm_v3(sub_v3(this.pos, that.pos))
        let out_vec = scale_v3(rad - dst, out_dir)
        let new_pos = add_v3(this.pos, out_vec)
        this <= thing(pos = new_pos)
      else
        this
    | pbox =>
      this
  | pbox =>
    this

// Game's main loop
exec_turn(gm: Game) : Game
  let intr = (that,this) => interact_with(this,that)
  let tick = (stage: List(Thing), thi: Thing, res: List(Thing)) =>
    case thi |thing
    let thi = thi.fun(thi)
    let thi = thi <= thing(pos = add_v3(pos,vel))
    let thi = thi <= thing(pos = case wlk
      | true  => add_v3(pos,scale_v3(mov*bst,dir))
      | false => pos)
    let thi = thi <= thing(tik = tik + 1)
    let thi = fold(Thing; _ thi, intr, stage)
    case thi |thing
    let neo_init = (neo_thi) =>
      case neo_thi | thing
      neo_thi.fun(neo_thi)
    let neo_list = map(Thing; Thing; neo_init, thi.neo)
    concat(_ neo_list,
      case thi.die
      |true res
      |false cons(_thi,res))
  gm <= game(stage = fold(Thing; _ [], tick(stage), stage))

draw_thing(thi: Thing) : Draw 
  case thi |thing
  let mid = thi.mid
  let pos = thi.pos
  let dir =
    if thi.act === 0 then
      thi.dir
    else
      lookat_v3(thi.pos, thi.trg, thi.dir)
  draw(mid, pos, dir)

new_game(tids: List(ThingId)) : Game
  let nil = (pid) => []
  let cons = (tid, heroes, pid) => 
    let hpid = pid
    let hpos = v3(pid * 64, 0, 0)
    let hero = init_thing(tid) <= thing(pid=hpid, pos=hpos)
    let rest = heroes(pid + 1)
    cons(_ hero, rest)
  game(fold(_ Number -> List(Thing); nil, cons, tids, 0))
