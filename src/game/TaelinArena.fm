import Base#9y4x
import TaelinArena.Geometry
import TaelinArena.Game
import TaelinArena.Models
import TaelinArena.Heroes

// Creates a new reseted hero given its HeroId
new_hero(hid: HeroId) : Thing
  case get_hero_by_hid(hid) as hro |hero
  let id  = 0
  let hid = hid
  let act = 0
  let mid = 0
  let tik = 0
  let chp = 128
  let pos = v3(0,0,0)
  let mov = 8
  let spd = 0
  let dir = v3(0,-1,0)
  let vel = v3(0,0,0)
  let box = cbox(12)
  hro.init(thing(id,
    hid,act,mid,tik,
    chp,pos,mov,spd,
    dir,vel,box))

// Apply a player input to the game state
exec_command(cmd: Command, gm: Game) : Game
  case cmd |command
  let fn = (thi: Thing) =>
    case cmd.inp as inp
    with thi : Thing
    | sdir =>
      case thi |thing
      case get_hero_by_hid(thi.hid) as her |hero
      let is_idle = len_v3(inp.dir) === 0
      let map_dir =
        (d: V3) => if is_idle then d else inp.dir
      let map_spd =
        (s: Number) => if is_idle then 0 else thi.mov
      let thi = thi <= thing(dir = map_dir(dir))
      let thi = thi <= thing(spd = map_spd(spd))
      thi
    | key0 => thi <= thing(
      dir = norm_v3(sub_v3(inp.pos, pos)),
      act = if act === 0 then 1 else act,
      tik = if act === 0 then 0 else tik)
    | key1 => thi <= thing(
      dir = norm_v3(sub_v3(inp.pos, pos)),
      act = if act === 0 then 2 else act,
      tik = if act === 0 then 0 else tik)
    | key2 => thi <= thing(
      dir = norm_v3(sub_v3(inp.pos, pos)),
      act = if act === 0 then 3 else act,
      tik = if act === 0 then 0 else tik)
    | key3 => thi <= thing(
      dir = norm_v3(sub_v3(inp.pos, pos)),
      act = if act === 0 then 4 else act,
      tik = if act === 0 then 0 else tik)
    | key4 => thi <= thing(
      dir = norm_v3(sub_v3(inp.pos, pos)),
      act = if act === 0 then 5 else act,
      tik = if act === 0 then 0 else tik)
    | key5 => thi <= thing(
      dir = norm_v3(sub_v3(inp.pos, pos)),
      act = if act === 0 then 6 else act,
      tik = if act === 0 then 0 else tik)
    | cmsg => thi
  with_thing(cmd.pid, fn, gm)

interact_with(this:Thing, that:Thing): Thing
  case this |thing
  case that |thing
  case this.box
  | cbox => 
    case that.box
    | cbox =>  
      let dst = dist_v3(this.pos, that.pos)
      let rad = this.box.rad + that.box.rad
      if (dst > that.box.rad) && (dst < rad) then
        let out_dir = norm_v3(sub_v3(this.pos, that.pos))
        let out_vec = scale_v3(rad - dst, out_dir)
        let new_pos = add_v3(this.pos, out_vec)
        this <= thing(pos = new_pos)
      else
        this
    | pbox =>
      this
  | pbox =>
    this

// Game's main loop
exec_turn(gm: Game) : Game
  let intr = (that,this) => interact_with(this,that)
  let tick = (stage: List(Thing), thi: Thing) =>
    case thi |thing
    case get_hero_by_hid(thi.hid) as hro | hero
    let thi = hro.tick(thi)
    let thi = thi<=thing(pos=add_v3(pos,vel))
    let thi = thi<=thing(pos=add_v3(pos,scale_v3(spd,dir)))
    let thi = thi<=thing(tik=tik+1)
    let thi = fold(Thing; _ thi, intr, stage)
    thi
  gm <= game(stage = map(Thing; _ tick(stage), stage))

draw_thing(thi: Thing) : Draw 
  case thi |thing
  draw(thi.mid, thi.pos, thi.dir)

srpx : Thing
  new_hero(SHAO_HERO) <= thing(pid=0, pos=v3(0,0,0))

stanci : Thing
  new_hero(MIKEGATOR_HERO) <= thing(pid=1, pos=v3(-64,0,0))

neelix : Thing
  new_hero(MIKEGATOR_HERO) <= thing(pid=2, pos=v3(64,0,0))

belanna : Thing
  new_hero(MIKEGATOR_HERO) <= thing(pid=3, pos=v3(0,64,0))

new_game : Game
  game([srpx, stanci, neelix, belanna])
