import Base#9y4x
import TaelinArena.Geometry
import TaelinArena.ModelIds
import TaelinArena.ThingIds

PlayerId : Type
  Number

ThingId : Type
  Number

ModelId : Type
  Number

ActionId : Type
  Number

T Hitbox
| cbox(rad: Number)
| pbox(pts: List(V3))

T Hit
| pointed_hit(rad: Number, dmg: Number, vec: V3)
| outward_hit(rad: Number, dmg: Number, mag: Number)

TxFunction : Type
  Thing -> Thing

T Thing
| thing(
  fun : TxFunction,  // transaction function
  tid : ThingId,     // id of thing that this is
  pid : PlayerId,    // number of player controlling this
  mid : ModelId,     // id of model to be rendered
  act : ActionId,    // number of action this is performing
  tik : Number,      // ticks passed since last act change
  pos : V3,          // in-game position
  mov : Number,      // movement speed
  bst : Number,      // movement speed multiplier
  wlk : Bool,        // is this walking?
  dir : V3,          // facing direction
  trg : V3,          // targeted position
  vel : V3,          // dash velocity vector
  box : Hitbox,      // hitbox (space occupied)
  dmg : Number,      // damage taken
  knk : V3,          // launch direction and intensity
  chi : List(Thing), // child thing to create on next tick
  hit : Maybe(Hit),  // damage and knockback caused by this
  die : Bool)        // should this be removed?

T Game
| game(stage : List(Thing))

T Input
| sdir(dir: V3) // stick direction
| key0(pos: V3) // left down
| key1(pos: V3) // middle down
| key2(pos: V3) // right down
| key3(pos: V3) // space down
| key4(pos: V3) // extra down
| key5(pos: V3) // shift down
| cmsg(txt: String) // chat message

T Command
| command(pid: PlayerId, inp: Input)

T Draw
| draw(model: Number, pos: V3, dir: V3, dmg: Number)

// Gets a thing from game by its id
get_thing_by_pid(pid: PlayerId, gm: Game) : Maybe(Thing)
  case gm | game
  let cond = (t) =>
    case t |thing
    number_equal(t.pid, pid)
  find(Thing; cond, gm.stage)

// Gets the position of an object by its id
get_position_by_pid(pid: PlayerId, gs: Game) : V3
  case get_thing_by_pid(pid, gs) as found
  | none => v3(0,0,0)
  | some => case found.value |thing found.value.pos

// Modifies every thing in the game
map_stage(fn: Thing -> Thing, gm: Game) : Game
  gm <= game(stage = map(__ fn, stage))

// Modifies the object with given id
with_thing(pid:PlayerId, fn: Thing -> Thing, gm:Game) : Game
  let effect = (thi) =>
    case thi |thing
    case number_equal(thi.pid, pid) as e
    with thi : Thing
    | true  => fn(thi)
    | false => thi
  map_stage(effect, gm)

// Creates a new reseted hero given its ThingId
new_thing(fun: TxFunction) : Thing
  let fun = fun
  let tid = 0
  let pid = 0
  let mid = 0xFFFFFFFF
  let act = 0
  let tik = 0
  let pos = v3(0,0,0)
  let mov = 8
  let bst = 1
  let wlk = false
  let dir = v3(0,-1,0)
  let trg = v3(0,0,0)
  let vel = v3(0,0,0)
  let box = cbox(12)
  let dmg = 0
  let knk = v3(0,0,0)
  let chi = []
  let hit = none(_)
  let die = false
  thing(
    fun,tid,pid,mid,act,tik,pos,mov,
    bst,wlk,dir,trg,vel,box,dmg,knk,
    chi,hit,die)

// Performs an animation, reseting to idle when it ends
// - self: thing to be animated
// - boost: speed multiplier (0 = no move, 1 = normal spd)
// - model: id of the first model of the animation
// - count: total count of models on the animation
// - durat: duration of the animation
animate(
  self  : Thing,
  boost : Number,
  model : Number,
  count : Number,
  durat : Number
  ) : Thing
  let delay = durat \ count
  self <= thing(
    bst = if tik === durat then 1 else boost,
    mid = model + (floor(tik \ delay) % count),
    act = if tik === durat then 0 else act)

// Performs a dash between certain frames
// - self: thing that will dash
// - speed: dash speed in voxels/frame
// - from_tik: number of the tik it will start the dash
// - til_tik: number of the tik it will stop the dash
dash(
  self     : Thing,
  speed    : Number,
  from_tik : Number,
  til_tik  : Number)
  self <= thing(vel =
    if (tik > from_tik) && (tik < til_tik) then 
      scale_v3(speed, lookat_v3(pos, trg, dir))
    else
      v3(0,0,0))

// Spawns another thing
// - self: thing that will create another thing
// - at_tik: number of the tik when thing will be created
// - at_pos: position on which thing will be created
// - thing: thing that will be created
spawn(
  self   : Thing,
  at_tik : Number,
  at_pos : V3,
  thing  : Thing)
  let thing = thing <= thing(pid = -1, pos = at_pos)
  self <= thing(chi = if tik === at_tik then [thing] else [])

// Blinks (teleports) to another position
// - self: thing that will blink
// - at_tik: number of the tik on which the blink happens
// - to_pos: position where the thing will blink to
blink(
  self   : Thing,
  at_tik : Number,
  to_pos : V3)
  self <= thing(
    pos = if tik === at_tik then to_pos else pos,
    dir = if tik === at_tik then lookat_v3(pos,trg,dir) else dir)

// Creates a hit box that damages and knockbacks
// - self: thing that owns the hitbox
// - hitx: Hit object with damage and knockback info
hit(
  self   : Thing,
  at_tik : Number,
  do_hit : Hit)
  case self |thing
  if self.tik === at_tik then
    self <= thing(hit = some(_ do_hit))
  else if self.tik === (at_tik + 2) then
    self <= thing(hit = none(_))
  else
    self

// Dies at given tick
die(
  self   : Thing,
  at_tik : Number)
  self <= thing(die = if tik === at_tik then true else false)

// Returns the direction the thing is looking to
look_dir(self: Thing)
  case self |thing
  lookat_v3(self.pos, self.trg, self.dir)
