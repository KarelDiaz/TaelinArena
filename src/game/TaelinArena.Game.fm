import Base#9y4x
import TaelinArena.Geometry

PlayerId : Type
  Number

HeroId : Type
  Number

ActionId : Type
  Number

ModelId : Type
  Number

T Hitbox
| cbox(rad: Number)
| pbox(pts: List(V3))

T Hero
| hero(tick: Thing -> Thing)

T Thing
| thing(
  pid : PlayerId,
  hid : HeroId,
  act : ActionId,
  mid : ModelId,
  tik : Number,
  chp : Number,
  pos : V3,
  mov : Number,
  bst : Number,
  wlk : Bool,
  dir : V3,
  trg : V3,
  vel : V3,
  box : Hitbox,
  neo : List(Thing),
  die : Bool)

T Game
| game(stage : List(Thing))

T Input
| sdir(dir: V3) // stick direction
| key0(pos: V3) // left down
| key1(pos: V3) // middle down
| key2(pos: V3) // right down
| key3(pos: V3) // space down
| key4(pos: V3) // extra down
| key5(pos: V3) // shift down
| cmsg(txt: String) // chat message

T Command
| command(pid: PlayerId, inp: Input)

T Draw
| draw(model: Number, pos: V3, dir: V3)

// Gets a thing from game by its id
get_thing_by_pid(pid: PlayerId, gm: Game) : Maybe(Thing)
  case gm | game
  let cond = (t) =>
    case t |thing
    number_equal(t.pid, pid)
  find(Thing; cond, gm.stage)

// Gets the position of an object by its id
get_position_by_pid(pid: PlayerId, gs: Game) : V3
  case get_thing_by_pid(pid, gs) as found
  | none => v3(0,0,0)
  | some => case found.value |thing found.value.pos

// Modifies every thing in the game
map_stage(fn: Thing -> Thing, gm: Game) : Game
  gm <= game(stage = map(__ fn, stage))

// Modifies the object with given id
with_thing(pid:PlayerId, fn: Thing -> Thing, gm:Game) : Game
  let effect = (thi) =>
    case thi |thing
    case number_equal(thi.pid, pid) as e
    with thi : Thing
    | true  => fn(thi)
    | false => thi
  map_stage(effect, gm)

// Creates a new reseted hero given its HeroId
new_hero(hid: HeroId) : Thing
  let id  = 0
  let hid = hid
  let act = 0
  let mid = 0
  let tik = 0
  let chp = 128
  let pos = v3(0,0,0)
  let mov = 8
  let bst = 1
  let wlk = false
  let dir = v3(0,-1,0)
  let trg = v3(0,0,0)
  let vel = v3(0,0,0)
  let box = cbox(12)
  let neo = []
  let die = false
  thing(id,
    hid,act,mid,tik,
    chp,pos,mov,bst,
    wlk,dir,trg,vel,
    box,neo,die)

// Interpolates animation frames
animate(
  self  : Thing,
  delay : Number,
  boost : Number,
  model : Number,
  count : Number
  ) : Thing
  self <= thing(
    bst = if (count*delay) === tik then 1 else boost,
    mid = model + (floor(tik \ delay) % count),
    act = if (count*delay) === tik then 0 else act)

// Performs a dash between certain frames
dash(
  self     : Thing,
  speed    : Number,
  from_tik : Number,
  til_tik  : Number)
  self <= thing(vel =
    if (tik > from_tik) && (tik < til_tik) then 
      scale_v3(speed, lookat_v3(pos, trg, dir))
    else
      v3(0,0,0))

// Spawns another thing
spawn(
  self   : Thing,
  at_tik : Number,
  at_pos : V3,
  thing  : Thing)
  let thing = thing <= thing(pid = -1, pos = at_pos)
  self <= thing(neo = if tik === at_tik then [thing] else [])

// Blinks to another position
blink(
  self   : Thing,
  at_tik : Number,
  to_pos : V3)
  self <= thing(
    pos = if tik === at_tik then to_pos else pos,
    dir = if tik === at_tik then lookat_v3(pos,trg,dir) else dir)
