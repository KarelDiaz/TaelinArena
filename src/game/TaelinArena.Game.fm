import Base#kqQ2
import TaelinArena.Geometry
import TaelinArena.ModelIds

PlayerId : Type
  Number

ModelId : Type
  Number

ActionId : Type
  Number

T Hitbox
| nbox
| cbox(rad: Number)
| pbox(pts: List(V3))

T Hit
| pointed_hit(rad: Number, dmg: Number, vec: V3)
| outward_hit(rad: Number, dmg: Number, mag: Number)

TxFunction : Type
  Thing -> Thing

T Light
| light(pos: V3, rad: Number, rng: Number, sub: V3, add: V3)

T Thing
| thing(
  fun : TxFunction,  // transaction function
  pid : PlayerId,    // number of player controlling this
  mid : ModelId,     // id of model to be rendered
  act : ActionId,    // number of performing action
  nam : String,      // name of thing
  lit : List(Light), // list of lights to render
  tik : Number,      // ticks passed since last act change
  pos : V3,          // in-game position
  mov : Number,      // movement speed
  bst : Number,      // movement speed multiplier
  wlk : Bool,        // is this walking?
  dir : V3,          // facing direction
  trg : V3,          // targeted position
  vel : V3,          // dash velocity vector
  box : Hitbox,      // hitbox (space occupied)
  dmg : Number,      // damage taken
  knk : V3,          // launch direction and intensity
  chi : List(Thing), // child thing to create on next tick
  hit : Maybe(Hit),  // damage/knockback caused by this
  rst : Bool,        // should this reset to idle
  die : Bool)        // should this be removed?

T Game
| game(stage : List(Thing))

T Input
| sdir(dir: V3) // stick direction
| key0(pos: V3) // left down
| key1(pos: V3) // middle down
| key2(pos: V3) // right down
| key3(pos: V3) // space down
| key4(pos: V3) // extra down
| key5(pos: V3) // shift down
| cmsg(txt: String) // chat message

T Command
| command(pid: PlayerId, inp: Input)

//T Draw
//| draw(
  //mid: Number,
  //nam: String,
  //pos: V3,
  //dir: V3,
  //lit: List(Light),
  //dmg: Number)

// Creates a new default thing
new_thing : Thing
  thing(
    ((x) => x), // fun
    0xFFFFFFFF, // pid
    0xFFFFFFFF, // mid
    0,          // act
    nil(_),     // nam
    nil(_),     // lit
    0,          // tik
    v3(0,0,0),  // pos
    8,          // mov
    1,          // bst
    false,      // wlk
    v3(0,-1,0), // dir
    v3(0,0,0),  // trg
    v3(0,0,0),  // vel
    cbox(12),   // box
    0xFFFFFFFF, // dmg
    v3(0,0,0),  // knk
    nil(_),     // chi
    none(_),    // hit
    false,      // rst
    false)      // die

// Gets a thing from game by its id
get_thing_by_pid(pid: PlayerId, gm: Game) : Maybe(Thing)
  case gm | game
  let cond = (t) =>
    case t |thing
    number_equal(t.pid, pid)
  find(Thing; cond, gm.stage)

// Gets the position of an object by its id
get_position_by_pid(pid: PlayerId, gs: Game) : V3
  case get_thing_by_pid(pid, gs) as found
  | none => v3(0,0,0)
  | some => case found.value |thing found.value.pos

// Modifies every thing in the game
map_stage(fn: Thing -> Thing, gm: Game) : Game
  gm <= game(stage = map(__ fn, stage))

// Modifies the object with given id
with_thing(pid:PlayerId, fn: Thing -> Thing, gm:Game) : Game
  let effect = (thi) =>
    case thi |thing
    case number_equal(thi.pid, pid) as e
    with thi : Thing
    | true  => fn(thi)
    | false => thi
  map_stage(effect, gm)

// Thing field setters
set_thing_fun(thi:Thing, new_fun) thi<=thing(fun=new_fun)
set_thing_pid(thi:Thing, new_pid) thi<=thing(pid=new_pid)
set_thing_mid(thi:Thing, new_mid) thi<=thing(mid=new_mid)
set_thing_act(thi:Thing, new_act) thi<=thing(act=new_act)
set_thing_nam(thi:Thing, new_nam) thi<=thing(nam=new_nam)
set_thing_lit(thi:Thing, new_lit) thi<=thing(lit=new_lit)
set_thing_tik(thi:Thing, new_tik) thi<=thing(tik=new_tik)
set_thing_pos(thi:Thing, new_pos) thi<=thing(pos=new_pos)
set_thing_mov(thi:Thing, new_mov) thi<=thing(mov=new_mov)
set_thing_bst(thi:Thing, new_bst) thi<=thing(bst=new_bst)
set_thing_wlk(thi:Thing, new_wlk) thi<=thing(wlk=new_wlk)
set_thing_dir(thi:Thing, new_dir) thi<=thing(dir=new_dir)
set_thing_trg(thi:Thing, new_trg) thi<=thing(trg=new_trg)
set_thing_vel(thi:Thing, new_vel) thi<=thing(vel=new_vel)
set_thing_box(thi:Thing, new_box) thi<=thing(box=new_box)
set_thing_dmg(thi:Thing, new_dmg) thi<=thing(dmg=new_dmg)
set_thing_knk(thi:Thing, new_knk) thi<=thing(knk=new_knk)
set_thing_chi(thi:Thing, new_chi) thi<=thing(chi=new_chi)
set_thing_hit(thi:Thing, new_hit) thi<=thing(hit=new_hit)
set_thing_rst(thi:Thing, new_rst) thi<=thing(rst=new_rst)
set_thing_die(thi:Thing, new_die) thi<=thing(die=new_die)

// Resets to given tick
reset(
  self   : Thing,
  at_tik : Number)
  case self |thing
  if self.tik > (at_tik - 1) then
    self <= thing(rst = true)
  else
    self

// Dies at given tick
die(
  self   : Thing,
  at_tik : Number)
    case self |thing
    if self.tik > (at_tik - 1) then
      self <= thing(die = true)
    else
      self

// Performs an animation, reseting to idle when it ends
// - self: thing to be animated
// - boost: speed multiplier (0 = no move, 1 = normal spd)
// - model: id of the first model of the animation
// - count: total count of models on the animation
// - durat: duration of the animation
animate_between(
  self  : Thing,
  boost : Number,
  model : Number,
  count : Number,
  from  : Number,
  til   : Number
  ) : Thing
  case self |thing
  if is_between(from, til, self.tik) then
    self <= thing(
      dir = if (act > 0) && is_false(wlk)
        then look_dir(self)
        else dir,
      mid =
        let duration = til - from
        let curr_tik = tik - from
        let curr_tim = curr_tik \ duration
        model + (floor(curr_tim * count) % count))
  else
    self

// Performs an animation, reseting to idle when it ends
// - self: thing to be animated
// - boost: speed multiplier (0 = no move, 1 = normal spd)
// - model: id of the first model of the animation
// - count: total count of models on the animation
// - durat: duration of the animation
animate(
  self  : Thing,
  boost : Number,
  model : Number,
  count : Number,
  durat : Number
  ) : Thing
  let self = animate_between(self,boost,model,count,0,durat)
  let self = reset(self, durat - 1)
  self

// Performs an animation, dying when it ends
// - self: thing to be animated
// - boost: speed multiplier (0 = no move, 1 = normal spd)
// - model: id of the first model of the animation
// - count: total count of models on the animation
// - durat: duration of the animation
animate_die(
  self  : Thing,
  boost : Number,
  model : Number,
  count : Number,
  durat : Number
  ) : Thing
  let self = animate_between(self,boost,model,count,0,durat)
  let self = die(self, durat - 1)
  self

// Performs a dash between certain frames
// - self: thing that will dash
// - speed: dash speed in voxels/frame
// - from_tik: number of the tik it will start the dash
// - til_tik: number of the tik it will stop the dash
dash(
  self     : Thing,
  speed    : Number,
  from_tik : Number,
  til_tik  : Number)
  self <= thing(vel =
    if is_between(from_tik, til_tik, tik) then 
      scale_v3(speed, lookat_v3(pos, trg, dir))
    else
      v3(0,0,0))

// Sets the position
move(self: Thing, to_pos: V3)
  self <= thing(pos = to_pos)

// Blinks (teleports) to another position
// - self: thing that will blink
// - at_tik: number of the tik on which the blink happens
// - to_pos: position where the thing will blink to
blink(
  self   : Thing,
  at_tik : Number,
  to_pos : V3)
  self <= thing(
    pos = if tik === at_tik then to_pos else pos)

// Creates a hit box that damages and knockbacks
// - self: thing that owns the hitbox
// - hitx: Hit object with damage and knockback info
hit(
  self   : Thing,
  at_tik : Number,
  do_hit : Hit)
  case self |thing
  if self.tik === at_tik then
    self <= thing(hit = some(_ do_hit))
  else
    self

// Spawns another thing
// - self: thing that will create another thing
// - at_tik: number of the tik when thing will be created
// - at_pos: position on which thing will be created
// - thing: thing that will be created
spawn(
  self   : Thing,
  at_tik : Number,
  childs : List(Thing))
  //let thing = thing <= thing(pid = -1, pos = at_pos)
  self <= thing(chi =
    if tik === at_tik then
      childs
    else
      chi)

// Creates lights at given tick
illumine(
  self     : Thing,
  from_tik : Number,
  to_tik   : Number,
  lights   : List(Light))
  self <= thing(lit =
    if is_between(from_tik, to_tik, tik)
      then lights
      else nil(_))

// Returns the direction the thing is looking to
look_dir(self: Thing)
  case self |thing
  lookat_v3(self.pos, self.trg, self.dir)

// Returns the position at a given distance towards look_dir
at_dist(self: Thing, dist: Number)
  case self |thing
  let dir = look_dir(self)
  let pos = add_v3(self.pos, scale_v3(dist, dir))
  pos

// Return the position within a maximum range towards look_dir
at_max_dist(self: Thing, max_range: Number)
  case self |thing
  let dist_max = dist_v3(self.pos, at_dist(self, max_range))
  let dist_trg = dist_v3(self.pos, self.trg)
  if dist_trg < dist_max
    then at_dist(self, dist_trg)
    else at_dist(self, max_range)

// Return the position within a mininum range towards look_dir
at_min_dist(self: Thing, min_range: Number)
  case self |thing
  let dist_min = dist_v3(self.pos, at_dist(self, min_range))
  let dist_trg = dist_v3(self.pos, self.trg)
  if dist_trg > dist_min
    then at_dist(self, dist_trg)
    else at_dist(self, min_range)
